{
  "hash": "fe249248e42915c2364c740c7f4d1356",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 3\"\nauthor: \"Arya Siahaan\"\ndate: \"May 15, 2024\"\ndate-modified: \"June 9, 2024\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# VAST Challenge 2024\n\n### Mini-Challenge 2:\n\n#### Background\n\nIn Oceanus, the island's economy thrives on the movement of seafaring vessels, particularly those operated by commercial fishing companies, indicating a healthy economic state. However, a major event has disrupted these routines: SouthSeafood Express Corp was caught engaging in illegal fishing. This scandal caused significant turmoil within the close-knit fishing community. FishEye International, a non-profit dedicated to combating illegal fishing, seeks assistance to understand the impact of this event. They have been gathering and processing data on ship movements and shipping records to create CatchNet: the Oceanus Knowledge Graph. While analysts at FishEye ensure data accuracy, they require assistance to develop analytical capabilities for this data.\n\n#### Tasks and Questions:\n\nFishEye analysts require assistance in performing geographic and temporal analysis of the CatchNet data to prevent future instances of illegal fishing. The task involves developing innovative visual analytics tools and workflows designed to identify and understand signatures of various behaviors. One key objective is to visualize the signature of SouthSeafood Express Corp's illegal activities. Additionally, there is a need to create a workflow capable of detecting other instances of illegal behavior within the data. These efforts are crucial for enhancing FishEye's ability to monitor and combat illegal fishing effectively. This exercise will attempt to address Question 1 and Question 3 of this challenge.\n\n##### Question 1\n\nFishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports. But as they were loading data into CatchNet, they discovered they had purchased the wrong port records. They wanted to get the ship off-load records, but they instead got the port-exit records (essentially trucks/trains leaving the port area). Port exit records do not include which vessel that delivered the products. Given this limitation, develop a visualization system to associate vessels with their probable cargos. Which vessels deliver which products and when? What are the seasonal trends and anomalies in the port exit records?\n\n##### Question 3\n\nTo support further Fisheye investigations, develop visual analytics workflows that allow you to discover other vessels engaging in behaviors similar to SouthSeafood Express Corp’s illegal activities? Provide visual evidence of the similarities.\n\n## Getting Started\n\n### Loading the required R library packages\n\nThe following code chunk utilises the [`p_load()`](https://www.rdocumentation.org/packages/pacman/versions/0.5.1/topics/p_load) function from the [pacman](https://github.com/trinker/pacman) package to ensure that the necessary packages are available in the R environment. If the packages are already installed on the computer, [`p_load()`](https://www.rdocumentation.org/packages/pacman/versions/0.5.1/topics/p_load) will load them. If they are not installed, it will first install them and then load them into the R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite, igraph, \n               tidygraph, ggraph, SmartEDA,\n               lubridate, ggplot2) \n```\n:::\n\n\n### Loading The Data\n\nThe dataset is in the form of a json file and it is available for download at the [Vast Challenge 2024](https://vast-challenge.github.io/2024/index.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_data <- fromJSON(\"data/mc2.json\")\n```\n:::\n\n\n## Data Preparation\n\n### Wrangling and tidying edges\n\n#### Extracting edges\n\nConverts the links part of mc2_data to a tibble and removes duplicate rows, then displays the structure of the data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Wrangling and tidying edges\nmc2_edges <- as_tibble(mc2_data$links) %>% distinct()\n# Converts the date columns to POSIXct datetime format using the as_datetime function from the lubridate package, then display it with  glimpse() to confirm if the process have been performed correctly.\nmc2_edges <- mc2_edges %>%\n  mutate(date = as_datetime(date), time = as_datetime(time)) %>%\n  mutate(date_only = as.Date(time))\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 18\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <dttm> 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ date_only           <date> 2035-09-16, 2035-09-20, 2035-09-28, 2035-10-04, 2…\n```\n\n\n:::\n:::\n\n\n\n\n\n#### Splitting and Tidying the 'type' Column\n\nThis splits the type column into multiple columns (event2 and event3) and appends these columns back to the mc2_edges dataframe.\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc2_edges$type, \"\\\\.\")\nmax_elements <- max(lengths(word_list)) #to find the maximum number of elements in any split\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x)))) #to pad shorter splits with NA values to make them all the same length.\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"event\", 1:max_elements)\n\n# Since the output above is a matrix, the code chunk below is used to convert word_df into a tibble data.frame.\nword_df <- as_tibble(word_df) %>%\n  select(event2, event3)\n\n\n# The code chunk below appends the extracted columns back to mc2_edges tibble data.frame\nmc2_edges <- mc2_edges %>%\n  cbind(word_df)\n```\n:::\n\n\n\n\n#### Handling unnecessary Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dropping Unnecessary Columns\nmc2_edges_cleaned <- mc2_edges %>%\n  select(-c(`_last_edited_by`, `_date_added`, `_last_edited_date`, `_raw_source`, `_algorithm`, `key`, `type`, `data_author`, `aphorism`, `holiday_greeting`, `wisdom`, `saying of the sea`))\n\nglimpse(mc2_edges_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 8\n$ time      <dttm> 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09-28 04:31:…\n$ dwell     <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225.35, 10956…\n$ source    <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of Haacklee\", …\n$ target    <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchplundererbc0…\n$ date      <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ date_only <date> 2035-09-16, 2035-09-20, 2035-09-28, 2035-10-04, 2035-10-15,…\n$ event2    <chr> \"TransportEvent\", \"TransportEvent\", \"TransportEvent\", \"Trans…\n$ event3    <chr> \"TransponderPing\", \"TransponderPing\", \"TransponderPing\", \"Tr…\n```\n\n\n:::\n:::\n\n\n\n### Wrangling and tidying nodes\n\nExtracting Nodes and Removing Duplicates\n\nThis converts the nodes data to a tibble and removes duplicate rows, then displays the structure of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  distinct()\nglimpse(mc2_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,637\nColumns: 20\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    <chr> \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        <chr> \"2033-09-04T00:00:00\", \"2034-01-21T00:00:00\", \"20…\n$ `_last_edited_date`  <chr> \"2035-01-25T00:00:00\", \"2035-01-04T00:00:00\", \"20…\n$ `_raw_source`        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n```\n\n\n:::\n:::\n\n\n\nFrom the table above, beside the date data type and inappropriate field name issues we discussed earlier, two additional data issues can be observed. They are:\n\nThe values in Activities and fish_species_present fields are in list data type, which will affect the ability to process and to analyse the data. As shown in the screenshot below, some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).\n\nTidying text field In the code chunk below, mutate() of dplyr and gsub() of Base R are used to perform the data tidying task.\n\nThis cleans up the Activities and fish_species_present columns by removing unnecessary characters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %>% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %>%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities)) \n\nmc2_nodes <- mc2_nodes %>%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %>% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %>%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n```\n:::\n\n\n\n#### Dropping unnecessary Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes_cleaned <- mc2_nodes %>%\n  select(-c(`_last_edited_by`, `_date_added`, `_last_edited_date`, `_raw_source`, `_algorithm`, `style`))\nglimpse(mc2_nodes_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,637\nColumns: 14\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ name                 <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <chr> \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"…\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present <chr> \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating subsets for nodes data\nN_fish <- mc2_nodes_cleaned %>%\n  filter(type == \"Entity.Commodity.Fish\") %>%\n  select(-c(`type`, `Activities`, `fish_species_present`)) %>%\n  rename(fish_species = name, fish_id = id)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nNL_City <- mc2_nodes_cleaned %>%\n  filter(type == \"Entity.Location.City\") %>%\n  select(-c(`type`, `fish_species_present`)) %>%\n  rename(city_name = Name, city_id = id)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nNL_Point <- mc2_nodes_cleaned %>%\n  filter(type == \"Entity.Location.Point\") %>%\n  select(-c(`kind`, `fish_species_present`)) %>%\n  rename(point_name = Name, point_id = id)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nNL_Region <- mc2_nodes_cleaned %>%\n  filter(type == \"Entity.Location.Region\") %>%\n  select(-c(`type`, `Description`)) %>%\n  rename(region_name = Name, region_id = id, region_kind = kind)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nN_Delivery_doc <- mc2_nodes_cleaned %>%\n  filter(type == \"Entity.Document.DeliveryReport\") %>%\n  mutate(date = as.Date(date)) %>%\n  rename(deliver_date = date, cargo_id = id) %>%\n  select(-c(`type`, `Activities`, `fish_species_present`)) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(N_Delivery_doc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,307\nColumns: 11\n$ name           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ cargo_id       <chr> \"cargo_2035_2394778c\", \"cargo_2035_23956ba0\", \"cargo_20…\n$ Name           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ Description    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ kind           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ qty_tons       <dbl> 24.375, 18.125, 20.625, 13.125, 13.125, 7.500, 36.250, …\n$ deliver_date   <date> 2035-11-03, 2035-08-16, 2035-08-20, 2035-11-07, 2035-0…\n$ flag_country   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ company        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ tonnage        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ length_overall <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nN_vessel <- mc2_nodes_cleaned %>%\n  filter(grepl(\"Entity.Vessel\", type)) %>%\n  mutate(vessel_type = case_when(\n    grepl(\"FishingVessel\", type, ignore.case = TRUE) ~ \"Fishing\",\n    grepl(\"Ferry.Passenger\", type, ignore.case = TRUE) ~ \"Ferry_Passenger\",\n    grepl(\"Ferry.Cargo\", type, ignore.case = TRUE) ~ \"Ferry_Cargo\",\n    grepl(\"Research\", type, ignore.case = TRUE) ~ \"Research\", \n    grepl(\"Other\", type, ignore.case = TRUE) ~ \"Other\", \n    grepl(\"Tour\", type, ignore.case = TRUE) ~ \"Tour\", \n    grepl(\"CargoVessel\", type, ignore.case = TRUE) ~ \"Cargo_Vessel\"\n  )) %>%\n  select(-c(`type`, `Activities`, `fish_species_present`)) %>%\n  mutate(company = ifelse(is.na(company), \"Unknown\", company)) %>%\n  rename(vessel_id = id, vessel_name = Name, vessel_company = company) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Handling Transponder Pings\nE_TransponderPing <- subset(mc2_edges_cleaned, event3 == \"TransponderPing\")\nE_TransponderPing <- E_TransponderPing %>%\n  rename(vessel_id = target) %>%\n  left_join(N_vessel %>% select(vessel_id, vessel_type, vessel_company), by = \"vessel_id\") %>%\n  filter(vessel_type == \"Fishing\") \n\n\n\n# Handling Transactions\nE_Transaction <- subset(mc2_edges_cleaned, event2 == \"Transaction\")\nE_Transaction <- E_Transaction %>%\n  rename(cargo_id = source, \n         destination = target,\n         transaction_date = date) %>%\n  mutate(transaction_date = transaction_date - 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(E_Transaction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 10,614\nColumns: 8\n$ time             <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ dwell            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ cargo_id         <chr> \"cargo_2035_2394778c\", \"cargo_2035_2394778c\", \"cargo_…\n$ destination      <chr> \"gadusnspecificatae4ba\", \"City of South Paackland\", \"…\n$ transaction_date <dttm> 2035-11-02 23:59:59, 2035-11-02 23:59:59, 2035-08-15…\n$ date_only        <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ event2           <chr> \"Transaction\", \"Transaction\", \"Transaction\", \"Transac…\n$ event3           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Extract Cargo to Fish relation data from Transaction Event data\nCargo_to_Fish <- E_Tx_c %>%\n  filter(cargo_id %in% N_fish$fish_id) %>%\n  select(cargo_id, fish_id = dest)\n\n# Match Cargo ID in Delivery Documents to Fish ID from Transactions\nN_Delivery_doc <- N_Delivery_doc %>%\n  left_join(Cargo_to_Fish, by = \"cargo_id\") %>%\n  left_join(N_fish %>% select(fish_id, fish_species), by = c(\"fish_id\" = \"fish_id\"))\n\n# Extract Cargo to Port relation data from Transaction Event data\nCargo_to_City <- E_Tx_c %>%\n  filter(dest %in% NL_City$city_id) %>%\n  select(cargo_id, port = dest)\n\n# Match Cargo ID in Delivery Documents to Ports from Transactions\nN_Delivery_doc <- N_Delivery_doc %>%\n  left_join(Cargo_to_City, by = \"cargo_id\")\n\n```\n\n\n```\n# Filter E_Tping_Fishing to include only rows with ping_source values that match port values\nE_Tping_Fishing_filtered <- E_Tping_Fishing %>%\n  filter(ping_source %in% unique(N_Delivery_doc$port))\n\n# Verify the structure of E_Tping_Fishing_filtered to ensure correct filtering\nglimpse(E_Tping_Fishing_filtered)\n\n# Merge the datasets based on the date and port, acknowledging many-to-many relationship\nTping_to_Delivery <- E_Tping_Fishing_filtered %>%\n  left_join(\n    N_Delivery_doc %>% select(deliver_date, port, cargo_id, qty_tons, fish_id, fish_species), \n    by = c(\"date_only\" = \"deliver_date\", \"ping_source\" = \"port\"),\n    relationship = \"many-to-many\"\n  )\n\n# Verify the structure of Tping_to_Delivery to ensure the port column is included\nglimpse(Tping_to_Delivery)\n\n```\n\n\n```\n# Filter E_Tping_Fishing to include only rows with ping_source values that match port values\nE_Tping_Fishing_filtered <- E_Tping_Fishing %>%\n  filter(ping_source %in% unique(N_Delivery_doc$port))\n\n# Verify the structure of E_Tping_Fishing_filtered to ensure correct filtering\nglimpse(E_Tping_Fishing_filtered)\n\n# Merge the datasets based on the date and port, acknowledging many-to-many relationship\nTping_to_Delivery <- E_Tping_Fishing_filtered %>%\n  left_join(\n    N_Delivery_doc %>% select(deliver_date, port, cargo_id, qty_tons, fish_id, fish_species), \n    by = c(\"date_only\" = \"deliver_date\", \"ping_source\" = \"port\"),\n    relationship = \"many-to-many\"\n  )\n\n# Verify the structure of Tping_to_Delivery\nglimpse(Tping_to_Delivery)\n\n```\n\n```\n# Verify the unique values in ping_source and port\nunique_ping_source <- unique(E_Tping_Fishing$ping_source)\nunique_port <- unique(N_Delivery_doc$port)\n\nprint(unique_ping_source)\nprint(unique_port)\n```\n\n```\n\n# Merge the datasets based on the date and port, acknowledging many-to-many relationship\nTping_to_Delivery <- E_Tping_Fishing %>%\n  filter(ping_source %in% NL_City$city_id) %>%\n  left_join(\n    N_Delivery_doc %>% select(deliver_date, port, cargo_id, qty_tons, fish_id, fish_species), \n    by = c(\"date_only\" = \"deliver_date\", \"ping_source\" = \"port\"),\n    relationship = \"many-to-many\"\n  )\n\n# Verify the structure of Tping_to_Delivery\nglimpse(Tping_to_Delivery)\n\n\n```\n\n\n\n\n\n```\n\n```\n# Verify the structure of Tping_to_Delivery\nglimpse(Tping_to_Delivery)\n```\n\n# Remove duplicate rows based on vessel_company and fish_species\ndistinct_species <- Tping_to_Delivery %>%\n  distinct(vessel_company, fish_species) %>%\n  na.omit() %>%\n  select(vessel_company, fish_species)\n\n# Match Cargo ID in Delivery Documents to Ports from Transactions\nN_Delivery_doc <- N_Delivery_doc %>%\n  left_join(Cargo_to_City, by = \"cargo_id\")\n```\n\n```\n# Check the structure of Tping_to_Delivery\nglimpse(Tping_to_Delivery)\n\n```\n```\n# Visualize Vessel Activities by Port and Date\nggplot(vessel_activity, aes(x = date, y = total_qty_tons, color = fish_species)) +\n  geom_line() +\n  facet_wrap(~ port) +\n  labs(title = \"Vessel Activities by Port and Date\", x = \"Date\", y = \"Total Quantity of Fish (Tons)\") +\n  theme_minimal()\n```\n\nSubset the Data Based on Event Categories:\n```\n\n# Handling Transactions\n\n# Subset Transactions Data\nE_Tx <- subset(mc2_edges_cleaned, event2 == \"Transaction\")\n\n# Transactions\nE_Tx_c <- E_Tx %>%\n  rename(\n    cargo_id = source, \n    dest = target,\n    tx_date = date) %>%\n  mutate(tx_date = tx_date - 1) %>% # adjustment for records\n  select(-c(time, dwell))\n```\n\n```\n# Verify the content of the city_id column\nunique(NL_City$city_id)\n```\n\n\n# Handling Harbor Reports\n\n# Subset Harbor Report Data\nE_HarborRpt <- subset(mc2_edges_cleaned, event2 == \"HarborReport\")\n\n# Clean Harbor Report Data\nE_Hbrpt_c <- E_HarborRpt %>%\n  rename(vessel_id = source, port = target, arr_date = date)\n\n\n# Handling Transponder Pings\n\n# Subset Transponder Ping Data\nE_TransponderPing <- subset(mc2_edges_cleaned, event3 == \"TransponderPing\")\n\n# Clean Transponder Ping Data\nE_Tping_c <- E_TransponderPing %>%\n  rename(vessel_id = target, ping_source = source, start_time = time) \n\n\n\n```\n\n\nFinal Cleaned DataFrames\ntx_c: Cleaned and joined transactions data, associating cargos with fish species.\nE_Hbrpt_c: Cleaned harbor report data with relevant columns.\nE_Tping_c: Cleaned transponder ping data with relevant columns.\n\n\n```\nN_fish <- mc2_nodes_cleaned %>%\n  filter(type == \"Entity.Commodity.Fish\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`type`, `Activities`, `fish_species_present`)) %>%\n  rename(fish_species = name, fish_id = id)\n\nN_Delivery_doc <- mc2_nodes_cleaned %>%\n  filter(type == \"Entity.Document.DeliveryReport\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  rename(deliver_date = date, cargo_id = id) %>%\n  select(-c(`type`, `Activities`, `fish_species_present`)) %>%\n  mutate(deliver_date = as.Date(deliver_date))\n\n\nN_vessel <- mc2_nodes_cleaned %>%\n  filter(grepl(\"Entity.Vessel\", type)) %>%\n  mutate(vessel_type = case_when(\n    grepl(\"FishingVessel\", type, ignore.case = TRUE) ~ \"Fishing\",\n    grepl(\"Ferry.Passenger\", type, ignore.case = TRUE) ~ \"Ferry_Passenger\",\n    grepl(\"Ferry.Cargo\", type, ignore.case = TRUE) ~ \"Ferry_Cargo\",\n    grepl(\"Research\", type, ignore.case = TRUE) ~ \"Research\", \n    grepl(\"Other\", type, ignore.case = TRUE) ~ \"Other\", \n    grepl(\"Tour\", type, ignore.case = TRUE) ~ \"Tour\", \n    grepl(\"CargoVessel\", type, ignore.case = TRUE) ~ \"Cargo_Vessel\"\n  )) %>%\n  select(-c(`type`, `Activities`, `fish_species_present`)) %>%\n  mutate(company = ifelse(is.na(company), \"Unknown\", company)) %>%\n  rename(vessel_id = id, vessel_name = name, vessel_company = company) %>%\n  select_if(~ !any(is.na(.)))\n\nNL_City <- subset(mc2_nodes_cleaned, mc2_nodes_cleaned$type == \"Entity.Location.City\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`type`, `fish_species_present`)) %>%\n  rename(city_name = Name, city_id = id)\n\nNL_Point <- subset(mc2_nodes_cleaned, mc2_nodes_cleaned$type == \"Entity.Location.Point\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`kind`, `fish_species_present`)) %>%\n  rename(point_name = Name, point_id = id)\n\nNL_Region <- subset(mc2_nodes_cleaned, mc2_nodes_cleaned$type == \"Entity.Location.Region\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`type`, `Description`)) %>%\n  rename(region_name = Name, region_id = id, region_kind = kind)\n\n```\n\n\n\n```\n# Join data tables to include vessel_type, vessel_company in transponder ping data and filter only Fishing vessel type\nE_Tping_Fishing <- E_Tping_c %>%\n  left_join(N_vessel %>% select(vessel_id, vessel_type, vessel_company), by = \"vessel_id\") %>%\n  filter(vessel_type == \"Fishing\") %>%\n  mutate(date_only = as.Date(start_time))\n\n# Extract Cargo to Fish relation data from Transaction Event data\nCargo_to_Fish <- E_Tx_c %>%\n  filter(cargo_id %in% N_fish$fish_id) %>%\n  select(cargo_id, fish_id = dest)\n\n# Match Cargo ID in Delivery Documents to Fish ID from Transactions\nN_Delivery_doc <- N_Delivery_doc %>%\n  left_join(Cargo_to_Fish, by = \"cargo_id\") %>%\n  left_join(N_fish %>% select(fish_id, fish_species), by = c(\"fish_id\" = \"fish_id\"))\n\n# Extract Cargo to Port relation data from Transaction Event data\nCargo_to_City <- E_Tx_c %>%\n  filter(dest %in% NL_City$city_id) %>%\n  select(cargo_id, port = dest)\n\n# Match Cargo ID in Delivery Documents to Ports from Transactions\nN_Delivery_doc <- N_Delivery_doc %>%\n  left_join(Cargo_to_City, by = \"cargo_id\")\n\n# Merge the datasets based on the date and port\nTping_to_Delivery <- E_Tping_Fishing %>%\n  filter(ping_source %in% NL_City$city_id) %>%\n  left_join(N_Delivery_doc %>% select(\"deliver_date\", \"port\", \"cargo_id\", \"qty_tons\", \"fish_id\", \"fish_species\"), by = c(\"date_only\" = \"deliver_date\", \"ping_source\" = \"port\"))\n\n# Remove duplicate rows based on vessel_company and fish_species\ndistinct_species <- Tping_to_Delivery %>%\n  distinct(vessel_company, fish_species) %>%\n  na.omit() %>%\n  select(vessel_company, fish_species)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}