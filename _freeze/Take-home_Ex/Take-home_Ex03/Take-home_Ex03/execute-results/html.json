{
  "hash": "df3915880a3142c3ed710b8df5e3a3a5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 3\"\nauthor: \"Arya Siahaan\"\ndate: \"May 15, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# Overview\n\n## The Task\n\nGetting Started\n\nLoading the library\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite, igraph, \n               tidygraph, ggraph, SmartEDA,\n               lubridate) \n```\n:::\n\n\nImporting Graph Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_data <- fromJSON(\"data/mc2.json\")\n```\n:::\n\n\nWrangling and tidying edges\n\nExtracting edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- as_tibble(mc2_data$links) %>% \n  distinct() \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <chr> \"2035-09-16T04:06:48.185987\", \"2035-09-20T05:21:33…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\nCorrecting data type\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges$time <- as_datetime(mc2_edges$time)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges$`_last_edited_date` <- as_datetime(mc2_edges$`_last_edited_date`)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges$`_date_added` <- as_datetime(mc2_edges$`_date_added`)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges$date <- as_datetime(mc2_edges$date)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <dttm> 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-09…\n$ `_last_edited_date` <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-10…\n$ `_raw_source`       <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- mc2_edges %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <dttm> 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ last_edited_by      <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ date_added          <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-09…\n$ last_edited_date    <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-10…\n$ raw_source          <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ algorithm           <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc2_edges$type, \"\\\\.\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_elements <- max(lengths(word_list))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"event\", 1:max_elements)\n```\n:::\n\n\n```         \n# Convert the links data to a tibble\nmc2_edges <- as_tibble(mc2_data$links)\n# Convert the nodes data to a tibble (if available)\nmc2_nodes <- as_tibble(mc2_data$nodes)\n```\n\n```         \n# Display the first few rows of the nodes tibble\nprint(head(mc2_nodes))\n\n# Display the first few rows of the links tibble\nprint(head(mc2_edges))\n```\n\n```         \n# Display the structure of the nodes and edges tibbles\nstr(mc2_nodes)\n```\n\n```         \n# Display the structure of the nodes and edges tibbles\nstr(mc2_edges)\n```\n\n```         \n# Summary of nodes and edges data\nsummary(mc2_nodes)\n```\n\n```         \n# Summary of nodes and edges data\nsummary(mc2_edges)\n```\n\n```         \n# Display the first few rows of the nodes and edges tibbles\nhead(mc2_nodes)\nhead(mc2_edges)\n```\n\n```         \n# Subsetting data based on event category\nE_TransponderPing <- subset(mc2_edges,  mc2_edges$type == \"Event.TransportEvent.TransponderPing\")\nE_HarborRpt <- subset(mc2_edges,  mc2_edges$type == \"Event.HarborReport\")\nE_Tx <- subset(mc2_edges, mc2_edges$type == \"Event.Transaction\")\n```\n\n```         \n#assigning to mc2_edges2\nmc2_edges <- as_tibble(mc2_data$links)\n\n# Breaking into subsets based on event category\nE_TransponderPing <- subset(mc2_edges,  mc2_edges$type == \"Event.TransportEvent.TransponderPing\")\nE_HarborRpt <- subset(mc2_edges,  mc2_edges$type == \"Event.HarborReport\")\nE_Tx <- subset(mc2_edges, mc2_edges$type == \"Event.Transaction\")\n\n# Dropping columns that are NULL - check if code drops where data is 1 null or all null\n\nE_Tx_c <- E_Tx %>%\n  select_if(~ !any(is.na(.)))\n\nE_Tping_c <- E_TransponderPing %>%\n  select_if(~ !any(is.na(.)))\n\n# Exclude dropping of null for Habor report due to last 3 columns\n\n#E_Hbrpt_c <- E_HarborRpt %>%\n#  select_if(~ !any(is.na(.)))\n```\n\n```\nword_list <-  strsplit(mc2_edges)\n```\n\n```         \npacman::p_load(jsonlite, tidyverse, quanteda, readtext, tidytext,\n               tidygraph, ggraph) \n```\n\n```         \nmc1_data <- fromJSON(\"data/mc1.json\")\n```\n\n# Display the structure of the loaded data\n\nstr(mc2_data)\n\n# If mc2_data is a list, convert it to data frames\n\nif (is.list(mc2_data)) { if (\"nodes\" %in% names(mc2_data)) { nodes_df \\<- as.data.frame(mc2_data$nodes)\n    print(\"Nodes Data Frame:\")\n    print(head(nodes_df))\n  }\n  if (\"links\" %in% names(mc2_data)) {\n    links_df <- as.data.frame(mc2_data$links) print(\"Links Data Frame:\") print(head(links_df)) } } else { \\# If mc2_data is directly a data frame print(\"Data Frame:\") print(head(mc2_data)) }\n\n# Alternatively, you can use View() in RStudio to view the entire data frame\n\n# View(nodes_df)\n\n# View(links_df)\n\n```         \n```\n\nView(nodes_df) \\# View(links_df)\n\n```         \n```\n\n# View(nodes_df)\n\nView(links_df)\n\n```         \n```\n\n# Read the JSON file as plain text\n\njson_text \\<- readLines(\"data/mc3.json\", warn = FALSE)\n\n# Replace NaN with null\n\njson_text \\<- gsub(\"NaN\", \"null\", json_text)\n\n# Write the modified JSON text back to a file (optional, for verification)\n\nwriteLines(json_text, \"data/mc3_fixed.json\")\n\n# Parse the modified JSON text\n\nmc3_data \\<- fromJSON(json_text)\n\n# Display the structure of the loaded data\n\nstr(mc3_data)\n\n# If mc3_data is a list, convert it to a data frame\n\n# Assuming mc3_data has a structure similar to mc2_data with nodes and links\n\nif (is.list(mc3_data)) { if (\"nodes\" %in% names(mc3_data)) { nodes_df \\<- as.data.frame(mc3_data$nodes)\n    print(\"Nodes Data Frame:\")\n    print(head(nodes_df))\n  }\n  if (\"links\" %in% names(mc3_data)) {\n    links_df <- as.data.frame(mc3_data$links) print(\"Links Data Frame:\") print(head(links_df)) } } else { \\# If mc3_data is directly a data frame print(\"Data Frame:\") print(head(mc3_data)) }\n\n```         \n```\n\nmc3_data \\<- fromJSON(\"data/mc3.json\")\n\n```         \n```\n\nstr(mc1_data)\n\n```         \n```\n\n# View the first few rows of the nodes data frame\n\nhead(mc2_data\\$nodes)\n\n```         \n```\n\n# Summarize the key variables in the nodes data frame\n\nsummary(mc2_data\\$nodes)\n\n```         \n```\n\n# View the first few rows of the links data frame\n\nhead(mc2_data\\$links)\n\n```         \n```\n\n# Summarize the key variables in the links data frame\n\nsummary(mc2_data\\$links)\n\n```         \n```\n\n# Check for missing values in nodes and edges\n\nsummary(mc2_data$nodes)\nsummary(mc2_data$links)\n\n```         \n```\n\n# Load necessary libraries\n\nlibrary(tidyverse) library(tidygraph) library(ggraph)\n\n# Check for missing values in nodes and edges\n\nsum(is.na(mc2_data$nodes$id)) \\# Check for missing node ids sum(is.na(mc2_data$links$source)) \\# Check for missing edge sources sum(is.na(mc2_data$links$target)) \\# Check for missing edge targets\n\n# Remove rows with missing id, source, or target\n\nmc2_data$nodes <- mc2_data$nodes %\\>% filter(!is.na(id)) mc2_data$links <- mc2_data$links %\\>% filter(!is.na(source) & !is.na(target))\n\n# Ensure ids are unique in nodes\n\nmc2_data$nodes <- mc2_data$nodes %\\>% distinct(id, .keep_all = TRUE)\n\n# Convert id, source, and target to character\n\nmc2_data$nodes$id \\<- as.character(mc2_data$nodes$id) mc2_data$links$source \\<- as.character(mc2_data$links$source) mc2_data$links$target \\<- as.character(mc2_data$links$target)\n\n# Check again if all sources and targets are in node ids\n\nall(mc2_data$links$source %in% mc2_data$nodes$id) all(mc2_data$links$target %in% mc2_data$nodes$id)\n\n# Create the tidygraph object\n\ngraph \\<- tbl_graph(nodes = mc2_data$nodes, edges = mc2_data$links, directed = TRUE)\n\n# Plot the graph\n\nggraph(graph, layout = \"fr\") + geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name))) + geom_node_point() + geom_node_text(aes(label = name), vjust = 1, hjust = 1)\n\n```         \n```\n\n# Check for NaN values in the dwell column\n\nsum(is.na(mc2_data$links$dwell)) \\# Count of NaN values in dwell\n\n# Optionally, replace NaN values in dwell with 0 or any appropriate value\n\nmc2_data$links$dwell\\[is.na(mc2_data$links$dwell)\\] \\<- 0\n\n```         \n```\n\n# Check for missing values in nodes and edges\n\nsum(is.na(mc2_data$nodes$id)) \\# Count of missing node ids sum(is.na(mc2_data$links$source)) \\# Count of missing edge sources sum(is.na(mc2_data$links$target)) \\# Count of missing edge targets\n\n# Check for missing values in dwell column\n\nsum(is.na(mc2_data$links$dwell)) \\# Count of missing dwell values\n\n```         \n```\n\n# Check for NaN values in the nodes and edges data frames\n\nsum(is.nan(mc2_data$nodes$tonnage)) sum(is.nan(mc2_data$nodes$length_overall)) sum(is.nan(mc2_data$links$dwell))\n\n# Replace NaN values with appropriate defaults (e.g., 0 or another sentinel value)\n\nmc2_data$nodes$tonnage\\[is.nan(mc2_data$nodes$tonnage)\\] \\<- 0 mc2_data$nodes$length_overall\\[is.nan(mc2_data$nodes$length_overall)\\] \\<- 0 mc2_data$links$dwell\\[is.nan(mc2_data$links$dwell)\\] \\<- 0\n\n# Check for infinite values and replace them\n\nsum(is.infinite(mc2_data$nodes$tonnage)) sum(is.infinite(mc2_data$nodes$length_overall)) sum(is.infinite(mc2_data$links$dwell))\n\nmc2_data$nodes$tonnage\\[is.infinite(mc2_data$nodes$tonnage)\\] \\<- 0 mc2_data$nodes$length_overall\\[is.infinite(mc2_data$nodes$length_overall)\\] \\<- 0 mc2_data$links$dwell\\[is.infinite(mc2_data$links$dwell)\\] \\<- 0 \\`\\`\\`\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}