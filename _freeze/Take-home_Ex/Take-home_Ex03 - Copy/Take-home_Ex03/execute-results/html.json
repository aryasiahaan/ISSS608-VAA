{
  "hash": "44b05a9f8ebdf3c3fd9f8ae1e7878875",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 3\"\nauthor: \"Arya Siahaan\"\ndate: \"May 15, 2024\"\ndate-modified: \"June 9, 2024\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# VAST Challenge 2024\n\n### Mini-Challenge 2:\n\n#### Background\n\nIn Oceanus, the island's economy thrives on the movement of seafaring vessels, particularly those operated by commercial fishing companies, indicating a healthy economic state. However, a major event has disrupted these routines: SouthSeafood Express Corp was caught engaging in illegal fishing. This scandal caused significant turmoil within the close-knit fishing community. FishEye International, a non-profit dedicated to combating illegal fishing, seeks assistance to understand the impact of this event. They have been gathering and processing data on ship movements and shipping records to create CatchNet: the Oceanus Knowledge Graph. While analysts at FishEye ensure data accuracy, they require assistance to develop analytical capabilities for this data.\n\n#### Tasks and Questions:\n\nFishEye analysts require assistance in performing geographic and temporal analysis of the CatchNet data to prevent future instances of illegal fishing. The task involves developing innovative visual analytics tools and workflows designed to identify and understand signatures of various behaviors. One key objective is to visualize the signature of SouthSeafood Express Corp's illegal activities. Additionally, there is a need to create a workflow capable of detecting other instances of illegal behavior within the data. These efforts are crucial for enhancing FishEye's ability to monitor and combat illegal fishing effectively. This exercise will attempt to address Question 1 and Question 3 of this challenge.\n\n##### Question 1\n\nFishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports. But as they were loading data into CatchNet, they discovered they had purchased the wrong port records. They wanted to get the ship off-load records, but they instead got the port-exit records (essentially trucks/trains leaving the port area). Port exit records do not include which vessel that delivered the products. Given this limitation, develop a visualization system to associate vessels with their probable cargos. Which vessels deliver which products and when? What are the seasonal trends and anomalies in the port exit records?\n\n##### Question 3\n\nTo support further Fisheye investigations, develop visual analytics workflows that allow you to discover other vessels engaging in behaviors similar to SouthSeafood Express Corp’s illegal activities? Provide visual evidence of the similarities.\n\n## Getting Started\n\n### Loading the required R library packages\n\nThe following code chunk utilises the [`p_load()`](https://www.rdocumentation.org/packages/pacman/versions/0.5.1/topics/p_load) function from the [pacman](https://github.com/trinker/pacman) package to ensure that the necessary packages are available in the R environment. If the packages are already installed on the computer, [`p_load()`](https://www.rdocumentation.org/packages/pacman/versions/0.5.1/topics/p_load) will load them. If they are not installed, it will first install them and then load them into the R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite, igraph, \n               tidygraph, ggraph, SmartEDA, skimr,\n               lubridate, ggplot2, DataExplorer) \n```\n:::\n\n\n### Loading The Data\n\nThe dataset is in the form of a json file and it is available for download at the [Vast Challenge 2024](https://vast-challenge.github.io/2024/index.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_data <- fromJSON(\"data/mc2.json\")\n```\n:::\n\n\nThis line loads the JSON dataset into R using the jsonlite package. The dataset is stored in the mc2_data variable.\n\n\n\n\n## Data Preparation\n\n### Wrangling and tidying edges\n\n#### Extracting edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Wrangling and tidying edges\nmc2_edges <- as_tibble(mc2_data$links) %>% distinct()\n# Converts the date columns to POSIXct datetime format using the as_datetime function from the lubridate package, then display it with  glimpse() to confirm if the process have been performed correctly.\nmc2_edges <- mc2_edges %>%\n  mutate(date = as_datetime(date), time = as_datetime(time)) %>%\n  mutate(date_only = as.Date(time))\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 18\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <dttm> 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ date_only           <date> 2035-09-16, 2035-09-20, 2035-09-28, 2035-10-04, 2…\n```\n\n\n:::\n:::\n\n\nThe code above converts the 'links' part of the dataset into a tibble and removes duplicates. It then converts date and time information into proper datetime formats using lubridate, and extracts just the date to a new column.\n\n#### Splitting and Tidying the 'type' Column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc2_edges$type, \"\\\\.\")\nmax_elements <- max(lengths(word_list)) #to find the maximum number of elements in any split\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x)))) #to pad shorter splits with NA values to make them all the same length.\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"event\", 1:max_elements)\n\n# Since the output above is a matrix, the code chunk below is used to convert word_df into a tibble data.frame.\nword_df <- as_tibble(word_df) %>%\n  select(event2, event3)\n\n\n# The code chunk below appends the extracted columns back to mc2_edges tibble data.frame\nmc2_edges <- mc2_edges %>%\n  cbind(word_df)\n```\n:::\n\n\nThis code splits the 'type' column into multiple components, pads shorter entries with NAs, and integrates them back into the mc2_edges dataframe as new columns.\n\n\n\n\nAfter cleaning and preparing mc2_edges dataframe, I want to understand how the newly formed structure looks like, lets have a quick look with skim()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskim(mc2_edges)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |          |\n|:------------------------|:---------|\n|Name                     |mc2_edges |\n|Number of rows           |271643    |\n|Number of columns        |20        |\n|_______________________  |          |\n|Column type frequency:   |          |\n|character                |15        |\n|Date                     |1         |\n|numeric                  |2         |\n|POSIXct                  |2         |\n|________________________ |          |\n|Group variables          |None      |\n\n\n**Variable type: character**\n\n|skim_variable     | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-----------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|type              |         0|          1.00|  17|  36|     0|        3|          0|\n|_last_edited_by   |         0|          1.00|   9|  16|     0|        8|          0|\n|_date_added       |         0|          1.00|  10|  26|     0|    17308|          0|\n|_last_edited_date |         0|          1.00|  10|  26|     0|    32521|          0|\n|_raw_source       |         0|          1.00|  21|  77|     0|        8|          0|\n|_algorithm        |         0|          1.00|  15|  27|     0|        3|          0|\n|source            |         0|          1.00|   5|  29|     0|     5627|          0|\n|target            |         0|          1.00|   8|  29|     0|      312|          0|\n|data_author       |    269156|          0.01|  20|  29|     0|        6|          0|\n|aphorism          |    269669|          0.01|  18| 202|     0|      147|          0|\n|holiday_greeting  |    270639|          0.00|  25|  73|     0|       43|          0|\n|wisdom            |    269719|          0.01|  18| 202|     0|      145|          0|\n|saying of the sea |    269750|          0.01|  18| 202|     0|      149|          0|\n|event2            |         0|          1.00|  11|  14|     0|        3|          0|\n|event3            |     13101|          0.95|  15|  15|     0|        1|          0|\n\n\n**Variable type: Date**\n\n|skim_variable | n_missing| complete_rate|min        |max        |median     | n_unique|\n|:-------------|---------:|-------------:|:----------|:----------|:----------|--------:|\n|date_only     |     13101|          0.95|2035-02-01 |2035-11-30 |2035-06-28 |      303|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|     mean|       sd| p0|     p25|     p50|      p75|     p100|hist  |\n|:-------------|---------:|-------------:|--------:|--------:|--:|-------:|-------:|--------:|--------:|:-----|\n|dwell         |     13101|          0.95| 19775.47| 72424.68|  0| 4694.92| 6287.49| 12101.13| 28735323|▇▁▁▁▁ |\n|key           |         0|          1.00|   208.17|   242.47|  0|   39.00|  118.00|   290.00|     1516|▇▂▁▁▁ |\n\n\n**Variable type: POSIXct**\n\n|skim_variable | n_missing| complete_rate|min        |max        |median              | n_unique|\n|:-------------|---------:|-------------:|:----------|:----------|:-------------------|--------:|\n|time          |     13101|          0.95|2035-02-01 |2035-11-30 |2035-06-28 19:34:55 |   244123|\n|date          |    258542|          0.05|2035-02-01 |2035-11-30 |2035-09-19 00:00:00 |      303|\n\n\n:::\n:::\n\n\n### Wrangling and tidying nodes\n\n#### Extracting Nodes and Removing Duplicates\n\n```\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  distinct()\nglimpse(mc2_nodes)\n```\n\nThis converts the nodes data to a tibble and removes duplicate rows, then displays the structure of the data using glimpse().\n\nI plan to make use of the date column, but since it is in character format, I will convert it first into date format using lubridate package and glimpse it again to verify the changes.\n\n```\nmc2_nodes <- mc2_nodes %>%\n  mutate(date = as_date(date))\nglimpse(mc2_nodes)\n```\n\n\n\nFrom the table above, two more additional data issues can be observed. They are:\n\nThe values in Activities and fish_species_present fields are in list data type, which will affect the ability to process and to analyse the data. As shown in the screenshot below, some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).\n\nTidying text field In the code chunk below, mutate() of dplyr and gsub() of Base R are used to perform the data tidying task.\n\nThis cleans up the Activities and fish_species_present columns by removing unnecessary characters.\n\n```\nmc2_nodes <- mc2_nodes %>%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %>% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %>%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities)) \n\nmc2_nodes <- mc2_nodes %>%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %>% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %>%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n```\n\n```\n# Function to get distinct values for each column and prepare data for plotting\nprepare_distinct_values_data <- function(data_frame) {\n  distinct_values <- lapply(data_frame, unique)\n  distinct_counts <- sapply(distinct_values, length)\n  distinct_values_df <- data.frame(\n    Column = names(distinct_values),\n    Number_of_Distinct_Values = distinct_counts,\n    Sample_Distinct_Values = sapply(distinct_values, function(x) paste(head(x, 10), collapse = \", \"))\n  )\n  \n  # Create a long format data frame for plotting\n  plot_data <- data.frame(\n    Column = rep(names(distinct_values), times = sapply(distinct_values, length)),\n    Value = unlist(distinct_values),\n    stringsAsFactors = FALSE\n  )\n  \n  return(list(distinct_values_df = distinct_values_df, plot_data = plot_data))\n}\n\n# Get distinct values for each column in mc2_edges\ndata <- prepare_distinct_values_data(mc2_edges)\ndistinct_values_df <- data$distinct_values_df\nplot_data <- data$plot_data\n\n# Display the summary table\nprint(distinct_values_df)\n\n# Plot distinct values for each column\nggplot(plot_data, aes(x = Value)) +\n  geom_bar() +\n  facet_wrap(~ Column, scales = \"free\", ncol = 2) +\n  labs(title = \"Distinct Values in Each Column\", x = \"Value\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n```\n\n\n```\nmc2_edges_list <- list(mc2_edges)\nplot_str(mc2_edges_list)\n```\n\n\n\n```\nmc2_nodes_list <- list(mc2_nodes)\nplot_str(mc2_nodes_list)\n```\n\n\n```\ncolnames(mc2_edges)\n```\n\n```\ncolnames(mc2_nodes)\n```\n\n```\nExpData(data=mc2_edges, type=1) # For summary statistics\n```\n```\nExpData(data=mc2_edges, type=2) # For visualizations\n```\n\n\n\n\n\n### Further Data Subsetting and Renaming\n\n#### Creating Subset Data\n\n```\ntransponderping <- subset(mc2_edges_cleaned, event3 == \"TransponderPing\")\ntransaction <- subset(mc2_edges_cleaned, event2 == \"Transaction\")\nharbor_report <- subset(mc2_edges_cleaned,  event2 == \"HarborReport\")\n```\n\nCreates subsets of data for different types of events: transponder pings, transactions, and harbor reports, facilitating focused analysis.\n\n\n\n#### Handling Fish Data\n\n```\nfish <- subset(mc2_nodes_cleaned,  mc2_nodes_cleaned$type == \"Entity.Commodity.Fish\") %>%\n  select_if(~ !any(is.na(.))) %>% \n  select(-c(`type`, `Activities`, `fish_species_present`)) %>%\n  rename(fish_species = name, \n         fish_id = id)\n```\n\n#### Subsetting City Data\n\n```\ncity <- subset(mc2_nodes_cleaned,  mc2_nodes_cleaned$type == \"Entity.Location.City\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`type`, `fish_species_present`)) %>%\n  rename(city_name = Name, \n         city_id = id)\n```\n\nThis code processes the city-related data by filtering cities, excluding any incomplete records, and renaming fields to reflect their content more accurately (city names and IDs).\n\n#### Subsetting Point Location\n\n```\npoint <- subset(mc2_nodes_cleaned,  mc2_nodes_cleaned$type == \"Entity.Location.Point\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`kind`, `fish_species_present`)) %>%\n  rename(point_name = Name, \n         point_id = id)\n```\n\nThis snippet focuses on geographical points, cleaning up the data by removing unnecessary columns and renaming the remaining columns to make them more intuitive (point names and IDs).\n\n#### Subsetting Region Data\n\n```\nregion <- subset(mc2_nodes_cleaned,  mc2_nodes_cleaned$type == \"Entity.Location.Region\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  select(-c(`type`, `Description`)) %>%\n  rename(region_name = Name, \n         region_id = id, \n         region_kind = kind)\n```\n\nExtracts and cleans data related to geographic regions, ensuring all entries are complete and renaming columns to better describe their contents, including region type.\n\n#### Subsetting Delivery Report Data\n\n```\ndelivery_report <- subset(mc2_nodes_cleaned,  mc2_nodes_cleaned$type == \"Entity.Document.DeliveryReport\") %>%\n  select_if(~ !any(is.na(.))) %>%\n  rename(delivery_date = date,\n         cargo_id = id) %>%\n  select(-c(`type`, `Activities`, `fish_species_present`)) \n```\n\n### Vessel-Specific Data Preparation\n\n#### Fishing Vessel Data\n\n```\n# Load and clean the fishing vessel data\nfishing_vessel <- mc2_nodes_cleaned %>%\n  filter(grepl(\"Entity.Vessel.FishingVessel\", type)) %>%\n  mutate(vessel_type = \"Fishing\") %>%\n  mutate(company = ifelse(is.na(company), \"Unknown\", company)) %>%\n  select(-c(type, Activities, fish_species_present, Description, kind, name, qty_tons, date)) %>%\n  rename(fishing_vessel_id = id, fishing_vessel_name = Name)\n```\n\nIsolates data concerning fishing vessels, classifying them appropriately and ensuring all records are complete. It renames columns for greater clarity and focuses on identifying and naming the vessels.\n\n#### Cargo Vessel Data\n\n```\n# Load and clean the cargo vessel data\ncargo_vessel <- mc2_nodes_cleaned %>%\n  filter(grepl(\"Entity.Vessel.CargoVessel\", type)) %>%\n  mutate(vessel_type = \"Cargo\") %>%\n  mutate(company = ifelse(is.na(company), \"Unknown\", company)) %>%\n  select(-c(type, Activities, fish_species_present, Description, kind, name, qty_tons, date)) %>%\n  rename(cargo_vessel_id = id, cargo_vessel_name = Name)\n```\n\nSimilar to the fishing vessels, this snippet deals with cargo vessels, tidying the data and ensuring that the vessel type and company fields are correctly populated.\n\n### Transaction and Harbor Report Data Processing\n\n#### Transaction Data\n\n```\n# Load and clean the transaction data\ntransactions_cleaned <- mc2_edges_cleaned %>%\n  filter(event2 == \"Transaction\") %>%\n  select(date, source, target) %>%\n  rename(cargo_id = source)\n```\n\nFocuses on transaction data from the edges, renaming columns to better represent the transaction's nature—linking transactions via cargo IDs.\n\n#### Harbor Report Data\n\n```\n# Load and clean the harbor report data\nharbor_report_cleaned <- mc2_edges_cleaned %>%\n  filter(event2 == \"HarborReport\") %>%\n  select(date, source, target) %>%\n  rename(vessel_id = source, port = target)\n\n```\n\nCleans and prepares harbor report data, linking reports to specific vessels and ports, and renaming columns for better readability and further analysis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Dropping Unnecessary Columns\n\n```\nmc2_edges_cleaned <- mc2_edges %>%\n  select(-c(`_last_edited_by`, `_date_added`, `_last_edited_date`, `_raw_source`, `_algorithm`, `key`, `type`, `data_author`, `aphorism`, `holiday_greeting`, `wisdom`, `saying of the sea`))\n\nglimpse(mc2_edges_cleaned)\n```\n\nRemoves unnecessary columns from the dataset that are not needed for analysis, cleaning up the data. Glimpse() is then used to display the structure of the data.\n\n#### Dropping unnecessary Columns\n\n```\nmc2_nodes_cleaned <- mc2_nodes_cleaned %>%\n  select(-c(`_last_edited_by`, `_date_added`, `_last_edited_date`, `_raw_source`, `_algorithm`, `style`))\nglimpse(mc2_nodes_cleaned)\n```\n\nRemoves additional unneeded columns from the nodes data frame.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}