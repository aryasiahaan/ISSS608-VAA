---
title: "Take-home Exercise 3"
author: "Arya Siahaan"
date: "May 15, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# VAST Challenge 2024

### Mini-Challenge 2:

#### Background

In Oceanus, the island's economy thrives on the movement of seafaring vessels, particularly those operated by commercial fishing companies, indicating a healthy economic state. However, a major event has disrupted these routines: SouthSeafood Express Corp was caught engaging in illegal fishing. This scandal caused significant turmoil within the close-knit fishing community. FishEye International, a non-profit dedicated to combating illegal fishing, seeks assistance to understand the impact of this event. They have been gathering and processing data on ship movements and shipping records to create CatchNet: the Oceanus Knowledge Graph. While analysts at FishEye ensure data accuracy, they require assistance to develop analytical capabilities for this data.

#### Tasks and Questions:

FishEye analysts require assistance in performing geographic and temporal analysis of the CatchNet data to prevent future instances of illegal fishing. The task involves developing innovative visual analytics tools and workflows designed to identify and understand signatures of various behaviors. One key objective is to visualize the signature of SouthSeafood Express Corp's illegal activities. Additionally, there is a need to create a workflow capable of detecting other instances of illegal behavior within the data. These efforts are crucial for enhancing FishEye's ability to monitor and combat illegal fishing effectively. This exercise will attempt to address Question 1 and Question 3 of this challenge.

##### Question 1

FishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports. But as they were loading data into CatchNet, they discovered they had purchased the wrong port records. They wanted to get the ship off-load records, but they instead got the port-exit records (essentially trucks/trains leaving the port area). Port exit records do not include which vessel that delivered the products. Given this limitation, develop a visualization system to associate vessels with their probable cargos. Which vessels deliver which products and when? What are the seasonal trends and anomalies in the port exit records?

##### Question 3

To support further Fisheye investigations, develop visual analytics workflows that allow you to discover other vessels engaging in behaviors similar to SouthSeafood Express Corp’s illegal activities? Provide visual evidence of the similarities.

## Getting Started

### Loading the required R library packages

The following code chunk utilises the [`p_load()`](https://www.rdocumentation.org/packages/pacman/versions/0.5.1/topics/p_load) function from the [pacman](https://github.com/trinker/pacman) package to ensure that the necessary packages are available in the R environment. If the packages are already installed on the computer, [`p_load()`](https://www.rdocumentation.org/packages/pacman/versions/0.5.1/topics/p_load) will load them. If they are not installed, it will first install them and then load them into the R environment.

```{r}
pacman::p_load(tidyverse, jsonlite, igraph, 
               tidygraph, ggraph, SmartEDA,
               lubridate, ggplot2) 
```

### Loading The Data

The dataset is in the form of a json file and it is available for download at the [Vast Challenge 2024](https://vast-challenge.github.io/2024/index.html).

```{r}
mc2_data <- fromJSON("data/mc2.json")
```

## Data Preparation

### Wrangling and tidying edges

Extracting edges

Converts the links part of mc2_data to a tibble and removes duplicate rows, then displays the structure of the data. 

```{r}
mc2_edges <- as_tibble(mc2_data$links) %>% 
  distinct() 
glimpse(mc2_edges)
```

Correcting data type

Converts the date columns to POSIXct datetime format using the as_datetime function from the lubridate package, then display it with  glimpse() to confirm if the process have been performed correctly.

```{r}
mc2_edges$date <- as_datetime(mc2_edges$date)
mc2_edges$time <- as_datetime(mc2_edges$time)
glimpse(mc2_edges)
```


Splitting and Tidying the 'type' Column

This splits the type column into multiple columns (event2 and event3) and appends these columns back to the mc2_edges dataframe.
  
```{r}
word_list <- strsplit(mc2_edges$type, "\\.")
max_elements <- max(lengths(word_list)) #to find the maximum number of elements in any split
word_list_padded <- lapply(word_list, 
function(x) c(x, rep(NA, max_elements - length(x)))) #to pad shorter splits with NA values to make them all the same length.
word_df <- do.call(rbind, word_list_padded)
colnames(word_df) <- paste0("event", 1:max_elements)

# Since the output above is a matrix, the code chunk below is used to convert word_df into a tibble data.frame.
word_df <- as_tibble(word_df) %>%
  select(event2, event3)


# The code chunk below appends the extracted columns back to mc2_edges tibble data.frame
mc2_edges <- mc2_edges %>%
  cbind(word_df)
```



Handling unnessary Columns

```{r}
# Dropping Unnecessary Columns
mc2_edges_cleaned <- mc2_edges %>%
  select(-c(`_last_edited_by`, `_date_added`, `_last_edited_date`, `_raw_source`, `_algorithm`, `key`, `type`, `data_author`, `aphorism`, `holiday_greeting`, `wisdom`, `saying of the sea`))

glimpse(mc2_edges_cleaned)
```


Wrangling and tidying nodes

Extracting Nodes and Removing Duplicates

This converts the nodes data to a tibble and removes duplicate rows, then displays the structure of the data.

```{r}
mc2_nodes <- as_tibble(mc2_data$nodes) %>%
  distinct()
glimpse(mc2_nodes)
```


From the table above, beside the date data type and inappropriate field name issues we discussed earlier, two additional data issues can be observed. They are:

The values in Activities and fish_species_present fields are in list data type, which will affect the ability to process and to analyse the data. As shown in the screenshot below, some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).

Tidying text field In the code chunk below, mutate() of dplyr and gsub() of Base R are used to perform the data tidying task.

This cleans up the Activities and fish_species_present columns by removing unnecessary characters.

```{r}
mc2_nodes <- mc2_nodes %>%
  mutate(Activities = gsub("c[(]", "", Activities)) %>% 
  mutate(Activities = gsub("\"", "", Activities)) %>%
  mutate(Activities = gsub("[)]", "", Activities)) 

mc2_nodes <- mc2_nodes %>%
  mutate(fish_species_present = gsub("c[(]", "", fish_species_present)) %>% 
  mutate(fish_species_present = gsub("\"", "", fish_species_present)) %>%
  mutate(fish_species_present = gsub("[)]", "", fish_species_present)) 
```


Dropping unnecessary Columns

```{r}
mc2_nodes_cleaned <- mc2_nodes %>%
  select(-c(`_last_edited_by`, `_date_added`, `_last_edited_date`, `_raw_source`, `_algorithm`, `style`))
glimpse(mc2_nodes_cleaned)
```

```{r}
glimpse(mc2_edges_cleaned)
```

```{r}
glimpse(mc2_nodes_cleaned)
```

Saving the Cleaned Data

```{r}
write_rds(mc2_edges_cleaned, "data/rds/mc2_edges_cleaned.rds")
write_rds(mc2_nodes_cleaned, "data/rds/mc2_nodes_cleaned.rds")
```


```{r}
# Display distinct entries in event2
mc2_edges_cleaned %>% 
  distinct(event2) %>%
  pull(event2)
```


```{r}
# Display distinct entries in event3
mc2_edges_cleaned %>% 
  distinct(event3) %>%
  pull(event3)
```

Subset the Data Based on Event Categories:


```{r}

# Handling Transactions

# Subset Transactions Data
E_Tx <- subset(mc2_edges_cleaned, event2 == "Transaction")

# Clean Transactions Data
E_Tx_c <- E_Tx %>%
  rename(cargo_id = target, dest = source, tx_date = date) %>%
  mutate(tx_date = tx_date - 1)


# Handling Harbor Reports

# Subset Harbor Report Data
E_HarborRpt <- subset(mc2_edges_cleaned, event2 == "HarborReport")

# Clean Harbor Report Data
E_Hbrpt_c <- E_HarborRpt %>%
  rename(vessel_id = source, port = target, arr_date = date)


# Handling Transponder Pings

# Subset Transponder Ping Data
E_TransponderPing <- subset(mc2_edges_cleaned, event3 == "TransponderPing")

# Clean Transponder Ping Data
E_Tping_c <- E_TransponderPing %>%
  rename(vessel_id = target, ping_source = source, start_time = time) 

```


Final Cleaned DataFrames
tx_c: Cleaned and joined transactions data, associating cargos with fish species.
E_Hbrpt_c: Cleaned harbor report data with relevant columns.
E_Tping_c: Cleaned transponder ping data with relevant columns.


```{r}
N_fish <- mc2_nodes_cleaned %>%
  filter(type == "Entity.Commodity.Fish") %>%
  rename(fish_species = name, fish_id = id)

N_Delivery_doc <- mc2_nodes_cleaned %>%
  filter(type == "Entity.Document.DeliveryReport") %>%
  rename(deliver_date = date, cargo_id = id)

N_vessel <- mc2_nodes_cleaned %>%
  filter(grepl("Entity.Vessel", type)) %>%
  mutate(vessel_type = case_when(
    grepl("FishingVessel", type, ignore.case = TRUE) ~ "Fishing",
    grepl("Ferry.Passenger", type, ignore.case = TRUE) ~ "Ferry_Passenger",
    grepl("Ferry.Cargo", type, ignore.case = TRUE) ~ "Ferry_Cargo",
    grepl("Research", type, ignore.case = TRUE) ~ "Research", 
    grepl("Other", type, ignore.case = TRUE) ~ "Other", 
    grepl("Tour", type, ignore.case = TRUE) ~ "Tour", 
    grepl("CargoVessel", type, ignore.case = TRUE) ~ "Cargo_Vessel"
  )) %>% 
  rename(vessel_id = id, vessel_name = name, vessel_company = company)

```

```{r}
# Handling Transactions
E_Tx <- subset(mc2_edges_cleaned, event2 == "Transaction")
E_Tx_c <- E_Tx %>%
  rename(cargo_id = target, dest = source, tx_date = date) %>%
  mutate(tx_date = tx_date - 1)

# Handling Harbor Reports
E_HarborRpt <- subset(mc2_edges_cleaned, event2 == "HarborReport")
E_Hbrpt_c <- E_HarborRpt %>%
  rename(vessel_id = source, port = target, arr_date = date)

# Handling Transponder Pings
E_TransponderPing <- subset(mc2_edges_cleaned, event3 == "TransponderPing")
E_Tping_c <- E_TransponderPing %>%
  rename(vessel_id = target, ping_source = source, start_time = time)
```

```{r}
# Divide different nodes into different dataset
N_fish <- subset(mc2_nodes,  mc2_nodes$type == "Entity.Commodity.Fish") %>%
  select_if(~ !any(is.na(.))) %>%
  select(-c(`type`,`Activities`, `fish_species_present`)) %>%
  rename(fish_species = name, 
         fish_id = id)

NL_City <- subset(mc2_nodes,  mc2_nodes$type == "Entity.Location.City") %>%
  select_if(~ !any(is.na(.))) %>%
  select(-c(`type`, `fish_species_present`)) %>%
  rename(city_name = Name, 
         city_id = id)


NL_Point <- subset(mc2_nodes,  mc2_nodes$type == "Entity.Location.Point") %>%
  select_if(~ !any(is.na(.))) %>%
  select(-c(`kind`, `fish_species_present`)) %>%
  rename(point_name = Name, 
         point_id = id)

NL_Region <- subset(mc2_nodes,  mc2_nodes$type == "Entity.Location.Region") %>%
  select_if(~ !any(is.na(.))) %>%
  select(-c(`type`, `Description`)) %>%
  rename(region_name = Name, 
         region_id = id, 
         region_kind = kind)

N_Delivery_doc <- subset(mc2_nodes,  mc2_nodes$type == "Entity.Document.DeliveryReport") %>%
  select_if(~ !any(is.na(.))) %>%
  rename(deliver_date = date,
         cargo_id = id) %>%
  select(-c(`type`, `Activities`, `fish_species_present`)) 

N_vessel <- mc2_nodes %>%
  filter(grepl("Entity.Vessel", type)) %>%
  mutate(vessel_type = case_when(
    grepl("FishingVessel", type, ignore.case = TRUE) ~ "Fishing",
    grepl("Ferry.Passenger", type, ignore.case = TRUE) ~ "Ferry_Passenger",
    grepl("Ferry.Cargo", type, ignore.case = TRUE) ~ "Ferry_Cargo",
    grepl("Research", type, ignore.case = TRUE) ~ "Research", 
    grepl("Other", type, ignore.case = TRUE) ~ "Other", 
    grepl("Tour", type, ignore.case = TRUE) ~ "Tour", 
    grepl("CargoVessel", type, ignore.case = TRUE) ~ "Cargo_Vessel"
    )) %>%
  select(-c(`type`, `Activities`, `fish_species_present`)) %>%
  mutate(company = ifelse(is.na(company), "Unknown", company)) %>% # Handle NA values by replacing NA with unknown
  rename(vessel_id = id, 
         vessel_name = Name,
         vessel_company = company) %>%
  select_if(~ !any(is.na(.)))


```
