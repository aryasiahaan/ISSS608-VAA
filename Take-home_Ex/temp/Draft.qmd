---
title: "Take-home Exercise 3"
author: "Arya Siahaan"
date: "May 15, 2024"
date-modified: "June 9, 2024"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

##### Question 1

FishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports. But as they were loading data into CatchNet, they discovered they had purchased the wrong port records. They wanted to get the ship off-load records, but they instead got the port-exit records (essentially trucks/trains leaving the port area). Port exit records do not include which vessel that delivered the products. Given this limitation, develop a visualization system to associate vessels with their probable cargos. Which vessels deliver which products and when? What are the seasonal trends and anomalies in the port exit records?

##### Question 3

To support further Fisheye investigations, develop visual analytics workflows that allow you to discover other vessels engaging in behaviors similar to SouthSeafood Express Corp’s illegal activities? Provide visual evidence of the similarities.

```{r}
pacman::p_load(tidyverse, jsonlite, igraph, 
               tidygraph, ggraph, skimr,
               lubridate, ggplot2, DataExplorer) 
```

```{r}
mc2_data <- fromJSON("data/mc2.json")
```

## Data Preparation

### Wrangling and tidying edges

#### Extracting edges

```{r}
# Wrangling and tidying edges
mc2_edges <- as_tibble(mc2_data$links) %>% distinct()
# Converts the date columns to POSIXct datetime format using the as_datetime function from the lubridate package, then display it with  glimpse() to confirm if the process have been performed correctly.
mc2_edges <- mc2_edges %>%
  mutate(date = as_datetime(date), time = as_datetime(time)) 
glimpse(mc2_edges)
```

The code above converts the 'links' part of the dataset into a tibble and removes duplicates. It then converts date and time information into proper datetime formats using lubridate, and extracts just the date to a new column.

#### Splitting and Tidying the 'type' Column

```{r}
word_list <- strsplit(mc2_edges$type, "\\.")
max_elements <- max(lengths(word_list)) #to find the maximum number of elements in any split
word_list_padded <- lapply(word_list, 
function(x) c(x, rep(NA, max_elements - length(x)))) #to pad shorter splits with NA values to make them all the same length.
word_df <- do.call(rbind, word_list_padded)
colnames(word_df) <- paste0("event", 1:max_elements)

# Since the output above is a matrix, the code chunk below is used to convert word_df into a tibble data.frame.
word_df <- as_tibble(word_df) %>%
  select(event2, event3)


# The code chunk below appends the extracted columns back to mc2_edges tibble data.frame
mc2_edges <- mc2_edges %>%
  cbind(word_df)
```

This code splits the 'type' column into multiple components, pads shorter entries with NAs, and integrates them back into the mc2_edges dataframe as new columns.

```{r}
glimpse(mc2_edges)
```



After cleaning and preparing mc2_edges dataframe, I want to understand how the newly formed structure looks like, lets use the DataExplorer package to visualize it.

```{r}
# Generate and display the data structure plot
plot_str(mc2_edges)

```


```{r}
# Plot introduction of the data
plot_intro(mc2_edges, title = "Introduction of mc2_edges Data")

```
Let's find out the missing values in mc2_edges data

```{r}
# Plot missing values
plot_missing(mc2_edges, title = "Missing Values in mc2_edges Data")

```


Let see what are all the values contained in the categorical column in mc2_edges data along with their frequency


```{r}
# Plot bar charts for all categorical columns
# This function automatically handles multiple categorical columns
plot_bar(mc2_edges, maxcat = 50, title = "Bar Plots for Categorical Columns in mc2_edges Data")
```

Let see the values contained in the numerical column in mc2_edges data along with their frequency

```{r}
# Plot histograms for numerical columns
plot_histogram(mc2_edges, title = "Histograms for Numerical Columns in mc2_edges Data")

```


```{r}


# Generate a Data Explorer report
create_report(mc2_edges, output_file = "DataExplorer_Report.html", output_dir = getwd(), report_title = "EDA Report for mc2_edges")

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```         
# Create a horizontal bar plot to visualize the distribution of the `event2` column
ggplot(mc2_edges, aes(x = event2)) +
  geom_bar() +
  coord_flip() +  # Flip the coordinates to make the bars horizontal
  labs(title = "Distribution of `event2` Column",
       x = "Count",
       y = "Event Type") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12)
  ) +
  scale_y_continuous(labels = scales::comma)  # Format y-axis labels to comma-separated numbers
```

```         
# Create a summary table showing the distribution of the `event2` column
event2_summary <- mc2_edges %>%
  group_by(event2) %>%
  summarize(
    Count = n(),
    Percentage = n() / nrow(mc2_edges) * 100
  ) %>%
  arrange(desc(Count))

# Display the summary table
kable(event2_summary, caption = "Distribution of `event2` Column")
```

### Wrangling and tidying nodes

#### Extracting Nodes and Removing Duplicates

```         
mc2_nodes <- as_tibble(mc2_data$nodes) %>%
  distinct()
glimpse(mc2_nodes)
```

This converts the nodes data to a tibble and removes duplicate rows, then displays the structure of the data using glimpse().

I plan to make use of the date column, but since it is in character format, I will convert it first into date format using lubridate package and glimpse it again to verify the changes.

```         
mc2_nodes <- mc2_nodes %>%
  mutate(date = as_date(date))
glimpse(mc2_nodes)
```

From the table above, two more additional data issues can be observed. They are:

The values in Activities and fish_species_present fields are in list data type, which will affect the ability to process and to analyse the data. As shown in the screenshot below, some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).

Tidying text field In the code chunk below, mutate() of dplyr and gsub() of Base R are used to perform the data tidying task.

This cleans up the Activities and fish_species_present columns by removing unnecessary characters.

```         
mc2_nodes <- mc2_nodes %>%
  mutate(Activities = gsub("c[(]", "", Activities)) %>% 
  mutate(Activities = gsub("\"", "", Activities)) %>%
  mutate(Activities = gsub("[)]", "", Activities)) 

mc2_nodes <- mc2_nodes %>%
  mutate(fish_species_present = gsub("c[(]", "", fish_species_present)) %>% 
  mutate(fish_species_present = gsub("\"", "", fish_species_present)) %>%
  mutate(fish_species_present = gsub("[)]", "", fish_species_present)) 
```

```         
create_report(mc2_nodes)
```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```         
# Function to get distinct values for each column and prepare data for plotting
prepare_distinct_values_data <- function(data_frame) {
  distinct_values <- lapply(data_frame, unique)
  distinct_counts <- sapply(distinct_values, length)
  distinct_values_df <- data.frame(
    Column = names(distinct_values),
    Number_of_Distinct_Values = distinct_counts,
    Sample_Distinct_Values = sapply(distinct_values, function(x) paste(head(x, 10), collapse = ", "))
  )
  
  # Create a long format data frame for plotting
  plot_data <- data.frame(
    Column = rep(names(distinct_values), times = sapply(distinct_values, length)),
    Value = unlist(distinct_values),
    stringsAsFactors = FALSE
  )
  
  return(list(distinct_values_df = distinct_values_df, plot_data = plot_data))
}

# Get distinct values for each column in mc2_edges
data <- prepare_distinct_values_data(mc2_edges)
distinct_values_df <- data$distinct_values_df
plot_data <- data$plot_data

# Display the summary table
print(distinct_values_df)

# Plot distinct values for each column
ggplot(plot_data, aes(x = Value)) +
  geom_bar() +
  facet_wrap(~ Column, scales = "free", ncol = 2) +
  labs(title = "Distinct Values in Each Column", x = "Value", y = "Count") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

```         
mc2_edges_list <- list(mc2_edges)
plot_str(mc2_edges_list)
```

```         
mc2_nodes_list <- list(mc2_nodes)
plot_str(mc2_nodes_list)
```

```         
colnames(mc2_edges)
```

```         
colnames(mc2_nodes)
```

```         
ExpData(data=mc2_edges, type=1) # For summary statistics
```

```         
ExpData(data=mc2_edges, type=2) # For visualizations
```

### Further Data Subsetting and Renaming

#### Creating Subset Data

```         
transponderping <- subset(mc2_edges_cleaned, event3 == "TransponderPing")
transaction <- subset(mc2_edges_cleaned, event2 == "Transaction")
harbor_report <- subset(mc2_edges_cleaned,  event2 == "HarborReport")
```

Creates subsets of data for different types of events: transponder pings, transactions, and harbor reports, facilitating focused analysis.

#### Handling Fish Data

```         
fish <- subset(mc2_nodes_cleaned,  mc2_nodes_cleaned$type == "Entity.Commodity.Fish") %>%
  select_if(~ !any(is.na(.))) %>% 
  select(-c(`type`, `Activities`, `fish_species_present`)) %>%
  rename(fish_species = name, 
         fish_id = id)
```

#### Subsetting City Data

```         
city <- subset(mc2_nodes_cleaned,  mc2_nodes_cleaned$type == "Entity.Location.City") %>%
  select_if(~ !any(is.na(.))) %>%
  select(-c(`type`, `fish_species_present`)) %>%
  rename(city_name = Name, 
         city_id = id)
```

This code processes the city-related data by filtering cities, excluding any incomplete records, and renaming fields to reflect their content more accurately (city names and IDs).

#### Subsetting Point Location

```         
point <- subset(mc2_nodes_cleaned,  mc2_nodes_cleaned$type == "Entity.Location.Point") %>%
  select_if(~ !any(is.na(.))) %>%
  select(-c(`kind`, `fish_species_present`)) %>%
  rename(point_name = Name, 
         point_id = id)
```

This snippet focuses on geographical points, cleaning up the data by removing unnecessary columns and renaming the remaining columns to make them more intuitive (point names and IDs).

#### Subsetting Region Data

```         
region <- subset(mc2_nodes_cleaned,  mc2_nodes_cleaned$type == "Entity.Location.Region") %>%
  select_if(~ !any(is.na(.))) %>%
  select(-c(`type`, `Description`)) %>%
  rename(region_name = Name, 
         region_id = id, 
         region_kind = kind)
```

Extracts and cleans data related to geographic regions, ensuring all entries are complete and renaming columns to better describe their contents, including region type.

#### Subsetting Delivery Report Data

```         
delivery_report <- subset(mc2_nodes_cleaned,  mc2_nodes_cleaned$type == "Entity.Document.DeliveryReport") %>%
  select_if(~ !any(is.na(.))) %>%
  rename(delivery_date = date,
         cargo_id = id) %>%
  select(-c(`type`, `Activities`, `fish_species_present`)) 
```

### Vessel-Specific Data Preparation

#### Fishing Vessel Data

```         
# Load and clean the fishing vessel data
fishing_vessel <- mc2_nodes_cleaned %>%
  filter(grepl("Entity.Vessel.FishingVessel", type)) %>%
  mutate(vessel_type = "Fishing") %>%
  mutate(company = ifelse(is.na(company), "Unknown", company)) %>%
  select(-c(type, Activities, fish_species_present, Description, kind, name, qty_tons, date)) %>%
  rename(fishing_vessel_id = id, fishing_vessel_name = Name)
```

Isolates data concerning fishing vessels, classifying them appropriately and ensuring all records are complete. It renames columns for greater clarity and focuses on identifying and naming the vessels.

#### Cargo Vessel Data

```         
# Load and clean the cargo vessel data
cargo_vessel <- mc2_nodes_cleaned %>%
  filter(grepl("Entity.Vessel.CargoVessel", type)) %>%
  mutate(vessel_type = "Cargo") %>%
  mutate(company = ifelse(is.na(company), "Unknown", company)) %>%
  select(-c(type, Activities, fish_species_present, Description, kind, name, qty_tons, date)) %>%
  rename(cargo_vessel_id = id, cargo_vessel_name = Name)
```

Similar to the fishing vessels, this snippet deals with cargo vessels, tidying the data and ensuring that the vessel type and company fields are correctly populated.

### Transaction and Harbor Report Data Processing

#### Transaction Data

```         
# Load and clean the transaction data
transactions_cleaned <- mc2_edges_cleaned %>%
  filter(event2 == "Transaction") %>%
  select(date, source, target) %>%
  rename(cargo_id = source)
```

Focuses on transaction data from the edges, renaming columns to better represent the transaction's nature—linking transactions via cargo IDs.

#### Harbor Report Data

```         
# Load and clean the harbor report data
harbor_report_cleaned <- mc2_edges_cleaned %>%
  filter(event2 == "HarborReport") %>%
  select(date, source, target) %>%
  rename(vessel_id = source, port = target)
```

Cleans and prepares harbor report data, linking reports to specific vessels and ports, and renaming columns for better readability and further analysis.











```{r}
# Calculate frequency distribution for the 'source' column
source_frequencies <- mc2_edges_cleaned %>%
  select(source) %>%                          # Select the 'source' column
  filter(!is.na(source)) %>%                  # Exclude NA values
  count(source, sort = TRUE, name = "Frequency")  # Count and sort by frequency

# Display the frequency table using knitr::kable
kable(source_frequencies, 
      caption = "Frequency Distribution of 'source' Column",
      format = "html",                        # Ensuring output is HTML for better table formatting
      col.names = c("Source", "Frequency"))   # Set custom column names for the table

```















































```{r}

```

```{r}

```

```{r}

```

```{r}

```

       

### Wrangling and tidying nodes

#### Extracting Nodes and Removing Duplicates

```{r}

mc2_nodes <- as_tibble(mc2_data$nodes) %>%
  distinct()

glimpse(mc2_nodes)

```         

This converts the nodes data to a tibble and removes duplicate rows, then displays the structure of the data using glimpse().

I plan to make use of the date column, but since it is in character format, I will convert it first into date format using lubridate package and glimpse it again to verify the changes.

```{r}

mc2_nodes <- mc2_nodes %>% 
  mutate(date = as_date(date)) 

glimpse(mc2_nodes)

```         

From the table above, two more additional data issues can be observed. They are:

The values in Activities and fish_species_present fields are in list data type, which will affect the ability to process and to analyse the data. As shown in the screenshot below, some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).

Tidying text field In the code chunk below, mutate() of dplyr and gsub() of Base R are used to perform the data tidying task.

This cleans up the Activities and fish_species_present columns by removing unnecessary characters.

```{r}

mc2_nodes <- mc2_nodes %>%
  mutate(Activities = gsub("c[(]", "", Activities)) %>% 
  mutate(Activities = gsub("\"", "", Activities)) %>%
  mutate(Activities = gsub("[)]", "", Activities)) 

mc2_nodes <- mc2_nodes %>%
  mutate(fish_species_present = gsub("c[(]", "", fish_species_present)) %>% 
  mutate(fish_species_present = gsub("\"", "", fish_species_present)) %>%
  mutate(fish_species_present = gsub("[)]", "", fish_species_present)) 
```    





```{r}


# Generate a Data Explorer report
create_report(mc2_nodes, output_file = "DataExplorer_Report.html", output_dir = getwd(), report_title = "EDA Report for mc2_nodes")

```




```{r}


# Generate a Data Explorer report
create_report(mc2_edges_cleaned, output_file = "MC2_edges_cleaned_DataExplorer_Report.html", output_dir = getwd(), report_title = "EDA Report for mc2_edges_cleaned")

```



```{r}


# Generate a Data Explorer report
create_report(mc2_edges, output_file = "MC2_edges_DataExplorer_Report.html", output_dir = getwd(), report_title = "EDA Report for mc2_edges")

```














::: panel-tabset
## The plot

![](images/clipboard-1032690338.png)

## The code

```{r}
#| eval: false
# Plot histograms for numerical columns
plot_histogram(mc2_edges, title = "Histograms for Numerical Columns in mc2_edges Data")
```
:::




```{r}


# Generate a Data Explorer report
create_report(mc2_nodes, output_file = "DataExplorer_Report.html", output_dir = getwd(), report_title = "EDA Report for mc2_nodes")

```





```{r}


# Generate a Data Explorer report
create_report(mc2_edges_cleaned, output_file = "MC2_edges_DataExplorer_Report.html", output_dir = getwd(), report_title = "EDA Report for mc2_edges")

```
