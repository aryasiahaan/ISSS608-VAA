---
title: "Hands-on Exercise 1"
author: "Arya Siahaan"
date: "April 13, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# **1 A Layered Grammar of Graphics: ggplot2 methods**

## **1.1 Learning Outcome**

In this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.

## **1.2 Getting started**

### **1.2.1 Installing and loading the required libraries**

Before we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.

The code chunk below use p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.

::: callout-note
The code chunk on the right assumes that you already have [**pacman**](https://cran.r-project.org/web/packages/pacman/) package installed. If not, please go ahead install pacman first.
:::

```{r}
pacman::p_load(tidyverse)
```

### **1.2.2 Importing data**

-   The code chunk below imports *exam_data.csv* into R environment by using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package.

-   **readr** is one of the tidyverse package.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

-   Year end examination grades of a cohort of primary 3 students from a local school.

-   There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.

    -   The categorical attributes are: ID, CLASS, GENDER and RACE.

    -   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

## **1.3 Introducing ggplot**

![](https://r4va.netlify.app/chap01/img/image1.jpg){width="72"} is an R package for **declaratively** creating **data-driven** graphics based on ***The Grammar of Graphics***

![](images/clipboard-3536010891.png)

It is also part of the tidyverse family specially designed for visual exploration and communication.

![](images/clipboard-209490517.png)

-   For more detail, visit [ggplot2 link](https://ggplot2.tidyverse.org/).

### **1.3.1 R Graphics VS ggplot**

First, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.

::: panel-tabset
## R Graphics

```{r}
hist(exam_data$MATHS)
```

## ggplot2

```{r}
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_histogram(bins=10, 
                 boundary = 100,
                 color="black", 
                 fill="grey") +
  ggtitle("Distribution of Maths scores")
```
:::

As you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?

As pointed out by [Hadley Wickham](http://varianceexplained.org/r/teach_ggplot2_to_beginners/#comment-1745406157)

::: callout-important
The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.
:::

## **1.4 Grammar of Graphics**

Before we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics.

Grammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) **Grammar of Graphics**, Springer. The grammar of graphics is an answer to a question:

What is a statistical graphic?

In the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.

There are two principles in Grammar of Graphics, they are:

-   Graphics = distinct layers of grammatical elements

-   Meaningful plots through aesthetic mapping

A good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.

### **1.4.1 A Layered Grammar of Graphics**

ggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.

![](images/clipboard-950964217.png)

Reference: Hadley Wickham (2010) [“A layered grammar of graphics.”](https://vita.had.co.nz/papers/layered-grammar.html) *Journal of Computational and Graphical Statistics*, vol. 19, no. 1, pp. 3–28.

A short description of each building block are as follows:

-   **Data**: The dataset being plotted.

-   **Aesthetics** take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.

-   **Geometrics**: The visual elements used for our data, such as point, bar or line.

-   **Facets** split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).

-   **Statistics**, statiscal transformations that summarise data (e.g. mean, confidence intervals).

-   **Coordinate systems** define the plane on which data are mapped on the graphic.

-   **Themes** modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.

## **1.5 Essential Grammatical Elements in ggplot2: data**

Let us call the `ggplot()` function using the code chunk on the right.

```{r}
ggplot(data=exam_data)
```

## **1.6 Essential Grammatical Elements in ggplot2: [Aesthetic mappings](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)**

The aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.

All aesthetics of a plot are specified in the [`aes()`](https://ggplot2.tidyverse.org/reference/aes.html) function call (in later part of this lesson, you will see that each *geom* layer can have its own aes specification)

Code chunk below adds the aesthetic element into the plot.

```{r}
ggplot(data=exam_data,
aes(x= MATHS))
```

::: callout-note
Note that there are five types of callouts, including: `note`, `warning`, `important`, `tip`, and `caution`.
:::

::: callout-tip
## Tip with Title

This is an example of a callout with a title.
:::

::: {.callout-caution collapse="true"}
## Expand To Learn About Collapse

This is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse="true"` to collapse it by default or `collapse="false"` to make a collapsible callout that is expanded by default.
:::

### **1.7.1 Geometric Objects: geom_bar**

```{r}
ggplot(data=exam_data,
aes(x=RACE)) +
geom_bar()
```

### **1.7.2 Geometric Objects: geom_dotplot**

```{r}
ggplot(data=exam_data,
aes(x = MATHS)) +
geom_dotplot(dotsize = 0.5)
```

```{r}
ggplot(data=exam_data,
aes(x = MATHS)) +
geom_dotplot(binwidth=2.5,
dotsize = 0.5) +
scale_y_continuous(NULL,
breaks = NULL)
```

### **1.7.3 Geometric Objects: `geom_histogram()`**

```{r}
ggplot(data=exam_data,
aes(x = MATHS)) +
geom_histogram()
```

### **1.7.4 Modifying a geometric object by changing `geom()`**

```{r}
ggplot(data=exam_data,
aes(x= MATHS)) +
geom_histogram(bins=20,
color="black",
fill="light blue")
```

### **1.7.5 Modifying a geometric object by changing *aes()***

```{r}
ggplot(data=exam_data,
aes(x= MATHS,
fill = GENDER)) +
geom_histogram(bins=20,
color="grey30")
```

### **1.7.6 Geometric Objects: geom-density()**

```{r}
ggplot(data=exam_data,
aes(x = MATHS)) +
geom_density()
```

```{r}
ggplot(data=exam_data,
aes(x = MATHS,
colour = GENDER)) +
geom_density()
```

### **1.7.7 Geometric Objects: geom_boxplot**

```{r}
ggplot(data=exam_data,
aes(y = MATHS,
x= GENDER)) +
geom_boxplot()
```

```{r}
ggplot(data=exam_data,
aes(y = MATHS,
x= GENDER)) +
geom_boxplot(notch=TRUE)
```

### **1.7.8 Geometric Objects: geom_violin**

```{r}
ggplot(data=exam_data,
aes(y = MATHS,
x= GENDER)) +
geom_violin()
```

### **1.7.9 Geometric Objects: geom_point()**

```{r}
ggplot(data=exam_data,
aes(x= MATHS,
y=ENGLISH)) +
geom_point()
```

### **1.7.10 *geom* objects can be combined**

```{r}
ggplot(data=exam_data,
aes(y = MATHS,
x= GENDER)) +
geom_boxplot() +
geom_point(position="jitter",
size = 0.5)
```

### **1.8.1 Working with `stat()`**

```{r}
ggplot(data=exam_data,
aes(y = MATHS, x= GENDER)) +
geom_boxplot()
```

### **1.8.2 Working with stat - the *stat_summary()* method**

```{r}
ggplot(data=exam_data,
aes(y = MATHS, x= GENDER)) +
geom_boxplot() +
stat_summary(geom = "point",
fun.y="mean",
colour ="red",
size=4)
```

### **1.8.3 Working with stat - the `geom()` method**

```{r}
ggplot(data=exam_data,
aes(y = MATHS, x= GENDER)) +
geom_boxplot() +
geom_point(stat="summary",
fun.y="mean",
colour ="red",
size=4)
```

### **1.8.4 Adding a best fit curve on a scatterplot?**

```{r}
ggplot(data=exam_data,
aes(x= MATHS, y=ENGLISH)) +
geom_point() +
geom_smooth(size=0.5)
```

```{r}
ggplot(data=exam_data,
aes(x= MATHS,
y=ENGLISH)) +
geom_point() +
geom_smooth(method=lm,
size=0.5)
```

### **1.9.1 Working with `facet_wrap()`**

```{r}
ggplot(data=exam_data,
aes(x= MATHS)) +
geom_histogram(bins=20) +
facet_wrap(~ CLASS)
```

### **1.9.2 `facet_grid()` function**

```{r}
ggplot(data=exam_data,
aes(x= MATHS)) +
geom_histogram(bins=20) +
facet_grid(~ CLASS)
```

### **1.10.1 Working with Coordinate**

```{r}
ggplot(data=exam_data,
aes(x=RACE)) +
geom_bar()
```

```{r}
ggplot(data=exam_data,
aes(x=RACE)) +
geom_bar() +
coord_flip()
```

### **1.10.2 Changing the y- and x-axis range**

```{r}
ggplot(data=exam_data,
aes(x= MATHS, y=ENGLISH)) +
geom_point() +
geom_smooth(method=lm, size=0.5)
```

```{r}
ggplot(data=exam_data,
aes(x= MATHS, y=ENGLISH)) +
geom_point() +
geom_smooth(method=lm,
size=0.5) +
coord_cartesian(xlim=c(0,100),
ylim=c(0,100))
```

### **1.11.1 Working with theme**

```{r}
ggplot(data=exam_data,
aes(x=RACE)) +
geom_bar() +
coord_flip() +
theme_gray()
```

```{r}
ggplot(data=exam_data,
aes(x=RACE)) +
geom_bar() +
coord_flip() +
theme_classic()
```

```{r}
ggplot(data=exam_data,
aes(x=RACE)) +
geom_bar() +
coord_flip() +
theme_minimal()
```
