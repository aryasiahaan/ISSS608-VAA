[
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "In Oceanus, the island’s economy thrives on the movement of seafaring vessels, particularly those operated by commercial fishing companies, indicating a healthy economic state. However, a major event has disrupted these routines: SouthSeafood Express Corp was caught engaging in illegal fishing. This scandal caused significant turmoil within the close-knit fishing community. FishEye International, a non-profit dedicated to combating illegal fishing, seeks assistance to understand the impact of this event. They have been gathering and processing data on ship movements and shipping records to create CatchNet: the Oceanus Knowledge Graph. While analysts at FishEye ensure data accuracy, they require assistance to develop analytical capabilities for this data.\n\n\n\nFishEye analysts require assistance in performing geographic and temporal analysis of the CatchNet data to prevent future instances of illegal fishing. The task involves developing innovative visual analytics tools and workflows designed to identify and understand signatures of various behaviors. One key objective is to visualize the signature of SouthSeafood Express Corp’s illegal activities. Additionally, there is a need to create a workflow capable of detecting other instances of illegal behavior within the data. These efforts are crucial for enhancing FishEye’s ability to monitor and combat illegal fishing effectively. This exercise will attempt to address Question 1 and Question 3 of this challenge.\n\n\nFishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports. But as they were loading data into CatchNet, they discovered they had purchased the wrong port records. They wanted to get the ship off-load records, but they instead got the port-exit records (essentially trucks/trains leaving the port area). Port exit records do not include which vessel that delivered the products. Given this limitation, develop a visualization system to associate vessels with their probable cargos. Which vessels deliver which products and when? What are the seasonal trends and anomalies in the port exit records?\n\n\n\nTo support further Fisheye investigations, develop visual analytics workflows that allow you to discover other vessels engaging in behaviors similar to SouthSeafood Express Corp’s illegal activities? Provide visual evidence of the similarities.\n\n\n\n\n\n\n\nFor the purpose of this exercise, several R packages will be used to perform the following tasks:\n\nImporting graph data in json file format into R\nExtracting the nodes and edges (also known as links) from imported graph data.\nWrangling text data type.\nImporting geographical data in geojson file format into R,\nImporting geographical data in ESRI shapefile format into R,\nExtracting movement data from the edges table of a knowledge graph,\nDeriving a trajectory data from a movement data, and\nVisualising trajectory data to reveal geo-temporal patterns.\n\nThe following code chunk utilises the p_load() function from the pacman package to ensure that the necessary packages are available in the R environment. If the packages are already installed on the computer, p_load() will load them. If they are not installed, it will first install them and then load them into the R environment.\n\npacman::p_load(tidyverse, jsonlite, DataExplorer,\n               lubridate, ggplot2, tidygraph,\n               ggraph, igraph, sf, skimr) \n\n\n\n\nThe dataset for this exercise is available for download at the Vast Challenge 2024. As I undertake Mini-Challenge 2, I will utilize the dataset provided in the form of a JSON file named mc2.json.\nIn the code chunk below, fromJSON() of jsonlite package is used to import mc2.json file into R and save the output object.\n\nmc2_data &lt;- fromJSON(\"data/mc2.json\")\n\nThe output is called mc2_data. It is a large list R object.\n\n\n\n\n\n\n\n\nThe code chunk below extracts the links dataframe from mc2_data and saves it as a tibble dataframe called mc2_edges. The distinct() function is used to remove duplicates.\n\n# Wrangling and tidying edges\nmc2_edges &lt;- as_tibble(mc2_data$links) %&gt;% \n  distinct()\n\nNext, glimpse() of dplyr package will be used to reveal the structure of mc2_edges tibble data table\n\nglimpse(mc2_edges)\n\nRows: 271,643\nColumns: 17\n$ type                &lt;chr&gt; \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                &lt;chr&gt; \"2035-09-16T04:06:48.185987\", \"2035-09-20T05:21:33…\n$ dwell               &lt;dbl&gt; 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   &lt;chr&gt; \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       &lt;chr&gt; \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` &lt;chr&gt; \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       &lt;chr&gt; \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        &lt;chr&gt; \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              &lt;chr&gt; \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              &lt;chr&gt; \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ data_author         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\n\n\n\n\n\n\nObservation\n\n\n\nFrom the table above, the following data issues can be identified:\n\nColumns with date and time data type are not in the correct format.\nThe column type also seems to contain three different types of information, namely: ‘Event’, ‘TransportEvent’, ‘TransponderPing’.\n\n\n\n\n\n\nIn the code chunk below, as_datetime() of lubridate package is used to convert fields with character date into POSIXt format.\n\nmc2_edges$time &lt;- as_datetime(mc2_edges$time)\nmc2_edges$\"date\" &lt;- as_datetime(\"mc2_edges$date\")\n\nNext, glimpse() will be used again to confirm if the process have been performed correctly.\n\nglimpse(mc2_edges)\n\nRows: 271,643\nColumns: 17\n$ type                &lt;chr&gt; \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                &lt;dttm&gt; 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               &lt;dbl&gt; 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   &lt;chr&gt; \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       &lt;chr&gt; \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` &lt;chr&gt; \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       &lt;chr&gt; \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        &lt;chr&gt; \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              &lt;chr&gt; \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              &lt;chr&gt; \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\n\n\n\n\n\n\nObservation\n\n\n\nAs we can see now, the time and date columns have been converted to datetime format.\n\n\n\n\n\n\nFrom the table above, we can see that the text in the type column is not tidy. I will tidy the type column by splitting it into three new separate columns called event1, event2, and event3. However, I will only keep the columns containing the values ‘TransportEvent’ and ‘TransponderPing’, which will be event2 and event3.\n\n\n\n\nword_list &lt;- strsplit(mc2_edges$type, \"\\\\.\")\n\n# The code chunk below will be used to find the maximum number of elements in any split\nmax_elements &lt;- max(lengths(word_list)) #to find the maximum number of elements in any split\n\n#The code chunk below will be used to pad shorter splits with NA values to make them all the same length.\nword_list_padded &lt;- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x)))) #to pad shorter splits with NA values to make them all the same length.\nword_df &lt;- do.call(rbind, word_list_padded)\ncolnames(word_df) &lt;- paste0(\"event\", 1:max_elements)\n\n# Since the output above is a matrix, the code chunk below is used to convert word_df into a tibble data.frame.\nword_df &lt;- as_tibble(word_df) %&gt;%\n  select(event2, event3)\n\n\n# The code chunk below appends the extracted columns back to mc2_edges tibble data.frame\nmc2_edges &lt;- mc2_edges %&gt;%\n  cbind(word_df)\n\nThis code splits the type column into multiple components, pads shorter entries with NAs, and integrates them back into the mc2_edges dataframe as new columns.\n\n\n\n\n\n\n\nObservation\n\n\n\nAs we can see here, two new columns, event2 and event3, have been created and appended to the mc2_edges dataframe.\n\n\n\n\n\n\nAfter cleaning and preparing the mc2_edges dataframe, I want to understand how the newly formed structure looks. Let’s make use of the DataExplorer package to visualize it.\nThe code below uses the plot_intro function, which is part of the DataExplorer package. This function provides a high-level summary of the mc2_edges dataframe, offering insights into its structure and content.\n\nThe plotThe code\n\n\n\n\n\n\n\n# Plot introduction of the data\nplot_intro(mc2_edges, title = \"Introduction of mc2_edges Data\")\n\n\n\n\nThe plot_str function below generates a plot that visualizes the structure of mc2_edges dataframe, showing the relationships between different columns and their types.\n\nThe plotThe code\n\n\n\n\n\n\n# Generate and display the data structure plot\nplot_str(mc2_edges)\n\n\n\n\nThe plot_missing function below generates a visualization that helps to identify and understand the distribution of missing values within mc2_edges dataframe.\n\nThe plotThe code\n\n\n\n\n\n\n# Plot missing values\nplot_missing(mc2_edges, title = \"Missing Values in mc2_edges Data\")\n\n\n\n\n\n\n\nAfter the initial EDA, I will remove columns from mc2_edges dataframe that are unnecessary to complete Mini-Challenge 2.\n\n\n\nmc2_edges_cleaned &lt;- mc2_edges %&gt;%\n  select(-c(`type`, `_last_edited_by`, `_date_added`, `_last_edited_date`, `_raw_source`, `_algorithm`, `key`,  `data_author`, `aphorism`, `holiday_greeting`, `wisdom`, `saying of the sea`))\n\nThe code above removes unnecessary columns from mc2_edges that are not needed for analysis, and then assigns the cleaned-up version to a new dataframe called mc2_edges_cleaned.\nNext, let’s use glimpse() to check what mc2_edges_cleaned looks like.\n\nglimpse(mc2_edges_cleaned)\n\nRows: 271,643\nColumns: 7\n$ time   &lt;dttm&gt; 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09-28 04:31:47,…\n$ dwell  &lt;dbl&gt; 115074.79, 412706.32, 286092.88, 327623.95, 243225.35, 109564.2…\n$ source &lt;chr&gt; \"City of Haacklee\", \"City of Haacklee\", \"City of Haacklee\", \"Ci…\n$ target &lt;chr&gt; \"perchplundererbc0\", \"perchplundererbc0\", \"perchplundererbc0\", …\n$ date   &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ event2 &lt;chr&gt; \"TransportEvent\", \"TransportEvent\", \"TransportEvent\", \"Transpor…\n$ event3 &lt;chr&gt; \"TransponderPing\", \"TransponderPing\", \"TransponderPing\", \"Trans…\n\n\nBefore moving to the next task, it would be wise to save the tidied mc2_edges_cleaned dataframe into a physical file for future use. By doing so, repeating the steps above will not be necessary.\nThe code chunk below will be used to save mc2_edges_cleaned into R rds file format.\n\n\n\n\n\n\nWarning\n\n\n\nSince the file will be saved in the rds sub-folder within the data folder, ensure that the rds folder exists. If it does not, it needs to be created first.\n\n\n\nwrite_rds(mc2_edges_cleaned, \"data/rds/mc2_edges_cleaned.rds\")\n\nThis completes the data preparation process for the links dataframe of mc2_data, which is now stored in the mc2_edges_cleaned dataframe and saved as a physical mc2_edges_cleaned.rds file.\nThe next step is to clean and prepare the nodes dataframe of mc2_data.\n\n\n\n\n\n\nThe code chunk below extracts the nodes dataframe from mc2_data, parses it as a tibble dataframe called mc2_nodes, and removes duplicate rows using the distinct() function.\n\nmc2_nodes &lt;- as_tibble(mc2_data$nodes) %&gt;%\n  distinct()\n\nNext, the code chunk below uses the glimpse() function to reveal the data structure of the mc2_nodes tibble dataframe.\n\nglimpse(mc2_nodes)\n\nRows: 5,637\nColumns: 20\n$ type                 &lt;chr&gt; \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    &lt;chr&gt; \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        &lt;chr&gt; \"2033-09-04T00:00:00\", \"2034-01-21T00:00:00\", \"20…\n$ `_last_edited_date`  &lt;chr&gt; \"2035-01-25T00:00:00\", \"2035-01-04T00:00:00\", \"20…\n$ `_raw_source`        &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 &lt;chr&gt; \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   &lt;chr&gt; \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n$ kind                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flag_country         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n\n\n\n\n\n\n\n\nObservation\n\n\n\nFrom the table above, the following data issues can be identified:\n\nThe column date data type is not in the correct format.\nThe values in Activities and fish_species_present fields are in list data type, which will affect the ability to process and to analyse the data.\nAs shown in the screenshot below, some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).\n\n\n\n\n\n\nIn the code chunk below, as_datetime() of lubridate package is used to convert date fields with character date into POSIXt format.\n\nmc2_nodes$date &lt;- as_datetime(mc2_nodes$date)\n\nNext, glimpse() will be used again to confirm if the process have been performed correctly.\n\nglimpse(mc2_nodes)\n\nRows: 5,637\nColumns: 20\n$ type                 &lt;chr&gt; \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    &lt;chr&gt; \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        &lt;chr&gt; \"2033-09-04T00:00:00\", \"2034-01-21T00:00:00\", \"20…\n$ `_last_edited_date`  &lt;chr&gt; \"2035-01-25T00:00:00\", \"2035-01-04T00:00:00\", \"20…\n$ `_raw_source`        &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 &lt;chr&gt; \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   &lt;chr&gt; \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n$ kind                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ flag_country         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n\n\n\n\n\n\n\n\nObservation\n\n\n\nAs we can see now, the time and date columns have been converted to datetime format.\n\n\nThere are two more additional data issues can be observed. They are:\nThe values in Activities and fish_species_present columns are in list data type, which will affect the ability to process and to analyze the data.\nAs shown in the screenshot below, some values in the Activities and fish_species_presentcolumn are not ready to be analyze without further tidying (i.e. removing c(““)).\n\n\n\n\nIn the code chunk below, mutate() from dplyr and gsub() from Base R are used to perform the data tidying task.\nThis cleans up the Activities and fish_species_present columns by removing unnecessary characters.\n\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %&gt;% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %&gt;%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities)) \n\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %&gt;% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %&gt;%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n\nAfter executing the code chunk above, we can see from the screenshot below, that the text field in Activities and fish_species_present columns have been tidied.\n\n\n\n\n\nNow, let’s use the DataExplorer package again to visualize the mc2_nodes dataframe in a similar manner as was done above for the mc2_edges dataframe.\n\nThe plotThe code\n\n\n\n\n\n\n\n# Plot introduction of the data\nplot_intro(mc2_nodes, title = \"Introduction of mc2_nodes Data\")\n\n\n\n\nThe plot_str function below generates a plot that visualizes the structure of mc2_nodes dataframe, showing the relationships between different columns and their types.\n\nThe plotThe code\n\n\n\n\n\n\n# Generate and display the data structure plot\nplot_str(mc2_nodes)\n\n\n\n\nThe plot_missing function below generates a visualization that helps to identify and understand the distribution of missing values within mc2_nodes dataframe.\n\nThe plotThe code\n\n\n\n\n\n\n# Plot missing values\nplot_missing(mc2_nodes, title = \"Missing Values in mc2_nodes Data\")\n\n\n\n\n\n\n\nAfter the initial EDA, I will remove columns from mc2_nodes dataframe that are unnecessary to complete Mini-Challenge 2.\n\n\n\nmc2_nodes_cleaned &lt;- mc2_nodes %&gt;%\n  select(-c(`_last_edited_by`, `_date_added`, `_last_edited_date`, `_raw_source`, `_algorithm`, `style`))\n\nThe code above removes unnecessary columns from mc2_nodes that are not needed for analysis, and then assigns the cleaned-up version to a new dataframe called mc2_nodes_cleaned.\nNext, let’s use glimpse() to check what mc2_nodes_cleaned looks like.\n\nglimpse(mc2_nodes_cleaned)\n\nRows: 5,637\nColumns: 14\n$ type                 &lt;chr&gt; \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ name                 &lt;chr&gt; \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   &lt;chr&gt; \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           &lt;chr&gt; \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"…\n$ kind                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ flag_country         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present &lt;chr&gt; \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"…\n\n\nThe tidied mc2_nodes_cleaned dataframe will then be saved into a physical file for future use. By doing so, repeating the steps above will not be necessary.\nThe code chunk below will be used to save mc2_nodes_cleaned into R rds file format.\n\nwrite_rds(mc2_nodes_cleaned, \"data/rds/mc2_nodes_cleaned.rds\")\n\nThis completes the data preparation process for the nodes dataframe of mc2_data, which is now stored in the mc2_nodes_cleaned dataframe and saved as a physical mc2_nodes_cleaned.rds file.\nThe next step is to\nLet’s investigate further on what is in the type column from mc2_nodes_cleaned dataframe.\n\nunique(mc2_nodes_cleaned$type)\n\n [1] \"Entity.Commodity.Fish\"          \"Entity.Location.City\"          \n [3] \"Entity.Document.DeliveryReport\" \"Entity.Vessel.FishingVessel\"   \n [5] \"Entity.Vessel.Other\"            \"Entity.Vessel.Ferry.Passenger\" \n [7] \"Entity.Vessel.CargoVessel\"      \"Entity.Vessel.Ferry.Cargo\"     \n [9] \"Entity.Vessel.Research\"         \"Entity.Vessel.Tour\"            \n[11] \"Entity.Location.Point\"          \"Entity.Location.Region\"        \n\n\n\nvessel_type_counts &lt;- mc2_nodes_cleaned %&gt;%\n  group_by(type) %&gt;%\n  summarise(count = n())\n\n# Display the result\nprint(vessel_type_counts)\n\n# A tibble: 12 × 2\n   type                           count\n   &lt;chr&gt;                          &lt;int&gt;\n 1 Entity.Commodity.Fish             10\n 2 Entity.Document.DeliveryReport  5307\n 3 Entity.Location.City               6\n 4 Entity.Location.Point             12\n 5 Entity.Location.Region             6\n 6 Entity.Vessel.CargoVessel        100\n 7 Entity.Vessel.Ferry.Cargo          2\n 8 Entity.Vessel.Ferry.Passenger      3\n 9 Entity.Vessel.FishingVessel      178\n10 Entity.Vessel.Other                5\n11 Entity.Vessel.Research             2\n12 Entity.Vessel.Tour                 6\n\n\nThis particular column contains variety of different data, some of them seems interesting and useful for analysis, they are:\n\nEntity.Commodity.Fish\nEntity.Document.DeliveryReport\nEntity.Location.City\nEntity.Location.Point\nEntity.Location.Region\nEntity.Vessel.CargoVessel\nEntity.Vessel.FishingVessel\n\nThe others seems unnecessary.\nI will try to make separate dataframe for each of them.\nHere I can see the type of vessel and how many of each are recorded in the dataframe.\nI’m only interested in the fishing vessel and the cargo vessel, and apparently there 178 fishing vessels and 100 cargo vessels, next so I will try to filter all the rows that only contain fishing vessels and cargo vessels\nFilter all the rows containing fishing_vessel\n\n# Filter fishing vessels and rename specific columns while keeping all others\nfishing_vessel &lt;- mc2_nodes_cleaned %&gt;%\n  filter(type %in% c(\"Entity.Vessel.FishingVessel\")) %&gt;%\n  rename(\n    vessel_type = type,\n    fishing_vessel_id = id,\n    fishing_vessel_name = Name\n  )\n\nNow I want to find out all the companies that own these fishing vessels\n\nunique(fishing_vessel$company)\n\n [1] \"Roth, Logan and Moreno\"                   \n [2] \"Brown-Haas\"                               \n [3] \"Smith, Davis and Acosta\"                  \n [4] \"Cisneros-Meyer\"                           \n [5] \"FlounderLeska Marine BV\"                  \n [6] \"House Group\"                              \n [7] \"Weaver-Baker\"                             \n [8] \"Stewart, Perkins and Sanchez\"             \n [9] \"ScaniaSeafood Holdings Ltd. Liability Co\" \n[10] \"Mccormick Group\"                          \n[11] \"Parks Ltd\"                                \n[12] \"Taylor-Sawyer\"                            \n[13] \"Nielsen, Valentine and Bell\"              \n[14] \"Jacobson Inc\"                             \n[15] \"Ballard-Bailey\"                           \n[16] \"Steele PLC\"                               \n[17] \"WestRiver Shipping KgaA\"                  \n[18] \"Robinson, Mcmillan and Watson\"            \n[19] \"Lowery-Myers\"                             \n[20] \"Dyer-Campbell\"                            \n[21] \"Adkins LLC\"                               \n[22] \"BaringoAmerica Marine Ges.m.b.H.\"         \n[23] \"Terry, Smith and Lyons\"                   \n[24] \"Schmidt Ltd\"                              \n[25] \"Ritter Ltd\"                               \n[26] \"Decker PLC\"                               \n[27] \"Faulkner, Shaffer and Moyer\"              \n[28] \"Brown-Allen\"                              \n[29] \"Bell, Reynolds and Forbes\"                \n[30] \"French Ltd\"                               \n[31] \"Rivera Group\"                             \n[32] \"Bowers Group\"                             \n[33] \"MonarchCreek Shipping S.p.A.\"             \n[34] \"Mendez-Tyler\"                             \n[35] \"Mooney, Stevenson and Miller\"             \n[36] \"Garcia-Wallace\"                           \n[37] \"Cox-Mason\"                                \n[38] \"Garcia-Sanchez\"                           \n[39] \"Sutton PLC\"                               \n[40] \"Rasmussen, Nelson and King\"               \n[41] \"Brown, Clarke and Martinez\"               \n[42] \"Gomez-Mccormick\"                          \n[43] \"Solis-Lopez\"                              \n[44] \"SouthSeafood Express Corp\"                \n[45] \"Clark, Hall and Cole\"                     \n[46] \"Cox-Donovan\"                              \n[47] \"Solis PLC\"                                \n[48] \"Newton-Meyer\"                             \n[49] \"Mcpherson-Wright\"                         \n[50] \"Cordova, Ritter and Flores\"               \n[51] \"Miller, Smith and Reed\"                   \n[52] \"Barnes and Sons\"                          \n[53] \"Bennett, Jones and Miller\"                \n[54] \"Mercado, French and Graham\"               \n[55] \"Brewer-Massey\"                            \n[56] \"Norman LLC\"                               \n[57] \"Wiley LLC\"                                \n[58] \"Davis, Harris and West\"                   \n[59] \"Goodman LLC\"                              \n[60] \"Reid, Thomas and Gill\"                    \n[61] \"Henry-Alvarez\"                            \n[62] \"Lane Group\"                               \n[63] \"Smith, Collins and Johnson\"               \n[64] \"Franco, Olson and Long\"                   \n[65] \"Dry CreekWorldLogistics Ltd. Liability Co\"\n[66] \"Rodriguez, Henry and Woodard\"             \n[67] \"Thompson-Padilla\"                         \n[68] \"Carter, Mcdonald and Miller\"              \n[69] \"Williams, Horn and Morales\"               \n[70] \"Callahan-Green\"                           \n[71] \"Green, Vincent and Thompson\"              \n[72] \"Lake Malawi  Corp United\"                 \n[73] \"Wolf and Sons\"                            \n[74] \"Hernandez Group\"                          \n[75] \"Horne Group\"                              \n[76] \"Fischer, Graham and Robinson\"             \n[77] \"Chavez and Sons\"                          \n[78] \"Maacama Ocean Worldwide LLC\"              \n[79] \"Jordan and Sons\"                          \n[80] \"Martin-Case\"                              \n[81] \"Murphy and Sons\"                          \n[82] \"Collins, Johnson and Lloyd\"               \n[83] \"Sparmans Marine Carriers Oyj\"             \n[84] \"Mullins-Carrillo\"                         \n[85] \"Riley Inc\"                                \n[86] \"NortheastSeafood Carriers Ltd\"            \n[87] \"Chambers, Hall and Walker\"                \n[88] \"Osborne and Sons\"                         \n[89] \"Conley, Benton and Miller\"                \n[90] \"Saltwater Sisters Company Marine\"         \n[91] \"Costa de Oro Enterprises\"                 \n[92] \"Bailey-Mccullough\"                        \n[93] \"Chase, Long and Anderson\"                 \n[94] \"Vasquez-Gonzalez\"                         \n[95] \"Harper and Sons\"                          \n[96] \"Tainamarine Fishing Co\"                   \n[97] \"Mcdonald-Jones\"                           \n[98] \"George-Brown\"                             \n[99] \"SamakaDredgeTransport OJSC\"               \n\n\nFrom the result above I see “SouthSeafood Express Corp” is listed, now I want to isolate all the fishing vessels belong to “SouthSeafood Express Corp”.\n\n# Filter fishing vessels owned by \"SouthSeafood Express Corp\"\nsouthseafood_fishing_vessels &lt;- fishing_vessel %&gt;%\n  filter(company == \"SouthSeafood Express Corp\")\nprint(southseafood_fishing_vessels)\n\n# A tibble: 2 × 14\n  vessel_type name  fishing_vessel_id fishing_vessel_name Description Activities\n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;               &lt;chr&gt;       &lt;chr&gt;     \n1 Entity.Ves… &lt;NA&gt;  snappersnatcher7… Snapper Snatcher    &lt;NA&gt;        NULL      \n2 Entity.Ves… &lt;NA&gt;  roachrobberdb6    Roach Robber        &lt;NA&gt;        NULL      \n# ℹ 8 more variables: kind &lt;chr&gt;, qty_tons &lt;dbl&gt;, date &lt;dttm&gt;,\n#   flag_country &lt;chr&gt;, company &lt;chr&gt;, tonnage &lt;int&gt;, length_overall &lt;int&gt;,\n#   fish_species_present &lt;chr&gt;\n\n\nSo the vessels belong to “SouthSeafood Express Corp” are\n\nSnapper Snatcher (snappersnatcher7be)\nRoach Robber (roachrobberdb6)\n\nAfter identifying the name of the fishing vessels belong to “SouthSeafood Express Corp”, I need to check whether this information is also contained in the mc2_edges_cleaned dataframe.\n\n# Check if specific values are in the source column\nvalues_exist &lt;- c(\"snappersnatcher7be\", \"roachrobberdb6\") %in% mc2_edges_cleaned$source\n\n# Print results\nprint(values_exist)\n\n[1] TRUE TRUE\n\n\nThe output [1] TRUE TRUE indicates that both identifiers “snappersnatcher7be” and “roachrobberdb6” are present in the source column of mc2_edges_cleaned dataframe.\nThe next steps will involve deeper analysis and visualization to understand the activities and patterns associated with these vessels.\n\n# Extract relevant data for the specified vessels\nsouthseafood_activities &lt;- mc2_edges_cleaned %&gt;%\n  filter(source %in% c(\"snappersnatcher7be\", \"roachrobberdb6\")) \n\n\nglimpse(southseafood_activities)\n\nRows: 15\nColumns: 7\n$ time   &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA\n$ dwell  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA\n$ source &lt;chr&gt; \"snappersnatcher7be\", \"snappersnatcher7be\", \"snappersnatcher7b…\n$ target &lt;chr&gt; \"City of Lomark\", \"City of Lomark\", \"City of Paackland\", \"City …\n$ date   &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA\n$ event2 &lt;chr&gt; \"HarborReport\", \"HarborReport\", \"HarborReport\", \"HarborReport\",…\n$ event3 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA\n\n\n\nharbor_report &lt;- mc2_edges_cleaned %&gt;%\n  filter(event2 == \"HarborReport\")\n\n\nunique(mc2_edges_cleaned$source)\n\n   [1] \"City of Haacklee\"              \"City of Lomark\"               \n   [3] \"City of Himark\"                \"City of Paackland\"            \n   [5] \"City of South Paackland\"       \"cargo_2035_2394778c\"          \n   [7] \"cargo_2035_23956ba0\"           \"cargo_2035_23957cfd\"          \n   [9] \"cargo_2035_23958501\"           \"cargo_2035_23959ab6\"          \n  [11] \"cargo_2035_23960fa9\"           \"cargo_2035_23961648\"          \n  [13] \"cargo_2035_23962f3c\"           \"cargo_2035_2396328a\"          \n  [15] \"cargo_2035_23964f68\"           \"cargo_2035_23965a72\"          \n  [17] \"cargo_2035_23966ec6\"           \"cargo_2035_239679db\"          \n  [19] \"cargo_2035_239687f3\"           \"cargo_2035_23969037\"          \n  [21] \"cargo_2035_239703bb\"           \"cargo_2035_239710af\"          \n  [23] \"cargo_2035_239726c0\"           \"cargo_2035_23973732\"          \n  [25] \"cargo_2035_23974ca6\"           \"cargo_2035_23975884\"          \n  [27] \"cargo_2035_23976a08\"           \"cargo_2035_23977a6d\"          \n  [29] \"cargo_2035_23978abd\"           \"cargo_2035_23979493\"          \n  [31] \"cargo_2035_23980ddb\"           \"cargo_2035_23981254\"          \n  [33] \"cargo_2035_23982236\"           \"cargo_2035_239830f2\"          \n  [35] \"cargo_2035_23984c4a\"           \"cargo_2035_23985513\"          \n  [37] \"cargo_2035_23986aa0\"           \"cargo_2035_239889c5\"          \n  [39] \"cargo_2035_2398914c\"           \"cargo_2035_23990788\"          \n  [41] \"cargo_2035_23991fa7\"           \"cargo_2035_23992af5\"          \n  [43] \"cargo_2035_23993070\"           \"cargo_2035_23994469\"          \n  [45] \"cargo_2035_23995a34\"           \"cargo_2035_2399679d\"          \n  [47] \"cargo_2035_23997fac\"           \"cargo_2035_239998e2\"          \n  [49] \"cargo_2035_240006a5\"           \"cargo_2035_24001fb5\"          \n  [51] \"cargo_2035_24002b8d\"           \"cargo_2035_24003bb0\"          \n  [53] \"cargo_2035_24004231\"           \"cargo_2035_24005055\"          \n  [55] \"cargo_2035_24014a5e\"           \"cargo_2035_240152cb\"          \n  [57] \"cargo_2035_24016013\"           \"cargo_2035_240176e7\"          \n  [59] \"cargo_2035_24018829\"           \"cargo_2035_24019ac2\"          \n  [61] \"cargo_2035_240203ce\"           \"cargo_2035_240219d6\"          \n  [63] \"cargo_2035_24024728\"           \"cargo_2035_24029512\"          \n  [65] \"cargo_2035_24030096\"           \"cargo_2035_24031644\"          \n  [67] \"cargo_2035_240329d3\"           \"cargo_2035_24033f5a\"          \n  [69] \"cargo_2035_2403401c\"           \"cargo_2035_24035d6f\"          \n  [71] \"cargo_2035_24036bf2\"           \"cargo_2035_24040d7f\"          \n  [73] \"cargo_2035_240412f8\"           \"cargo_2035_2404289d\"          \n  [75] \"cargo_2035_24043519\"           \"cargo_2035_24044e53\"          \n  [77] \"cargo_2035_24045644\"           \"cargo_2035_2404657f\"          \n  [79] \"cargo_2035_24047415\"           \"cargo_2035_24048be0\"          \n  [81] \"cargo_2035_240491d9\"           \"cargo_2035_240505aa\"          \n  [83] \"cargo_2035_2405123d\"           \"cargo_2035_24052438\"          \n  [85] \"cargo_2035_24056bb2\"           \"cargo_2035_240579f7\"          \n  [87] \"cargo_2035_24058afe\"           \"cargo_2035_24059eec\"          \n  [89] \"cargo_2035_2406078b\"           \"cargo_2035_24061755\"          \n  [91] \"cargo_2035_2406298f\"           \"cargo_2035_2406345e\"          \n  [93] \"cargo_2035_240648fe\"           \"cargo_2035_24065ce6\"          \n  [95] \"cargo_2035_2406617c\"           \"cargo_2035_2406737e\"          \n  [97] \"cargo_2035_24078cf5\"           \"cargo_2035_24079d3d\"          \n  [99] \"cargo_2035_24082aed\"           \"cargo_2035_2408320d\"          \n [101] \"cargo_2035_240849ef\"           \"cargo_2035_2408538f\"          \n [103] \"cargo_2035_24086289\"           \"cargo_2035_24087a28\"          \n [105] \"cargo_2035_240887f6\"           \"cargo_2035_24089e1f\"          \n [107] \"cargo_2035_24090dbb\"           \"cargo_2035_24092ad2\"          \n [109] \"cargo_2035_240932fa\"           \"cargo_2035_24094ab9\"          \n [111] \"cargo_2035_24095b13\"           \"cargo_2035_24096e9c\"          \n [113] \"cargo_2035_24097aa8\"           \"cargo_2035_24098e61\"          \n [115] \"cargo_2035_24099b6f\"           \"cargo_2035_241000fc\"          \n [117] \"cargo_2035_24101869\"           \"cargo_2035_24103c21\"          \n [119] \"cargo_2035_241048fe\"           \"cargo_2035_24105eab\"          \n [121] \"cargo_2035_24106abd\"           \"cargo_2035_24107a93\"          \n [123] \"cargo_2035_24108b6f\"           \"cargo_2035_24110241\"          \n [125] \"cargo_2035_2411145a\"           \"cargo_2035_24112c1c\"          \n [127] \"cargo_2035_241140b0\"           \"cargo_2035_241214f4\"          \n [129] \"cargo_2035_24122981\"           \"cargo_2035_24123306\"          \n [131] \"cargo_2035_24125596\"           \"cargo_2035_241269e5\"          \n [133] \"cargo_2035_24127d30\"           \"cargo_2035_241280ea\"          \n [135] \"cargo_2035_2412976e\"           \"cargo_2035_24130899\"          \n [137] \"cargo_2035_24131cae\"           \"cargo_2035_24132a6a\"          \n [139] \"cargo_2035_24133ef7\"           \"cargo_2035_241344ef\"          \n [141] \"cargo_2035_24136513\"           \"cargo_2035_24143c1c\"          \n [143] \"cargo_2035_24146b8e\"           \"cargo_2035_24147edc\"          \n [145] \"cargo_2035_24149f6f\"           \"cargo_2035_24150215\"          \n [147] \"cargo_2035_241511c0\"           \"cargo_2035_2415252a\"          \n [149] \"cargo_2035_24153944\"           \"cargo_2035_2415421a\"          \n [151] \"cargo_2035_24155978\"           \"cargo_2035_241565dd\"          \n [153] \"cargo_2035_24157265\"           \"cargo_2035_241637d4\"          \n [155] \"cargo_2035_24168c56\"           \"cargo_2035_241693b6\"          \n [157] \"cargo_2035_24170a8e\"           \"cargo_2035_2417132a\"          \n [159] \"cargo_2035_241723f6\"           \"cargo_2035_24173837\"          \n [161] \"cargo_2035_241740cd\"           \"cargo_2035_24175b01\"          \n [163] \"cargo_2035_2417651e\"           \"cargo_2035_24177b78\"          \n [165] \"cargo_2035_24178a77\"           \"cargo_2035_24179925\"          \n [167] \"cargo_2035_24180e71\"           \"cargo_2035_241810e3\"          \n [169] \"cargo_2035_24182ef5\"           \"cargo_2035_24183f03\"          \n [171] \"cargo_2035_241844a4\"           \"cargo_2035_2418652e\"          \n [173] \"cargo_2035_24187721\"           \"cargo_2035_2418866f\"          \n [175] \"cargo_2035_24189cae\"           \"cargo_2035_24190e85\"          \n [177] \"cargo_2035_24191f4b\"           \"cargo_2035_241927a4\"          \n [179] \"cargo_2035_241938f4\"           \"cargo_2035_2419446e\"          \n [181] \"cargo_2035_24195202\"           \"cargo_2035_241976c3\"          \n [183] \"cargo_2035_241980ef\"           \"cargo_2035_24199833\"          \n [185] \"cargo_2035_242006b2\"           \"cargo_2035_242017e9\"          \n [187] \"cargo_2035_24202ea3\"           \"cargo_2035_24203172\"          \n [189] \"cargo_2035_24204b16\"           \"cargo_2035_24205ad5\"          \n [191] \"cargo_2035_24212926\"           \"cargo_2035_242146f7\"          \n [193] \"cargo_2035_242156fa\"           \"cargo_2035_24216888\"          \n [195] \"cargo_2035_24217795\"           \"cargo_2035_24218339\"          \n [197] \"cargo_2035_24219a45\"           \"cargo_2035_2422106f\"          \n [199] \"cargo_2035_24222070\"           \"cargo_2035_24223357\"          \n [201] \"cargo_2035_24225592\"           \"cargo_2035_242266ae\"          \n [203] \"cargo_2035_242287eb\"           \"cargo_2035_2423012c\"          \n [205] \"cargo_2035_24246b56\"           \"cargo_2035_24247763\"          \n [207] \"cargo_2035_24248ede\"           \"cargo_2035_242494c7\"          \n [209] \"cargo_2035_24251270\"           \"cargo_2035_2425272d\"          \n [211] \"cargo_2035_24253dc1\"           \"cargo_2035_2425453a\"          \n [213] \"cargo_2035_242556a3\"           \"cargo_2035_24256d41\"          \n [215] \"cargo_2035_2425718e\"           \"cargo_2035_242660d7\"          \n [217] \"cargo_2035_24267775\"           \"cargo_2035_2426886d\"          \n [219] \"cargo_2035_2426962e\"           \"cargo_2035_242701bc\"          \n [221] \"cargo_2035_242718b8\"           \"cargo_2035_24272b98\"          \n [223] \"cargo_2035_24273e66\"           \"cargo_2035_24274378\"          \n [225] \"cargo_2035_24275b2c\"           \"cargo_2035_24277072\"          \n [227] \"cargo_2035_24278f4c\"           \"cargo_2035_24279b99\"          \n [229] \"cargo_2035_24280a49\"           \"cargo_2035_242819ae\"          \n [231] \"cargo_2035_242827ef\"           \"cargo_2035_24283ebe\"          \n [233] \"cargo_2035_24284e13\"           \"cargo_2035_24285664\"          \n [235] \"cargo_2035_24286830\"           \"cargo_2035_24288930\"          \n [237] \"cargo_2035_24289d1d\"           \"cargo_2035_24290db0\"          \n [239] \"cargo_2035_24291ac7\"           \"cargo_2035_24298085\"          \n [241] \"cargo_2035_2429901f\"           \"cargo_2035_243088f4\"          \n [243] \"cargo_2035_24309db6\"           \"cargo_2035_2431048a\"          \n [245] \"cargo_2035_2431298a\"           \"cargo_2035_24313467\"          \n [247] \"cargo_2035_2431415f\"           \"cargo_2035_24318ce9\"          \n [249] \"cargo_2035_243198c9\"           \"cargo_2035_24320406\"          \n [251] \"cargo_2035_24321f11\"           \"cargo_2035_243226d5\"          \n [253] \"cargo_2035_2432331f\"           \"cargo_2035_24324010\"          \n [255] \"cargo_2035_24325a30\"           \"cargo_2035_24326871\"          \n [257] \"cargo_2035_243278e6\"           \"cargo_2035_2432850c\"          \n [259] \"cargo_2035_24329475\"           \"cargo_2035_24330402\"          \n [261] \"cargo_2035_243318e8\"           \"cargo_2035_243329ea\"          \n [263] \"cargo_2035_243358b3\"           \"cargo_2035_24336d35\"          \n [265] \"cargo_2035_24337a4d\"           \"cargo_2035_24338ac1\"          \n [267] \"cargo_2035_24339294\"           \"cargo_2035_24340e90\"          \n [269] \"cargo_2035_24341472\"           \"cargo_2035_24342cb7\"          \n [271] \"cargo_2035_243432bf\"           \"cargo_2035_243447ce\"          \n [273] \"cargo_2035_2434605b\"           \"cargo_2035_24347ad9\"          \n [275] \"cargo_2035_24348b57\"           \"cargo_2035_24349008\"          \n [277] \"cargo_2035_24350bad\"           \"cargo_2035_243514c8\"          \n [279] \"cargo_2035_2435287b\"           \"cargo_2035_243538de\"          \n [281] \"cargo_2035_243543d4\"           \"cargo_2035_2435598d\"          \n [283] \"cargo_2035_24357c60\"           \"cargo_2035_2435809d\"          \n [285] \"cargo_2035_2435997d\"           \"cargo_2035_24360628\"          \n [287] \"cargo_2035_2436144d\"           \"cargo_2035_243623c9\"          \n [289] \"cargo_2035_2436308a\"           \"cargo_2035_2436427e\"          \n [291] \"cargo_2035_24365501\"           \"cargo_2035_2436666a\"          \n [293] \"cargo_2035_2436859a\"           \"cargo_2035_24369c26\"          \n [295] \"cargo_2035_24370c3b\"           \"cargo_2035_24371185\"          \n [297] \"cargo_2035_2437257d\"           \"cargo_2035_24373741\"          \n [299] \"cargo_2035_243742d4\"           \"cargo_2035_2437580d\"          \n [301] \"cargo_2035_24376512\"           \"cargo_2035_2437731d\"          \n [303] \"cargo_2035_2437902a\"           \"cargo_2035_2438071f\"          \n [305] \"cargo_2035_24381760\"           \"cargo_2035_24382a3b\"          \n [307] \"cargo_2035_24383a57\"           \"cargo_2035_24384bd8\"          \n [309] \"cargo_2035_24385568\"           \"cargo_2035_24386404\"          \n [311] \"cargo_2035_24387006\"           \"cargo_2035_243885e7\"          \n [313] \"cargo_2035_243903ab\"           \"cargo_2035_24391e74\"          \n [315] \"cargo_2035_243928ee\"           \"cargo_2035_243938c2\"          \n [317] \"cargo_2035_24394a30\"           \"cargo_2035_24395939\"          \n [319] \"cargo_2035_2439600e\"           \"cargo_2035_24397c61\"          \n [321] \"cargo_2035_24398db8\"           \"cargo_2035_2439912f\"          \n [323] \"cargo_2035_244035bc\"           \"cargo_2035_2441371f\"          \n [325] \"cargo_2035_24414181\"           \"cargo_2035_24416295\"          \n [327] \"cargo_2035_24417fcb\"           \"cargo_2035_24418bbc\"          \n [329] \"cargo_2035_24419c31\"           \"cargo_2035_24420b4e\"          \n [331] \"cargo_2035_244210fb\"           \"cargo_2035_24430044\"          \n [333] \"cargo_2035_244396bc\"           \"cargo_2035_244400eb\"          \n [335] \"cargo_2035_244412f7\"           \"cargo_2035_2444256d\"          \n [337] \"cargo_2035_24443600\"           \"cargo_2035_24444001\"          \n [339] \"cargo_2035_24445936\"           \"cargo_2035_24446788\"          \n [341] \"cargo_2035_24447a02\"           \"cargo_2035_24448c2a\"          \n [343] \"cargo_2035_24449d57\"           \"cargo_2035_2445006b\"          \n [345] \"cargo_2035_2445184b\"           \"cargo_2035_24452374\"          \n [347] \"cargo_2035_24453e2d\"           \"cargo_2035_24454b6c\"          \n [349] \"cargo_2035_244558d2\"           \"cargo_2035_24456004\"          \n [351] \"cargo_2035_2445723e\"           \"cargo_2035_244583af\"          \n [353] \"cargo_2035_24459fc5\"           \"cargo_2035_2446072f\"          \n [355] \"cargo_2035_244611c8\"           \"cargo_2035_24462dc8\"          \n [357] \"cargo_2035_244652fe\"           \"cargo_2035_244669e8\"          \n [359] \"cargo_2035_24467c13\"           \"cargo_2035_24468105\"          \n [361] \"cargo_2035_24470784\"           \"cargo_2035_24471037\"          \n [363] \"cargo_2035_24472a84\"           \"cargo_2035_24473ffc\"          \n [365] \"cargo_2035_24476151\"           \"cargo_2035_24477419\"          \n [367] \"cargo_2035_244780a7\"           \"cargo_2035_24479ac7\"          \n [369] \"cargo_2035_24480aaf\"           \"cargo_2035_24489cfc\"          \n [371] \"cargo_2035_24490319\"           \"cargo_2035_244912ef\"          \n [373] \"cargo_2035_24492b79\"           \"cargo_2035_24493cb3\"          \n [375] \"cargo_2035_24494587\"           \"cargo_2035_24495f43\"          \n [377] \"cargo_2035_2449627a\"           \"cargo_2035_24497c26\"          \n [379] \"cargo_2035_24498d9d\"           \"cargo_2035_245009bf\"          \n [381] \"cargo_2035_24501b24\"           \"cargo_2035_24502114\"          \n [383] \"cargo_2035_24503d0b\"           \"cargo_2035_24504749\"          \n [385] \"cargo_2035_24505cca\"           \"cargo_2035_24515c89\"          \n [387] \"cargo_2035_24516a72\"           \"cargo_2035_24517490\"          \n [389] \"cargo_2035_24518b54\"           \"cargo_2035_24519a64\"          \n [391] \"cargo_2035_24520425\"           \"cargo_2035_245216c6\"          \n [393] \"cargo_2035_245225f9\"           \"cargo_2035_2452397d\"          \n [395] \"cargo_2035_24532325\"           \"cargo_2035_24533e9d\"          \n [397] \"cargo_2035_24534089\"           \"cargo_2035_24535535\"          \n [399] \"cargo_2035_24536591\"           \"cargo_2035_2453789c\"          \n [401] \"cargo_2035_2453848f\"           \"cargo_2035_24539e5a\"          \n [403] \"cargo_2035_2454042a\"           \"cargo_2035_245417aa\"          \n [405] \"cargo_2035_245426d1\"           \"cargo_2035_245433f5\"          \n [407] \"cargo_2035_24544d1b\"           \"cargo_2035_2454550a\"          \n [409] \"cargo_2035_2454600f\"           \"cargo_2035_24547cba\"          \n [411] \"cargo_2035_24548c4d\"           \"cargo_2035_24549aa1\"          \n [413] \"cargo_2035_2455085d\"           \"cargo_2035_24551570\"          \n [415] \"cargo_2035_24552e52\"           \"cargo_2035_24553cf4\"          \n [417] \"cargo_2035_24554063\"           \"cargo_2035_24555461\"          \n [419] \"cargo_2035_24556d68\"           \"cargo_2035_245573bc\"          \n [421] \"cargo_2035_24558974\"           \"cargo_2035_24559baf\"          \n [423] \"cargo_2035_24560bf0\"           \"cargo_2035_24561379\"          \n [425] \"cargo_2035_24562b52\"           \"cargo_2035_245637e4\"          \n [427] \"cargo_2035_245648fc\"           \"cargo_2035_24565818\"          \n [429] \"cargo_2035_245664b5\"           \"cargo_2035_2456752e\"          \n [431] \"cargo_2035_24568664\"           \"cargo_2035_24569c9b\"          \n [433] \"cargo_2035_24570183\"           \"cargo_2035_245710da\"          \n [435] \"cargo_2035_24572793\"           \"cargo_2035_24573973\"          \n [437] \"cargo_2035_24574eb5\"           \"cargo_2035_24575266\"          \n [439] \"cargo_2035_24576d01\"           \"cargo_2035_2457777f\"          \n [441] \"cargo_2035_24578ae0\"           \"cargo_2035_24579158\"          \n [443] \"cargo_2035_24580b1b\"           \"cargo_2035_24581970\"          \n [445] \"cargo_2035_24582d92\"           \"cargo_2035_24583736\"          \n [447] \"cargo_2035_24584c4b\"           \"cargo_2035_24585d02\"          \n [449] \"cargo_2035_24586366\"           \"cargo_2035_24587d08\"          \n [451] \"cargo_2035_24588b67\"           \"cargo_2035_245891bd\"          \n [453] \"cargo_2035_24590b3e\"           \"cargo_2035_24591b8d\"          \n [455] \"cargo_2035_245923da\"           \"cargo_2035_24593a0e\"          \n [457] \"cargo_2035_24594dc3\"           \"cargo_2035_24595b88\"          \n [459] \"cargo_2035_24596fc0\"           \"cargo_2035_2459771f\"          \n [461] \"cargo_2035_24598596\"           \"cargo_2035_24599c63\"          \n [463] \"cargo_2035_24600e8d\"           \"cargo_2035_2460180d\"          \n [465] \"cargo_2035_24602cbb\"           \"cargo_2035_246033c6\"          \n [467] \"cargo_2035_24604736\"           \"cargo_2035_2460534f\"          \n [469] \"cargo_2035_24606dc8\"           \"cargo_2035_24607886\"          \n [471] \"cargo_2035_246086ea\"           \"cargo_2035_246093f8\"          \n [473] \"cargo_2035_24610616\"           \"cargo_2035_246118a8\"          \n [475] \"cargo_2035_24612a55\"           \"cargo_2035_24613ae8\"          \n [477] \"cargo_2035_24614314\"           \"cargo_2035_246159a6\"          \n [479] \"cargo_2035_24620571\"           \"cargo_2035_24629e1c\"          \n [481] \"cargo_2035_24630ccf\"           \"cargo_2035_24631851\"          \n [483] \"cargo_2035_2463308e\"           \"cargo_2035_2463474f\"          \n [485] \"cargo_2035_2463514c\"           \"cargo_2035_24636403\"          \n [487] \"cargo_2035_24638362\"           \"cargo_2035_24639048\"          \n [489] \"cargo_2035_2464089a\"           \"cargo_2035_24641f89\"          \n [491] \"cargo_2035_24642cab\"           \"cargo_2035_246430d5\"          \n [493] \"cargo_2035_2464435d\"           \"cargo_2035_24645417\"          \n [495] \"cargo_2035_2464627f\"           \"cargo_2035_246470f6\"          \n [497] \"cargo_2035_24649458\"           \"cargo_2035_24650f4f\"          \n [499] \"cargo_2035_246513cf\"           \"cargo_2035_2465232e\"          \n [501] \"cargo_2035_24653e4e\"           \"cargo_2035_24654e34\"          \n [503] \"cargo_2035_24655751\"           \"cargo_2035_246562f8\"          \n [505] \"cargo_2035_24657e60\"           \"cargo_2035_24658c64\"          \n [507] \"cargo_2035_246609f6\"           \"cargo_2035_24667c13\"          \n [509] \"cargo_2035_246683e6\"           \"cargo_2035_246699cd\"          \n [511] \"cargo_2035_246700d7\"           \"cargo_2035_24671903\"          \n [513] \"cargo_2035_2467357f\"           \"cargo_2035_24674476\"          \n [515] \"cargo_2035_24675cfc\"           \"cargo_2035_2467601d\"          \n [517] \"cargo_2035_2467862b\"           \"cargo_2035_246792d0\"          \n [519] \"cargo_2035_24680a0b\"           \"cargo_2035_24681817\"          \n [521] \"cargo_2035_24682b36\"           \"cargo_2035_246833c0\"          \n [523] \"cargo_2035_24684e93\"           \"cargo_2035_24685fde\"          \n [525] \"cargo_2035_24686d17\"           \"cargo_2035_246874e7\"          \n [527] \"cargo_2035_24689667\"           \"cargo_2035_2469025b\"          \n [529] \"cargo_2035_24691107\"           \"cargo_2035_246922a6\"          \n [531] \"cargo_2035_2469383e\"           \"cargo_2035_246940bd\"          \n [533] \"cargo_2035_24695513\"           \"cargo_2035_246967f6\"          \n [535] \"cargo_2035_24703cd9\"           \"cargo_2035_247048ed\"          \n [537] \"cargo_2035_24705a40\"           \"cargo_2035_247064df\"          \n [539] \"cargo_2035_24707a15\"           \"cargo_2035_24708cbd\"          \n [541] \"cargo_2035_24709b09\"           \"cargo_2035_247100fa\"          \n [543] \"cargo_2035_24711d72\"           \"cargo_2035_24712cac\"          \n [545] \"cargo_2035_24713cb6\"           \"cargo_2035_24714139\"          \n [547] \"cargo_2035_24715bf7\"           \"cargo_2035_247160ea\"          \n [549] \"cargo_2035_24717b08\"           \"cargo_2035_24718653\"          \n [551] \"cargo_2035_247199e7\"           \"cargo_2035_24720d71\"          \n [553] \"cargo_2035_24721efa\"           \"cargo_2035_24722bbd\"          \n [555] \"cargo_2035_24723498\"           \"cargo_2035_247240bc\"          \n [557] \"cargo_2035_24725994\"           \"cargo_2035_24726882\"          \n [559] \"cargo_2035_24727bec\"           \"cargo_2035_247286ec\"          \n [561] \"cargo_2035_24729dff\"           \"cargo_2035_24730213\"          \n [563] \"cargo_2035_24731a1b\"           \"cargo_2035_24736c95\"          \n [565] \"cargo_2035_2474683e\"           \"cargo_2035_24747a78\"          \n [567] \"cargo_2035_2474845c\"           \"cargo_2035_24749505\"          \n [569] \"cargo_2035_2475032b\"           \"cargo_2035_24751d63\"          \n [571] \"cargo_2035_24752d8d\"           \"cargo_2035_2475323c\"          \n [573] \"cargo_2035_24754e3d\"           \"cargo_2035_24762824\"          \n [575] \"cargo_2035_2476579c\"           \"cargo_2035_2476692f\"          \n [577] \"cargo_2035_24767b97\"           \"cargo_2035_24768c2b\"          \n [579] \"cargo_2035_24769930\"           \"cargo_2035_24770ef8\"          \n [581] \"cargo_2035_24771740\"           \"cargo_2035_247721f4\"          \n [583] \"cargo_2035_24773431\"           \"cargo_2035_24774936\"          \n [585] \"cargo_2035_24775c13\"           \"cargo_2035_247761a7\"          \n [587] \"cargo_2035_24777367\"           \"cargo_2035_24778cef\"          \n [589] \"cargo_2035_24779f94\"           \"cargo_2035_24780f73\"          \n [591] \"cargo_2035_24781789\"           \"cargo_2035_24782db3\"          \n [593] \"cargo_2035_24783c85\"           \"cargo_2035_2478425c\"          \n [595] \"cargo_2035_24785547\"           \"cargo_2035_24786714\"          \n [597] \"cargo_2035_24787aaf\"           \"cargo_2035_24788b05\"          \n [599] \"cargo_2035_24797827\"           \"cargo_2035_247981aa\"          \n [601] \"cargo_2035_24799533\"           \"cargo_2035_2480008b\"          \n [603] \"cargo_2035_24801096\"           \"cargo_2035_24802f0a\"          \n [605] \"cargo_2035_248031c8\"           \"cargo_2035_2480442e\"          \n [607] \"cargo_2035_24805fa9\"           \"cargo_2035_248067a1\"          \n [609] \"cargo_2035_24807b07\"           \"cargo_2035_248081ba\"          \n [611] \"cargo_2035_2480987a\"           \"cargo_2035_24810539\"          \n [613] \"cargo_2035_248116c2\"           \"cargo_2035_24812d9c\"          \n [615] \"cargo_2035_24813799\"           \"cargo_2035_2481434d\"          \n [617] \"cargo_2035_24815f35\"           \"cargo_2035_248166c8\"          \n [619] \"cargo_2035_24817c04\"           \"cargo_2035_248186f4\"          \n [621] \"cargo_2035_24819223\"           \"cargo_2035_24820b01\"          \n [623] \"cargo_2035_24821249\"           \"cargo_2035_24822f21\"          \n [625] \"cargo_2035_2482365a\"           \"cargo_2035_24824023\"          \n [627] \"cargo_2035_2482594a\"           \"cargo_2035_24826203\"          \n [629] \"cargo_2035_248273c0\"           \"cargo_2035_2482842c\"          \n [631] \"cargo_2035_24830604\"           \"cargo_2035_248315d4\"          \n [633] \"cargo_2035_2483278c\"           \"cargo_2035_2483333c\"          \n [635] \"cargo_2035_248345bd\"           \"cargo_2035_24835f83\"          \n [637] \"cargo_2035_24836909\"           \"cargo_2035_24837fb7\"          \n [639] \"cargo_2035_248380c0\"           \"cargo_2035_248396e1\"          \n [641] \"cargo_2035_24841641\"           \"cargo_2035_24842a80\"          \n [643] \"cargo_2035_24843c93\"           \"cargo_2035_248443c0\"          \n [645] \"cargo_2035_24845d58\"           \"cargo_2035_24846146\"          \n [647] \"cargo_2035_24856b68\"           \"cargo_2035_248601b0\"          \n [649] \"cargo_2035_248615d0\"           \"cargo_2035_248628e8\"          \n [651] \"cargo_2035_24864757\"           \"cargo_2035_24865054\"          \n [653] \"cargo_2035_24867838\"           \"cargo_2035_24869511\"          \n [655] \"cargo_2035_24870e51\"           \"cargo_2035_248719c7\"          \n [657] \"cargo_2035_24873007\"           \"cargo_2035_2488299b\"          \n [659] \"cargo_2035_2488330c\"           \"cargo_2035_24884946\"          \n [661] \"cargo_2035_24885497\"           \"cargo_2035_24886540\"          \n [663] \"cargo_2035_24887f7a\"           \"cargo_2035_248887ca\"          \n [665] \"cargo_2035_2488936f\"           \"cargo_2035_24890253\"          \n [667] \"cargo_2035_24891edd\"           \"cargo_2035_2489229e\"          \n [669] \"cargo_2035_24893301\"           \"cargo_2035_248940fe\"          \n [671] \"cargo_2035_24895628\"           \"cargo_2035_24896735\"          \n [673] \"cargo_2035_24897bc9\"           \"cargo_2035_2489871c\"          \n [675] \"cargo_2035_248994de\"           \"cargo_2035_24900db8\"          \n [677] \"cargo_2035_24901e53\"           \"cargo_2035_249026dc\"          \n [679] \"cargo_2035_24903504\"           \"cargo_2035_249049aa\"          \n [681] \"cargo_2035_249054b0\"           \"cargo_2035_249064db\"          \n [683] \"cargo_2035_24907fba\"           \"cargo_2035_24908db7\"          \n [685] \"cargo_2035_24909e7e\"           \"cargo_2035_24910fe6\"          \n [687] \"cargo_2035_24911413\"           \"cargo_2035_249126e4\"          \n [689] \"cargo_2035_24913699\"           \"cargo_2035_249144c2\"          \n [691] \"cargo_2035_249151e5\"           \"cargo_2035_2491656a\"          \n [693] \"cargo_2035_2491771b\"           \"cargo_2035_24918446\"          \n [695] \"cargo_2035_24919c54\"           \"cargo_2035_24920107\"          \n [697] \"cargo_2035_249211b8\"           \"cargo_2035_249227f8\"          \n [699] \"cargo_2035_24923229\"           \"cargo_2035_24924b2f\"          \n [701] \"cargo_2035_24925592\"           \"cargo_2035_24926945\"          \n [703] \"cargo_2035_249279ed\"           \"cargo_2035_24928c4e\"          \n [705] \"cargo_2035_249376a2\"           \"cargo_2035_24948a7e\"          \n [707] \"cargo_2035_2494981d\"           \"cargo_2035_24950c2b\"          \n [709] \"cargo_2035_24951b0d\"           \"cargo_2035_2495237b\"          \n [711] \"cargo_2035_249530bf\"           \"cargo_2035_249545bd\"          \n [713] \"cargo_2035_2495590b\"           \"cargo_2035_24956173\"          \n [715] \"cargo_2035_2495734c\"           \"cargo_2035_249586eb\"          \n [717] \"cargo_2035_249599d9\"           \"cargo_2035_249600fa\"          \n [719] \"cargo_2035_2496112e\"           \"cargo_2035_24962b83\"          \n [721] \"cargo_2035_24963dcb\"           \"cargo_2035_249644e4\"          \n [723] \"cargo_2035_24965df2\"           \"cargo_2035_24966eac\"          \n [725] \"cargo_2035_24967a51\"           \"cargo_2035_24968b44\"          \n [727] \"cargo_2035_24969979\"           \"cargo_2035_24970172\"          \n [729] \"cargo_2035_249716bb\"           \"cargo_2035_249729d4\"          \n [731] \"cargo_2035_2497357e\"           \"cargo_2035_24974146\"          \n [733] \"cargo_2035_24975494\"           \"cargo_2035_2497699d\"          \n [735] \"cargo_2035_24977d42\"           \"cargo_2035_24978bbb\"          \n [737] \"cargo_2035_249790c7\"           \"cargo_2035_24980adf\"          \n [739] \"cargo_2035_2498109b\"           \"cargo_2035_24982ae9\"          \n [741] \"cargo_2035_24983403\"           \"cargo_2035_249846ef\"          \n [743] \"cargo_2035_24985491\"           \"cargo_2035_2498656c\"          \n [745] \"cargo_2035_24987678\"           \"cargo_2035_249884c2\"          \n [747] \"cargo_2035_24989440\"           \"cargo_2035_24990028\"          \n [749] \"cargo_2035_249913f3\"           \"cargo_2035_24992d21\"          \n [751] \"cargo_2035_2499386c\"           \"cargo_2035_249954f8\"          \n [753] \"cargo_2035_25004e40\"           \"cargo_2035_2500531d\"          \n [755] \"cargo_2035_25006809\"           \"cargo_2035_25007c94\"          \n [757] \"cargo_2035_25008ef4\"           \"cargo_2035_2500969c\"          \n [759] \"cargo_2035_250109ce\"           \"cargo_2035_25011181\"          \n [761] \"cargo_2035_25012e23\"           \"cargo_2035_25013a32\"          \n [763] \"cargo_2035_2501441c\"           \"cargo_2035_250151e9\"          \n [765] \"cargo_2035_25016256\"           \"cargo_2035_25017837\"          \n [767] \"cargo_2035_250181f1\"           \"cargo_2035_250198ca\"          \n [769] \"cargo_2035_25020029\"           \"cargo_2035_25021798\"          \n [771] \"cargo_2035_25022d69\"           \"cargo_2035_25023899\"          \n [773] \"cargo_2035_2502450d\"           \"cargo_2035_2502591f\"          \n [775] \"cargo_2035_25030adb\"           \"cargo_2035_25037eed\"          \n [777] \"cargo_2035_25038750\"           \"cargo_2035_250390fb\"          \n [779] \"cargo_2035_25040146\"           \"cargo_2035_2504146c\"          \n [781] \"cargo_2035_2504288d\"           \"cargo_2035_25043736\"          \n [783] \"cargo_2035_250456a2\"           \"cargo_2035_25046aad\"          \n [785] \"cargo_2035_25047c63\"           \"cargo_2035_2504813e\"          \n [787] \"cargo_2035_25050772\"           \"cargo_2035_2505143d\"          \n [789] \"cargo_2035_25052112\"           \"cargo_2035_2505467c\"          \n [791] \"cargo_2035_25063b2c\"           \"cargo_2035_25064c07\"          \n [793] \"cargo_2035_2506569a\"           \"cargo_2035_250666c1\"          \n [795] \"cargo_2035_25067560\"           \"cargo_2035_25068f83\"          \n [797] \"cargo_2035_2506900e\"           \"cargo_2035_250710f3\"          \n [799] \"cargo_2035_250722fe\"           \"cargo_2035_2507376e\"          \n [801] \"cargo_2035_25074103\"           \"cargo_2035_25075d07\"          \n [803] \"cargo_2035_250765f2\"           \"cargo_2035_25077210\"          \n [805] \"cargo_2035_2507818c\"           \"cargo_2035_25079aad\"          \n [807] \"cargo_2035_25080e52\"           \"cargo_2035_250823be\"          \n [809] \"cargo_2035_25083f17\"           \"cargo_2035_2508454d\"          \n [811] \"cargo_2035_250854ef\"           \"cargo_2035_2508606f\"          \n [813] \"cargo_2035_250876ae\"           \"cargo_2035_250883d0\"          \n [815] \"cargo_2035_250895c5\"           \"cargo_2035_250908ba\"          \n [817] \"cargo_2035_25091711\"           \"cargo_2035_25093b88\"          \n [819] \"cargo_2035_25094cb0\"           \"cargo_2035_25095618\"          \n [821] \"cargo_2035_2509676b\"           \"cargo_2035_25097cf5\"          \n [823] \"cargo_2035_2509822f\"           \"cargo_2035_25099adb\"          \n [825] \"cargo_2035_25100a96\"           \"cargo_2035_251011a8\"          \n [827] \"cargo_2035_25102d34\"           \"cargo_2035_25104023\"          \n [829] \"cargo_2035_25105ed0\"           \"cargo_2035_25106ea3\"          \n [831] \"cargo_2035_25112180\"           \"cargo_2035_25113c59\"          \n [833] \"cargo_2035_25114bf3\"           \"cargo_2035_25115f55\"          \n [835] \"cargo_2035_25116f98\"           \"cargo_2035_251173df\"          \n [837] \"cargo_2035_251187a2\"           \"cargo_2035_2511982a\"          \n [839] \"cargo_2035_2512069c\"           \"cargo_2035_2512126b\"          \n [841] \"cargo_2035_251229a9\"           \"cargo_2035_25123e60\"          \n [843] \"cargo_2035_25124641\"           \"cargo_2035_25125f88\"          \n [845] \"cargo_2035_2512671e\"           \"cargo_2035_251275b8\"          \n [847] \"cargo_2035_25128e01\"           \"cargo_2035_25129f83\"          \n [849] \"cargo_2035_251309fa\"           \"cargo_2035_25131c86\"          \n [851] \"cargo_2035_25132413\"           \"cargo_2035_251339c6\"          \n [853] \"cargo_2035_25134cf2\"           \"cargo_2035_2513589e\"          \n [855] \"cargo_2035_251363f8\"           \"cargo_2035_251376fe\"          \n [857] \"cargo_2035_251387eb\"           \"cargo_2035_251391b6\"          \n [859] \"cargo_2035_251408e6\"           \"cargo_2035_251419c4\"          \n [861] \"cargo_2035_25142d1d\"           \"cargo_2035_25143476\"          \n [863] \"cargo_2035_25144a7f\"           \"cargo_2035_2514549b\"          \n [865] \"cargo_2035_25146e59\"           \"cargo_2035_25147c9f\"          \n [867] \"cargo_2035_251485d1\"           \"cargo_2035_251492bf\"          \n [869] \"cargo_2035_25150c7e\"           \"cargo_2035_25151592\"          \n [871] \"cargo_2035_25152f02\"           \"cargo_2035_251537fc\"          \n [873] \"cargo_2035_2515430e\"           \"cargo_2035_25155243\"          \n [875] \"cargo_2035_251563a4\"           \"cargo_2035_25157a44\"          \n [877] \"cargo_2035_251585b7\"           \"cargo_2035_2515938f\"          \n [879] \"cargo_2035_25160cbd\"           \"cargo_2035_251619d9\"          \n [881] \"cargo_2035_25162c77\"           \"cargo_2035_25163b6b\"          \n [883] \"cargo_2035_25164694\"           \"cargo_2035_25165610\"          \n [885] \"cargo_2035_251667de\"           \"cargo_2035_2516764f\"          \n [887] \"cargo_2035_251684f8\"           \"cargo_2035_251691ce\"          \n [889] \"cargo_2035_25170e0d\"           \"cargo_2035_25171d8f\"          \n [891] \"cargo_2035_251720cb\"           \"cargo_2035_25173ebe\"          \n [893] \"cargo_2035_2517482e\"           \"cargo_2035_25175d52\"          \n [895] \"cargo_2035_251767f5\"           \"cargo_2035_251779bf\"          \n [897] \"cargo_2035_25178b01\"           \"cargo_2035_25179673\"          \n [899] \"cargo_2035_25180a30\"           \"cargo_2035_25181926\"          \n [901] \"cargo_2035_25182f61\"           \"cargo_2035_25183d41\"          \n [903] \"cargo_2035_251848e6\"           \"cargo_2035_2518553e\"          \n [905] \"cargo_2035_251865aa\"           \"cargo_2035_25187836\"          \n [907] \"cargo_2035_251884aa\"           \"cargo_2035_251899b1\"          \n [909] \"cargo_2035_251901b5\"           \"cargo_2035_2519114d\"          \n [911] \"cargo_2035_25192f73\"           \"cargo_2035_25193314\"          \n [913] \"cargo_2035_2519433c\"           \"cargo_2035_25195f6c\"          \n [915] \"cargo_2035_25196584\"           \"cargo_2035_25200753\"          \n [917] \"cargo_2035_25207162\"           \"cargo_2035_25208d8a\"          \n [919] \"cargo_2035_25209607\"           \"cargo_2035_252101d8\"          \n [921] \"cargo_2035_252118d9\"           \"cargo_2035_2521292f\"          \n [923] \"cargo_2035_25213839\"           \"cargo_2035_25214b24\"          \n [925] \"cargo_2035_252159b4\"           \"cargo_2035_25216707\"          \n [927] \"cargo_2035_25217c5e\"           \"cargo_2035_25218b47\"          \n [929] \"cargo_2035_252198b4\"           \"cargo_2035_25220e0f\"          \n [931] \"cargo_2035_25221e81\"           \"cargo_2035_25222c51\"          \n [933] \"cargo_2035_25223ff1\"           \"cargo_2035_25224798\"          \n [935] \"cargo_2035_2522591d\"           \"cargo_2035_2522683a\"          \n [937] \"cargo_2035_252271b1\"           \"cargo_2035_25228b0e\"          \n [939] \"cargo_2035_25229c36\"           \"cargo_2035_25230171\"          \n [941] \"cargo_2035_25231e91\"           \"cargo_2035_2523252d\"          \n [943] \"cargo_2035_2523330f\"           \"cargo_2035_25234034\"          \n [945] \"cargo_2035_25235555\"           \"cargo_2035_25236525\"          \n [947] \"cargo_2035_25237e08\"           \"cargo_2035_252386b5\"          \n [949] \"cargo_2035_252398e0\"           \"cargo_2035_25240f28\"          \n [951] \"cargo_2035_2524172f\"           \"cargo_2035_25242d7d\"          \n [953] \"cargo_2035_25243b5b\"           \"cargo_2035_25244ca0\"          \n [955] \"cargo_2035_252452b7\"           \"cargo_2035_2524689b\"          \n [957] \"cargo_2035_25247eaf\"           \"cargo_2035_25248641\"          \n [959] \"cargo_2035_25249085\"           \"cargo_2035_25250f48\"          \n [961] \"cargo_2035_25251ce8\"           \"cargo_2035_25252198\"          \n [963] \"cargo_2035_25253bfc\"           \"cargo_2035_2525404e\"          \n [965] \"cargo_2035_252624a2\"           \"cargo_2035_252651bf\"          \n [967] \"cargo_2035_2526694d\"           \"cargo_2035_25267308\"          \n [969] \"cargo_2035_252685d8\"           \"cargo_2035_25269aed\"          \n [971] \"cargo_2035_25270e83\"           \"cargo_2035_252717b1\"          \n [973] \"cargo_2035_252729bc\"           \"cargo_2035_25273954\"          \n [975] \"cargo_2035_252749fb\"           \"cargo_2035_25280ece\"          \n [977] \"cargo_2035_25291b11\"           \"cargo_2035_2529486d\"          \n [979] \"cargo_2035_25295a57\"           \"cargo_2035_25296d3c\"          \n [981] \"cargo_2035_252979a2\"           \"cargo_2035_25298b39\"          \n [983] \"cargo_2035_252997d0\"           \"cargo_2035_25300f58\"          \n [985] \"cargo_2035_25301943\"           \"cargo_2035_253027d7\"          \n [987] \"cargo_2035_2530371e\"           \"cargo_2035_25304f66\"          \n [989] \"cargo_2035_25305759\"           \"cargo_2035_25306a04\"          \n [991] \"cargo_2035_25307872\"           \"cargo_2035_25308546\"          \n [993] \"cargo_2035_253097c8\"           \"cargo_2035_253101ac\"          \n [995] \"cargo_2035_2531154d\"           \"cargo_2035_25312985\"          \n [997] \"cargo_2035_25313694\"           \"cargo_2035_25314e13\"          \n [999] \"cargo_2035_253157f8\"           \"cargo_2035_2531697a\"          \n[1001] \"cargo_2035_253179ba\"           \"cargo_2035_25318b67\"          \n[1003] \"cargo_2035_25319e85\"           \"cargo_2035_25320ede\"          \n[1005] \"cargo_2035_25321a14\"           \"cargo_2035_25322deb\"          \n[1007] \"cargo_2035_25323abd\"           \"cargo_2035_25324213\"          \n[1009] \"cargo_2035_25325fbb\"           \"cargo_2035_25326fb5\"          \n[1011] \"cargo_2035_253279d2\"           \"cargo_2035_25328f66\"          \n[1013] \"cargo_2035_25329b7e\"           \"cargo_2035_25330c11\"          \n[1015] \"cargo_2035_25331137\"           \"cargo_2035_253322d9\"          \n[1017] \"cargo_2035_25333fed\"           \"cargo_2035_25334b9e\"          \n[1019] \"cargo_2035_253351f8\"           \"cargo_2035_253367e3\"          \n[1021] \"cargo_2035_25337827\"           \"cargo_2035_25338da8\"          \n[1023] \"cargo_2035_25339394\"           \"cargo_2035_253405d8\"          \n[1025] \"cargo_2035_25341bfe\"           \"cargo_2035_25342c84\"          \n[1027] \"cargo_2035_25343ba4\"           \"cargo_2035_25344657\"          \n[1029] \"cargo_2035_25345a4d\"           \"cargo_2035_253465e2\"          \n[1031] \"cargo_2035_25347cd5\"           \"cargo_2035_25348083\"          \n[1033] \"cargo_2035_253493b5\"           \"cargo_2035_25350145\"          \n[1035] \"cargo_2035_25351d51\"           \"cargo_2035_2535247e\"          \n[1037] \"cargo_2035_25353f2b\"           \"cargo_2035_253545ff\"          \n[1039] \"cargo_2035_25355a9b\"           \"cargo_2035_25356cb8\"          \n[1041] \"cargo_2035_25357642\"           \"cargo_2035_25358b93\"          \n[1043] \"cargo_2035_2535901c\"           \"cargo_2035_25360915\"          \n[1045] \"cargo_2035_2536168c\"           \"cargo_2035_2536256f\"          \n[1047] \"cargo_2035_25363a5a\"           \"cargo_2035_25364f7d\"          \n[1049] \"cargo_2035_25365154\"           \"cargo_2035_25366c72\"          \n[1051] \"cargo_2035_253672f7\"           \"cargo_2035_25368bed\"          \n[1053] \"cargo_2035_25369512\"           \"cargo_2035_25370005\"          \n[1055] \"cargo_2035_25371c1d\"           \"cargo_2035_25372727\"          \n[1057] \"cargo_2035_253730f6\"           \"cargo_2035_25374fdc\"          \n[1059] \"cargo_2035_253754b2\"           \"cargo_2035_25376780\"          \n[1061] \"cargo_2035_253778c7\"           \"cargo_2035_25378b17\"          \n[1063] \"cargo_2035_253797f7\"           \"cargo_2035_253803a8\"          \n[1065] \"cargo_2035_25381199\"           \"cargo_2035_253822af\"          \n[1067] \"cargo_2035_25383f86\"           \"cargo_2035_2538457f\"          \n[1069] \"cargo_2035_25385a5e\"           \"cargo_2035_253865fc\"          \n[1071] \"cargo_2035_25387aec\"           \"cargo_2035_25388926\"          \n[1073] \"cargo_2035_25389203\"           \"cargo_2035_25390349\"          \n[1075] \"cargo_2035_253910aa\"           \"cargo_2035_25392443\"          \n[1077] \"cargo_2035_253931aa\"           \"cargo_2035_25394dd8\"          \n[1079] \"cargo_2035_253951a4\"           \"cargo_2035_253962d4\"          \n[1081] \"cargo_2035_25397c9e\"           \"cargo_2035_25398c54\"          \n[1083] \"cargo_2035_253995c4\"           \"cargo_2035_25400572\"          \n[1085] \"cargo_2035_25401a44\"           \"cargo_2035_25402112\"          \n[1087] \"cargo_2035_25403e01\"           \"cargo_2035_25404e85\"          \n[1089] \"cargo_2035_25405481\"           \"cargo_2035_25406576\"          \n[1091] \"cargo_2035_25407174\"           \"cargo_2035_254080de\"          \n[1093] \"cargo_2035_25409c6b\"           \"cargo_2035_2541043a\"          \n[1095] \"cargo_2035_2541148f\"           \"cargo_2035_2541282d\"          \n[1097] \"cargo_2035_25413456\"           \"cargo_2035_254145f6\"          \n[1099] \"cargo_2035_25415e14\"           \"cargo_2035_25416e22\"          \n[1101] \"cargo_2035_25417114\"           \"cargo_2035_25418293\"          \n[1103] \"cargo_2035_25419db3\"           \"cargo_2035_25420363\"          \n[1105] \"cargo_2035_25421e17\"           \"cargo_2035_25422bfc\"          \n[1107] \"cargo_2035_25423857\"           \"cargo_2035_254246f7\"          \n[1109] \"cargo_2035_25425a03\"           \"cargo_2035_254260cd\"          \n[1111] \"cargo_2035_254275a1\"           \"cargo_2035_254280fa\"          \n[1113] \"cargo_2035_254292df\"           \"cargo_2035_25430b47\"          \n[1115] \"cargo_2035_25431e0e\"           \"cargo_2035_25432ecf\"          \n[1117] \"cargo_2035_25433c7f\"           \"cargo_2035_25434d71\"          \n[1119] \"cargo_2035_25435394\"           \"cargo_2035_25444ba2\"          \n[1121] \"cargo_2035_25447a3b\"           \"cargo_2035_25448822\"          \n[1123] \"cargo_2035_25449647\"           \"cargo_2035_25450484\"          \n[1125] \"cargo_2035_25452681\"           \"cargo_2035_25453831\"          \n[1127] \"cargo_2035_25454111\"           \"cargo_2035_25456e6e\"          \n[1129] \"cargo_2035_25457d1c\"           \"cargo_2035_25458da2\"          \n[1131] \"cargo_2035_254593dc\"           \"cargo_2035_25460af7\"          \n[1133] \"cargo_2035_25461d27\"           \"cargo_2035_254639fb\"          \n[1135] \"cargo_2035_25464169\"           \"cargo_2035_25465012\"          \n[1137] \"cargo_2035_2546613a\"           \"cargo_2035_2547263c\"          \n[1139] \"cargo_2035_25479eba\"           \"cargo_2035_254808c1\"          \n[1141] \"cargo_2035_25481f51\"           \"cargo_2035_25483240\"          \n[1143] \"cargo_2035_25484742\"           \"cargo_2035_2548698c\"          \n[1145] \"cargo_2035_25487a3b\"           \"cargo_2035_25488e7c\"          \n[1147] \"cargo_2035_254890ad\"           \"cargo_2035_25490343\"          \n[1149] \"cargo_2035_254916b4\"           \"cargo_2035_25492057\"          \n[1151] \"cargo_2035_25493588\"           \"cargo_2035_25494e4d\"          \n[1153] \"cargo_2035_25495f9e\"           \"cargo_2035_2549786d\"          \n[1155] \"cargo_2035_25498de0\"           \"cargo_2035_254994ba\"          \n[1157] \"cargo_2035_255008bc\"           \"cargo_2035_2550193d\"          \n[1159] \"cargo_2035_25502143\"           \"cargo_2035_255033bc\"          \n[1161] \"cargo_2035_2550497c\"           \"cargo_2035_25514ecd\"          \n[1163] \"cargo_2035_2551555d\"           \"cargo_2035_25516d73\"          \n[1165] \"cargo_2035_2551704b\"           \"cargo_2035_25519c57\"          \n[1167] \"cargo_2035_25520e56\"           \"cargo_2035_25521a67\"          \n[1169] \"cargo_2035_255223f2\"           \"cargo_2035_2552461d\"          \n[1171] \"cargo_2035_25525a53\"           \"cargo_2035_25527058\"          \n[1173] \"cargo_2035_25528802\"           \"cargo_2035_25536380\"          \n[1175] \"cargo_2035_25537446\"           \"cargo_2035_25539724\"          \n[1177] \"cargo_2035_25540ac0\"           \"cargo_2035_25541209\"          \n[1179] \"cargo_2035_25542857\"           \"cargo_2035_255435e8\"          \n[1181] \"cargo_2035_255457b0\"           \"cargo_2035_25546307\"          \n[1183] \"cargo_2035_2554852c\"           \"cargo_2035_25550e4c\"          \n[1185] \"cargo_2035_2555115c\"           \"cargo_2035_2555214c\"          \n[1187] \"cargo_2035_25553a7e\"           \"cargo_2035_2555509b\"          \n[1189] \"cargo_2035_2555662d\"           \"cargo_2035_25557237\"          \n[1191] \"cargo_2035_25568335\"           \"cargo_2035_255698d7\"          \n[1193] \"cargo_2035_255701ce\"           \"cargo_2035_2557179a\"          \n[1195] \"cargo_2035_25572d67\"           \"cargo_2035_25573cc1\"          \n[1197] \"cargo_2035_25574502\"           \"cargo_2035_25575445\"          \n[1199] \"cargo_2035_25577e26\"           \"cargo_2035_25578e75\"          \n[1201] \"cargo_2035_2557937d\"           \"cargo_2035_25580746\"          \n[1203] \"cargo_2035_25581498\"           \"cargo_2035_25582e91\"          \n[1205] \"cargo_2035_25583184\"           \"cargo_2035_255840ad\"          \n[1207] \"cargo_2035_255858c8\"           \"cargo_2035_25586f4e\"          \n[1209] \"cargo_2035_25588818\"           \"cargo_2035_25589ca9\"          \n[1211] \"cargo_2035_25597273\"           \"cargo_2035_255981d1\"          \n[1213] \"cargo_2035_25599807\"           \"cargo_2035_256002bf\"          \n[1215] \"cargo_2035_2560106b\"           \"cargo_2035_25602c3a\"          \n[1217] \"cargo_2035_2560364c\"           \"cargo_2035_2560405b\"          \n[1219] \"cargo_2035_256058f0\"           \"cargo_2035_25606743\"          \n[1221] \"cargo_2035_256083f1\"           \"cargo_2035_2560959b\"          \n[1223] \"cargo_2035_25610b0f\"           \"cargo_2035_256110f4\"          \n[1225] \"cargo_2035_25612ec3\"           \"cargo_2035_25613bab\"          \n[1227] \"cargo_2035_256144ef\"           \"cargo_2035_25615a5a\"          \n[1229] \"cargo_2035_25616d3d\"           \"cargo_2035_25617d8b\"          \n[1231] \"cargo_2035_2561922c\"           \"cargo_2035_25620fa8\"          \n[1233] \"cargo_2035_2562161d\"           \"cargo_2035_25622998\"          \n[1235] \"cargo_2035_256236db\"           \"cargo_2035_25624930\"          \n[1237] \"cargo_2035_25632fa6\"           \"cargo_2035_2564139d\"          \n[1239] \"cargo_2035_25643a47\"           \"cargo_2035_25644d6f\"          \n[1241] \"cargo_2035_25645f96\"           \"cargo_2035_25646c6a\"          \n[1243] \"cargo_2035_25647158\"           \"cargo_2035_25648081\"          \n[1245] \"cargo_2035_25649fbc\"           \"cargo_2035_2565018d\"          \n[1247] \"cargo_2035_25651899\"           \"cargo_2035_25652355\"          \n[1249] \"cargo_2035_25653f4a\"           \"cargo_2035_2565467f\"          \n[1251] \"cargo_2035_25655326\"           \"cargo_2035_25656b65\"          \n[1253] \"cargo_2035_25659a39\"           \"cargo_2035_25660438\"          \n[1255] \"cargo_2035_256612ab\"           \"cargo_2035_25662733\"          \n[1257] \"cargo_2035_2566354d\"           \"cargo_2035_25664b65\"          \n[1259] \"cargo_2035_25666f7e\"           \"cargo_2035_25667486\"          \n[1261] \"cargo_2035_256688f1\"           \"cargo_2035_25670262\"          \n[1263] \"cargo_2035_25671fe1\"           \"cargo_2035_25672507\"          \n[1265] \"cargo_2035_25673f2b\"           \"cargo_2035_25674e25\"          \n[1267] \"cargo_2035_256835ef\"           \"cargo_2035_2568402a\"          \n[1269] \"cargo_2035_25685545\"           \"cargo_2035_25686e07\"          \n[1271] \"cargo_2035_25687f46\"           \"cargo_2035_25688043\"          \n[1273] \"cargo_2035_25689431\"           \"cargo_2035_256903e9\"          \n[1275] \"cargo_2035_2569195a\"           \"cargo_2035_25692115\"          \n[1277] \"cargo_2035_25694349\"           \"cargo_2035_25695be6\"          \n[1279] \"cargo_2035_25696b7e\"           \"cargo_2035_2569701c\"          \n[1281] \"cargo_2035_2569954a\"           \"cargo_2035_25700195\"          \n[1283] \"cargo_2035_25706ccd\"           \"cargo_2035_2570957c\"          \n[1285] \"cargo_2035_25710a16\"           \"cargo_2035_25711c52\"          \n[1287] \"cargo_2035_25712d9f\"           \"cargo_2035_25713158\"          \n[1289] \"cargo_2035_25714117\"           \"cargo_2035_257150d5\"          \n[1291] \"cargo_2035_2571661c\"           \"cargo_2035_25717a6d\"          \n[1293] \"cargo_2035_2571805c\"           \"cargo_2035_257205f9\"          \n[1295] \"cargo_2035_25721b55\"           \"cargo_2035_25722f31\"          \n[1297] \"cargo_2035_25723937\"           \"cargo_2035_2572416f\"          \n[1299] \"cargo_2035_25725caa\"           \"cargo_2035_25726386\"          \n[1301] \"cargo_2035_25727e41\"           \"cargo_2035_25728f42\"          \n[1303] \"cargo_2035_25729955\"           \"cargo_2035_257318ee\"          \n[1305] \"cargo_2035_257323b3\"           \"cargo_2035_257336c7\"          \n[1307] \"cargo_2035_257344e7\"           \"cargo_2035_25735fbc\"          \n[1309] \"cargo_2035_257360c1\"           \"cargo_2035_25737d67\"          \n[1311] \"cargo_2035_25738e52\"           \"cargo_2035_25739081\"          \n[1313] \"cargo_2035_25740ed2\"           \"cargo_2035_25742017\"          \n[1315] \"cargo_2035_25743efc\"           \"cargo_2035_25744b77\"          \n[1317] \"cargo_2035_25745d4d\"           \"cargo_2035_257460e9\"          \n[1319] \"cargo_2035_2575401e\"           \"cargo_2035_25755207\"          \n[1321] \"cargo_2035_25756033\"           \"cargo_2035_25757bf8\"          \n[1323] \"cargo_2035_25758843\"           \"cargo_2035_25759ce3\"          \n[1325] \"cargo_2035_2576051f\"           \"cargo_2035_25761ae7\"          \n[1327] \"cargo_2035_2576224d\"           \"cargo_2035_2576374a\"          \n[1329] \"cargo_2035_25765830\"           \"cargo_2035_25766383\"          \n[1331] \"cargo_2035_257670e0\"           \"cargo_2035_25768b4f\"          \n[1333] \"cargo_2035_25769b01\"           \"cargo_2035_25770ada\"          \n[1335] \"cargo_2035_25780e0d\"           \"cargo_2035_25781e1e\"          \n[1337] \"cargo_2035_257822d4\"           \"cargo_2035_25783f15\"          \n[1339] \"cargo_2035_257846b4\"           \"cargo_2035_25785665\"          \n[1341] \"cargo_2035_25787307\"           \"cargo_2035_2578886a\"          \n[1343] \"cargo_2035_25790463\"           \"cargo_2035_25792364\"          \n[1345] \"cargo_2035_25793fbf\"           \"cargo_2035_257940f5\"          \n[1347] \"cargo_2035_25795c03\"           \"cargo_2035_2579665c\"          \n[1349] \"cargo_2035_25811c17\"           \"cargo_2035_258127bd\"          \n[1351] \"cargo_2035_25813d36\"           \"cargo_2035_258149f2\"          \n[1353] \"cargo_2035_258162f6\"           \"cargo_2035_25817c54\"          \n[1355] \"cargo_2035_258182ea\"           \"cargo_2035_25819234\"          \n[1357] \"cargo_2035_258200b2\"           \"cargo_2035_258217f3\"          \n[1359] \"cargo_2035_25822a90\"           \"cargo_2035_2582374f\"          \n[1361] \"cargo_2035_25824351\"           \"cargo_2035_258259b1\"          \n[1363] \"cargo_2035_2582761d\"           \"cargo_2035_25828070\"          \n[1365] \"cargo_2035_25829324\"           \"cargo_2035_25830628\"          \n[1367] \"cargo_2035_2583169d\"           \"cargo_2035_25832ea4\"          \n[1369] \"cargo_2035_258334f4\"           \"cargo_2035_2583471d\"          \n[1371] \"cargo_2035_25835f67\"           \"cargo_2035_2583619d\"          \n[1373] \"cargo_2035_2583810a\"           \"cargo_2035_25839afd\"          \n[1375] \"cargo_2035_258408b5\"           \"cargo_2035_25841300\"          \n[1377] \"cargo_2035_25842aa1\"           \"cargo_2035_25843a69\"          \n[1379] \"cargo_2035_2584468a\"           \"cargo_2035_25845b7f\"          \n[1381] \"cargo_2035_258460cd\"           \"cargo_2035_2584736a\"          \n[1383] \"cargo_2035_25855618\"           \"cargo_2035_25856dd4\"          \n[1385] \"cargo_2035_25857b33\"           \"cargo_2035_258586a0\"          \n[1387] \"cargo_2035_25859957\"           \"cargo_2035_258607e2\"          \n[1389] \"cargo_2035_25861071\"           \"cargo_2035_25862dda\"          \n[1391] \"cargo_2035_25863643\"           \"cargo_2035_25864a99\"          \n[1393] \"cargo_2035_2586678b\"           \"cargo_2035_25867a30\"          \n[1395] \"cargo_2035_25868b7f\"           \"cargo_2035_2586987c\"          \n[1397] \"cargo_2035_25870bc4\"           \"cargo_2035_25871c08\"          \n[1399] \"cargo_2035_25872639\"           \"cargo_2035_2587382d\"          \n[1401] \"cargo_2035_25874fb7\"           \"cargo_2035_258758e9\"          \n[1403] \"cargo_2035_25877372\"           \"cargo_2035_25878c72\"          \n[1405] \"cargo_2035_25879cb6\"           \"cargo_2035_25880141\"          \n[1407] \"cargo_2035_25881862\"           \"cargo_2035_258825f7\"          \n[1409] \"cargo_2035_2588356d\"           \"cargo_2035_25884287\"          \n[1411] \"cargo_2035_25885f8e\"           \"cargo_2035_25886c22\"          \n[1413] \"cargo_2035_25888bfc\"           \"cargo_2035_258893cc\"          \n[1415] \"cargo_2035_2589008c\"           \"cargo_2035_25891a58\"          \n[1417] \"cargo_2035_258928ec\"           \"cargo_2035_258987df\"          \n[1419] \"cargo_2035_258998c6\"           \"cargo_2035_2590832d\"          \n[1421] \"cargo_2035_259095fa\"           \"cargo_2035_25910e19\"          \n[1423] \"cargo_2035_2591107f\"           \"cargo_2035_25912fcf\"          \n[1425] \"cargo_2035_25913ebf\"           \"cargo_2035_259147c0\"          \n[1427] \"cargo_2035_25915f58\"           \"cargo_2035_25916ad8\"          \n[1429] \"cargo_2035_25917f03\"           \"cargo_2035_25918982\"          \n[1431] \"cargo_2035_2591945e\"           \"cargo_2035_25920420\"          \n[1433] \"cargo_2035_25921579\"           \"cargo_2035_259227b1\"          \n[1435] \"cargo_2035_259232cc\"           \"cargo_2035_2592487d\"          \n[1437] \"cargo_2035_25925d1c\"           \"cargo_2035_259265b0\"          \n[1439] \"cargo_2035_25927761\"           \"cargo_2035_2592854f\"          \n[1441] \"cargo_2035_2592948a\"           \"cargo_2035_259307dd\"          \n[1443] \"cargo_2035_25931767\"           \"cargo_2035_259328a2\"          \n[1445] \"cargo_2035_259331b7\"           \"cargo_2035_25934959\"          \n[1447] \"cargo_2035_25935949\"           \"cargo_2035_25936c93\"          \n[1449] \"cargo_2035_259375f2\"           \"cargo_2035_25942655\"          \n[1451] \"cargo_2035_259435ad\"           \"cargo_2035_25944814\"          \n[1453] \"cargo_2035_2594512e\"           \"cargo_2035_2594625b\"          \n[1455] \"cargo_2035_25949f4a\"           \"cargo_2035_2595120b\"          \n[1457] \"cargo_2035_2595211e\"           \"cargo_2035_25953808\"          \n[1459] \"cargo_2035_2595437b\"           \"cargo_2035_25955818\"          \n[1461] \"cargo_2035_25956b12\"           \"cargo_2035_25957dfe\"          \n[1463] \"cargo_2035_259584c6\"           \"cargo_2035_25959398\"          \n[1465] \"cargo_2035_25960251\"           \"cargo_2035_25962811\"          \n[1467] \"cargo_2035_259634f4\"           \"cargo_2035_25964e70\"          \n[1469] \"cargo_2035_25965e5f\"           \"cargo_2035_259663b0\"          \n[1471] \"cargo_2035_25967599\"           \"cargo_2035_25968796\"          \n[1473] \"cargo_2035_25969e3c\"           \"cargo_2035_25970a11\"          \n[1475] \"cargo_2035_25971968\"           \"cargo_2035_25973d5b\"          \n[1477] \"cargo_2035_25974a3e\"           \"cargo_2035_259802dc\"          \n[1479] \"cargo_2035_259812ba\"           \"cargo_2035_2598220f\"          \n[1481] \"cargo_2035_25983134\"           \"cargo_2035_2598494d\"          \n[1483] \"cargo_2035_25991370\"           \"cargo_2035_259956bf\"          \n[1485] \"cargo_2035_25996f5f\"           \"cargo_2035_25997ad3\"          \n[1487] \"cargo_2035_25998908\"           \"cargo_2035_25999d1a\"          \n[1489] \"cargo_2035_2600012f\"           \"cargo_2035_26001ec5\"          \n[1491] \"cargo_2035_260026f9\"           \"cargo_2035_260031a8\"          \n[1493] \"cargo_2035_26004836\"           \"cargo_2035_260051e1\"          \n[1495] \"cargo_2035_260068b3\"           \"cargo_2035_26007d29\"          \n[1497] \"cargo_2035_26008fc4\"           \"cargo_2035_26009c37\"          \n[1499] \"cargo_2035_26010d78\"           \"cargo_2035_2601132e\"          \n[1501] \"cargo_2035_260123ec\"           \"cargo_2035_26013ba3\"          \n[1503] \"cargo_2035_26014193\"           \"cargo_2035_26016dce\"          \n[1505] \"cargo_2035_26017d3a\"           \"cargo_2035_26018613\"          \n[1507] \"cargo_2035_2601943f\"           \"cargo_2035_260205b4\"          \n[1509] \"cargo_2035_260216f9\"           \"cargo_2035_2602221a\"          \n[1511] \"cargo_2035_26023d20\"           \"cargo_2035_26024f61\"          \n[1513] \"cargo_2035_260256c6\"           \"cargo_2035_26027a5e\"          \n[1515] \"cargo_2035_260288d3\"           \"cargo_2035_260293df\"          \n[1517] \"cargo_2035_26030044\"           \"cargo_2035_26031b96\"          \n[1519] \"cargo_2035_260321ed\"           \"cargo_2035_26033a75\"          \n[1521] \"cargo_2035_26034968\"           \"cargo_2035_26035cbf\"          \n[1523] \"cargo_2035_260361c4\"           \"cargo_2035_26038f0e\"          \n[1525] \"cargo_2035_26039a94\"           \"cargo_2035_2604045d\"          \n[1527] \"cargo_2035_26041244\"           \"cargo_2035_26048d66\"          \n[1529] \"cargo_2035_260499e6\"           \"cargo_2035_26050585\"          \n[1531] \"cargo_2035_26051a77\"           \"cargo_2035_26052bd5\"          \n[1533] \"cargo_2035_26053ca8\"           \"cargo_2035_26054371\"          \n[1535] \"cargo_2035_260557ec\"           \"cargo_2035_260563cc\"          \n[1537] \"cargo_2035_26057468\"           \"cargo_2035_26058365\"          \n[1539] \"cargo_2035_2605955c\"           \"cargo_2035_260600b3\"          \n[1541] \"cargo_2035_260613e8\"           \"cargo_2035_26062c3f\"          \n[1543] \"cargo_2035_26063f93\"           \"cargo_2035_26064013\"          \n[1545] \"cargo_2035_26065727\"           \"cargo_2035_260664ae\"          \n[1547] \"cargo_2035_260670b8\"           \"cargo_2035_26068bef\"          \n[1549] \"cargo_2035_2606999f\"           \"cargo_2035_260702ef\"          \n[1551] \"cargo_2035_260711e8\"           \"cargo_2035_26072044\"          \n[1553] \"cargo_2035_260731b9\"           \"cargo_2035_260745ad\"          \n[1555] \"cargo_2035_26075fb3\"           \"cargo_2035_2607609d\"          \n[1557] \"cargo_2035_26077710\"           \"cargo_2035_26078732\"          \n[1559] \"cargo_2035_26079865\"           \"cargo_2035_26080adb\"          \n[1561] \"cargo_2035_260812ce\"           \"cargo_2035_26082ae6\"          \n[1563] \"cargo_2035_26083bfc\"           \"cargo_2035_2608403b\"          \n[1565] \"cargo_2035_26085c4b\"           \"cargo_2035_260865e2\"          \n[1567] \"cargo_2035_260872d9\"           \"cargo_2035_26088002\"          \n[1569] \"cargo_2035_26089b05\"           \"cargo_2035_2609033b\"          \n[1571] \"cargo_2035_26091da4\"           \"cargo_2035_26092f5c\"          \n[1573] \"cargo_2035_26093694\"           \"cargo_2035_26094094\"          \n[1575] \"cargo_2035_26103907\"           \"cargo_2035_261140fa\"          \n[1577] \"cargo_2035_261157ef\"           \"cargo_2035_26116233\"          \n[1579] \"cargo_2035_2611836a\"           \"cargo_2035_26119fa8\"          \n[1581] \"cargo_2035_26120d02\"           \"cargo_2035_26121add\"          \n[1583] \"cargo_2035_261229a8\"           \"cargo_2035_26123e49\"          \n[1585] \"cargo_2035_26124625\"           \"cargo_2035_261252bc\"          \n[1587] \"cargo_2035_26126f39\"           \"cargo_2035_2612743d\"          \n[1589] \"cargo_2035_26129e1a\"           \"cargo_2035_26130914\"          \n[1591] \"cargo_2035_26131de2\"           \"cargo_2035_261328fc\"          \n[1593] \"cargo_2035_261335de\"           \"cargo_2035_26144acb\"          \n[1595] \"cargo_2035_26145914\"           \"cargo_2035_261468e1\"          \n[1597] \"cargo_2035_26147a52\"           \"cargo_2035_26148d48\"          \n[1599] \"cargo_2035_26149c03\"           \"cargo_2035_261508ff\"          \n[1601] \"cargo_2035_26151475\"           \"cargo_2035_2615277c\"          \n[1603] \"cargo_2035_261540db\"           \"cargo_2035_26155c19\"          \n[1605] \"cargo_2035_26156c45\"           \"cargo_2035_26157095\"          \n[1607] \"cargo_2035_26160f54\"           \"cargo_2035_26161da5\"          \n[1609] \"cargo_2035_2616336b\"           \"cargo_2035_26165f6e\"          \n[1611] \"cargo_2035_261663a9\"           \"cargo_2035_26168755\"          \n[1613] \"cargo_2035_261691ea\"           \"cargo_2035_261774e1\"          \n[1615] \"cargo_2035_2618647d\"           \"cargo_2035_261876f9\"          \n[1617] \"cargo_2035_26188c73\"           \"cargo_2035_26189b18\"          \n[1619] \"cargo_2035_2619160f\"           \"cargo_2035_26192c9a\"          \n[1621] \"cargo_2035_26193016\"           \"cargo_2035_261957d0\"          \n[1623] \"cargo_2035_26196fcf\"           \"cargo_2035_26197540\"          \n[1625] \"cargo_2035_2619899c\"           \"cargo_2035_26199927\"          \n[1627] \"cargo_2035_26200051\"           \"cargo_2035_26202a6f\"          \n[1629] \"cargo_2035_262042bb\"           \"cargo_2035_262066f7\"          \n[1631] \"cargo_2035_262071c0\"           \"cargo_2035_26208a0c\"          \n[1633] \"cargo_2035_2620946e\"           \"cargo_2035_26210f98\"          \n[1635] \"cargo_2035_26211787\"           \"cargo_2035_262121b0\"          \n[1637] \"cargo_2035_26213379\"           \"cargo_2035_26214004\"          \n[1639] \"cargo_2035_26215757\"           \"cargo_2035_262165d9\"          \n[1641] \"cargo_2035_26217c4e\"           \"cargo_2035_26220299\"          \n[1643] \"cargo_2035_2622180d\"           \"cargo_2035_262224d9\"          \n[1645] \"cargo_2035_26223dfd\"           \"cargo_2035_26224390\"          \n[1647] \"cargo_2035_26225563\"           \"cargo_2035_26226176\"          \n[1649] \"cargo_2035_26227d1e\"           \"cargo_2035_262289cd\"          \n[1651] \"cargo_2035_26229d1c\"           \"cargo_2035_26231141\"          \n[1653] \"cargo_2035_26232d94\"           \"cargo_2035_26233af0\"          \n[1655] \"cargo_2035_26234a55\"           \"cargo_2035_262353a8\"          \n[1657] \"cargo_2035_26236a59\"           \"cargo_2035_262387c9\"          \n[1659] \"cargo_2035_26239af8\"           \"cargo_2035_262407ce\"          \n[1661] \"cargo_2035_2624272c\"           \"cargo_2035_26243d78\"          \n[1663] \"cargo_2035_2624482b\"           \"cargo_2035_262450d4\"          \n[1665] \"cargo_2035_26246ba6\"           \"cargo_2035_26250689\"          \n[1667] \"cargo_2035_26251331\"           \"cargo_2035_26252317\"          \n[1669] \"cargo_2035_26254355\"           \"cargo_2035_26255681\"          \n[1671] \"cargo_2035_26256cbb\"           \"cargo_2035_26257c81\"          \n[1673] \"cargo_2035_26258fa4\"           \"cargo_2035_2625909e\"          \n[1675] \"cargo_2035_26260477\"           \"cargo_2035_2626114c\"          \n[1677] \"cargo_2035_26262559\"           \"cargo_2035_26263703\"          \n[1679] \"cargo_2035_2626593e\"           \"cargo_2035_26266ac0\"          \n[1681] \"cargo_2035_26267e8e\"           \"cargo_2035_26268346\"          \n[1683] \"cargo_2035_262690b4\"           \"cargo_2035_262704be\"          \n[1685] \"cargo_2035_2627117e\"           \"cargo_2035_26272077\"          \n[1687] \"cargo_2035_262732b4\"           \"cargo_2035_26274688\"          \n[1689] \"cargo_2035_26276c26\"           \"cargo_2035_262774da\"          \n[1691] \"cargo_2035_26278bd0\"           \"cargo_2035_26279bd5\"          \n[1693] \"cargo_2035_26280694\"           \"cargo_2035_26281078\"          \n[1695] \"cargo_2035_26289c9c\"           \"cargo_2035_2629074c\"          \n[1697] \"cargo_2035_26291e82\"           \"cargo_2035_262935d5\"          \n[1699] \"cargo_2035_26294398\"           \"cargo_2035_262955e1\"          \n[1701] \"cargo_2035_26297998\"           \"cargo_2035_262984ba\"          \n[1703] \"cargo_2035_263004db\"           \"cargo_2035_26301dd4\"          \n[1705] \"cargo_2035_26302550\"           \"cargo_2035_263031e7\"          \n[1707] \"cargo_2035_263044a1\"           \"cargo_2035_26306022\"          \n[1709] \"cargo_2035_26307516\"           \"cargo_2035_26308d2b\"          \n[1711] \"cargo_2035_26309f47\"           \"cargo_2035_26311684\"          \n[1713] \"cargo_2035_2631286e\"           \"cargo_2035_26313c43\"          \n[1715] \"cargo_2035_26314be8\"           \"cargo_2035_26315159\"          \n[1717] \"cargo_2035_26317274\"           \"cargo_2035_26318dde\"          \n[1719] \"cargo_2035_26319787\"           \"cargo_2035_26322822\"          \n[1721] \"cargo_2035_263237e0\"           \"cargo_2035_26324524\"          \n[1723] \"cargo_2035_263250f7\"           \"cargo_2035_26326509\"          \n[1725] \"cargo_2035_26327ef0\"           \"cargo_2035_26328b54\"          \n[1727] \"cargo_2035_26329637\"           \"cargo_2035_26330213\"          \n[1729] \"cargo_2035_26331f8c\"           \"cargo_2035_263336c5\"          \n[1731] \"cargo_2035_26335ad1\"           \"cargo_2035_2633663b\"          \n[1733] \"cargo_2035_26337063\"           \"cargo_2035_263383dd\"          \n[1735] \"cargo_2035_263393bf\"           \"cargo_2035_26340fe4\"          \n[1737] \"cargo_2035_26341120\"           \"cargo_2035_26342824\"          \n[1739] \"cargo_2035_26344dec\"           \"cargo_2035_26345ac1\"          \n[1741] \"cargo_2035_26346930\"           \"cargo_2035_2634751b\"          \n[1743] \"cargo_2035_26348c58\"           \"cargo_2035_26349618\"          \n[1745] \"cargo_2035_263505ab\"           \"cargo_2035_26351836\"          \n[1747] \"cargo_2035_263525dc\"           \"cargo_2035_2635368b\"          \n[1749] \"cargo_2035_26355a7e\"           \"cargo_2035_2635618b\"          \n[1751] \"cargo_2035_263576c0\"           \"cargo_2035_26358749\"          \n[1753] \"cargo_2035_263597f4\"           \"cargo_2035_26360537\"          \n[1755] \"cargo_2035_26362a1a\"           \"cargo_2035_2636323f\"          \n[1757] \"cargo_2035_263644bc\"           \"cargo_2035_26365bf8\"          \n[1759] \"cargo_2035_26366864\"           \"cargo_2035_26367739\"          \n[1761] \"cargo_2035_26368138\"           \"cargo_2035_2636906f\"          \n[1763] \"cargo_2035_26370ccd\"           \"cargo_2035_26371891\"          \n[1765] \"cargo_2035_26372d91\"           \"cargo_2035_26373463\"          \n[1767] \"cargo_2035_26374690\"           \"cargo_2035_2637575d\"          \n[1769] \"cargo_2035_26376ca7\"           \"cargo_2035_263777ac\"          \n[1771] \"cargo_2035_2637834f\"           \"cargo_2035_26379235\"          \n[1773] \"cargo_2035_263845f1\"           \"cargo_2035_26391468\"          \n[1775] \"cargo_2035_26392bf9\"           \"cargo_2035_26393f36\"          \n[1777] \"cargo_2035_26394084\"           \"cargo_2035_263956ce\"          \n[1779] \"cargo_2035_263969de\"           \"cargo_2035_26397dd6\"          \n[1781] \"cargo_2035_263986f4\"           \"cargo_2035_26399fd2\"          \n[1783] \"cargo_2035_26400b7a\"           \"cargo_2035_2640150a\"          \n[1785] \"cargo_2035_26402cf7\"           \"cargo_2035_26403821\"          \n[1787] \"cargo_2035_264043da\"           \"cargo_2035_26405693\"          \n[1789] \"cargo_2035_26406ea6\"           \"cargo_2035_26407a33\"          \n[1791] \"cargo_2035_26409d4c\"           \"cargo_2035_2641074a\"          \n[1793] \"cargo_2035_264112cb\"           \"cargo_2035_26412cd0\"          \n[1795] \"cargo_2035_264139d6\"           \"cargo_2035_26414e0c\"          \n[1797] \"cargo_2035_26419868\"           \"cargo_2035_264313d5\"          \n[1799] \"cargo_2035_264334c0\"           \"cargo_2035_26434d33\"          \n[1801] \"cargo_2035_264354b4\"           \"cargo_2035_26436cce\"          \n[1803] \"cargo_2035_26437bd1\"           \"cargo_2035_26438fae\"          \n[1805] \"cargo_2035_26439237\"           \"cargo_2035_2644186c\"          \n[1807] \"cargo_2035_264422ec\"           \"cargo_2035_26444022\"          \n[1809] \"cargo_2035_26445c03\"           \"cargo_2035_26446716\"          \n[1811] \"cargo_2035_26447dfe\"           \"cargo_2035_264485e7\"          \n[1813] \"cargo_2035_264559b6\"           \"cargo_2035_26457b48\"          \n[1815] \"cargo_2035_26458bcb\"           \"cargo_2035_26459649\"          \n[1817] \"cargo_2035_26460e62\"           \"cargo_2035_26461c00\"          \n[1819] \"cargo_2035_26462982\"           \"cargo_2035_26463a7e\"          \n[1821] \"cargo_2035_26464f84\"           \"cargo_2035_2646587a\"          \n[1823] \"cargo_2035_2646637b\"           \"cargo_2035_264689cf\"          \n[1825] \"cargo_2035_2646944e\"           \"cargo_2035_26470f54\"          \n[1827] \"cargo_2035_264715c1\"           \"cargo_2035_26472e66\"          \n[1829] \"cargo_2035_264733d1\"           \"cargo_2035_26474214\"          \n[1831] \"cargo_2035_26475bbe\"           \"cargo_2035_26476d14\"          \n[1833] \"cargo_2035_26477d70\"           \"cargo_2035_26479f36\"          \n[1835] \"cargo_2035_26480407\"           \"cargo_2035_2648108f\"          \n[1837] \"cargo_2035_26482a86\"           \"cargo_2035_26483436\"          \n[1839] \"cargo_2035_264844ab\"           \"cargo_2035_264850d0\"          \n[1841] \"cargo_2035_264866df\"           \"cargo_2035_26487d07\"          \n[1843] \"cargo_2035_26488644\"           \"cargo_2035_264947cc\"          \n[1845] \"cargo_2035_264961b4\"           \"cargo_2035_2649833d\"          \n[1847] \"cargo_2035_26499a66\"           \"cargo_2035_265002dd\"          \n[1849] \"cargo_2035_26501425\"           \"cargo_2035_26502a92\"          \n[1851] \"cargo_2035_265032a9\"           \"cargo_2035_265049c2\"          \n[1853] \"cargo_2035_2650583d\"           \"cargo_2035_26507219\"          \n[1855] \"cargo_2035_26508a82\"           \"cargo_2035_26509f1a\"          \n[1857] \"cargo_2035_26510706\"           \"cargo_2035_26511524\"          \n[1859] \"cargo_2035_2651961f\"           \"cargo_2035_26520996\"          \n[1861] \"cargo_2035_265211f9\"           \"cargo_2035_2652287f\"          \n[1863] \"cargo_2035_26523187\"           \"cargo_2035_265243d2\"          \n[1865] \"cargo_2035_26525f18\"           \"cargo_2035_26526c23\"          \n[1867] \"cargo_2035_26527462\"           \"cargo_2035_26528c75\"          \n[1869] \"cargo_2035_26529f80\"           \"cargo_2035_2653076f\"          \n[1871] \"cargo_2035_26531501\"           \"cargo_2035_2653201c\"          \n[1873] \"cargo_2035_265337dc\"           \"cargo_2035_26534830\"          \n[1875] \"cargo_2035_26535180\"           \"cargo_2035_2653673e\"          \n[1877] \"cargo_2035_26541d47\"           \"cargo_2035_26547da1\"          \n[1879] \"cargo_2035_26548206\"           \"cargo_2035_26549b15\"          \n[1881] \"cargo_2035_26550dca\"           \"cargo_2035_26551be4\"          \n[1883] \"cargo_2035_2655231c\"           \"cargo_2035_2655351d\"          \n[1885] \"cargo_2035_26554243\"           \"cargo_2035_26555d73\"          \n[1887] \"cargo_2035_2655634e\"           \"cargo_2035_26558fad\"          \n[1889] \"cargo_2035_26560bcc\"           \"cargo_2035_265626a5\"          \n[1891] \"cargo_2035_2656385f\"           \"cargo_2035_2656444a\"          \n[1893] \"cargo_2035_26565127\"           \"cargo_2035_2656647d\"          \n[1895] \"cargo_2035_2656781e\"           \"cargo_2035_265685fc\"          \n[1897] \"cargo_2035_265798bd\"           \"cargo_2035_26580af5\"          \n[1899] \"cargo_2035_265819d8\"           \"cargo_2035_26582d69\"          \n[1901] \"cargo_2035_26583e8d\"           \"cargo_2035_26586681\"          \n[1903] \"cargo_2035_26587047\"           \"cargo_2035_26588e8f\"          \n[1905] \"cargo_2035_26590374\"           \"cargo_2035_26591afc\"          \n[1907] \"cargo_2035_26592bb8\"           \"cargo_2035_265933c2\"          \n[1909] \"cargo_2035_26594e92\"           \"cargo_2035_265952ed\"          \n[1911] \"cargo_2035_2659848c\"           \"cargo_2035_26599127\"          \n[1913] \"cargo_2035_2660128e\"           \"cargo_2035_26606e07\"          \n[1915] \"cargo_2035_26607807\"           \"cargo_2035_26608f53\"          \n[1917] \"cargo_2035_26609199\"           \"cargo_2035_266209c9\"          \n[1919] \"cargo_2035_26621112\"           \"cargo_2035_266231e2\"          \n[1921] \"cargo_2035_2662470a\"           \"cargo_2035_26627c2d\"          \n[1923] \"cargo_2035_26628b75\"           \"cargo_2035_26629aa8\"          \n[1925] \"cargo_2035_26630594\"           \"cargo_2035_26631e77\"          \n[1927] \"cargo_2035_26634a6f\"           \"cargo_2035_26635666\"          \n[1929] \"cargo_2035_266364a9\"           \"cargo_2035_266466d2\"          \n[1931] \"cargo_2035_26647272\"           \"cargo_2035_266487cd\"          \n[1933] \"cargo_2035_26649c2d\"           \"cargo_2035_26650415\"          \n[1935] \"cargo_2035_26651916\"           \"cargo_2035_26652ccd\"          \n[1937] \"cargo_2035_26653c8b\"           \"cargo_2035_26654865\"          \n[1939] \"cargo_2035_266551be\"           \"cargo_2035_26657127\"          \n[1941] \"cargo_2035_2665850e\"           \"cargo_2035_266599d5\"          \n[1943] \"cargo_2035_26660dcd\"           \"cargo_2035_266612a3\"          \n[1945] \"cargo_2035_2666283f\"           \"cargo_2035_26663623\"          \n[1947] \"cargo_2035_26664abb\"           \"cargo_2035_26665296\"          \n[1949] \"cargo_2035_26666bba\"           \"cargo_2035_26668451\"          \n[1951] \"cargo_2035_26669a27\"           \"cargo_2035_26670d25\"          \n[1953] \"cargo_2035_26671779\"           \"cargo_2035_26672e78\"          \n[1955] \"cargo_2035_26673478\"           \"cargo_2035_26674c75\"          \n[1957] \"cargo_2035_26675802\"           \"cargo_2035_26680697\"          \n[1959] \"cargo_2035_26682f18\"           \"cargo_2035_26683e96\"          \n[1961] \"cargo_2035_2668430f\"           \"cargo_2035_26685d6d\"          \n[1963] \"cargo_2035_266869df\"           \"cargo_2035_26687f9d\"          \n[1965] \"cargo_2035_2669078b\"           \"cargo_2035_26693379\"          \n[1967] \"cargo_2035_26698828\"           \"cargo_2035_26699791\"          \n[1969] \"cargo_2035_26700cb6\"           \"cargo_2035_2670122a\"          \n[1971] \"cargo_2035_26702c8c\"           \"cargo_2035_267033e4\"          \n[1973] \"cargo_2035_26704153\"           \"cargo_2035_2670544a\"          \n[1975] \"cargo_2035_26706236\"           \"cargo_2035_267077e8\"          \n[1977] \"cargo_2035_26708634\"           \"cargo_2035_26709fdb\"          \n[1979] \"cargo_2035_26710159\"           \"cargo_2035_2671125c\"          \n[1981] \"cargo_2035_26712afd\"           \"cargo_2035_267139b2\"          \n[1983] \"cargo_2035_2671490c\"           \"cargo_2035_26715230\"          \n[1985] \"cargo_2035_26716532\"           \"cargo_2035_26717fe1\"          \n[1987] \"cargo_2035_26718a11\"           \"cargo_2035_26719f2f\"          \n[1989] \"cargo_2035_26720a77\"           \"cargo_2035_267212e8\"          \n[1991] \"cargo_2035_26722ae5\"           \"cargo_2035_26723d81\"          \n[1993] \"cargo_2035_26724729\"           \"cargo_2035_267258a3\"          \n[1995] \"cargo_2035_2672666b\"           \"cargo_2035_267276bb\"          \n[1997] \"cargo_2035_267282bf\"           \"cargo_2035_26729393\"          \n[1999] \"cargo_2035_267304f9\"           \"cargo_2035_267318b6\"          \n[2001] \"cargo_2035_26732f9a\"           \"cargo_2035_26733e36\"          \n[2003] \"cargo_2035_267341bb\"           \"cargo_2035_267359f4\"          \n[2005] \"cargo_2035_26736d82\"           \"cargo_2035_2673793f\"          \n[2007] \"cargo_2035_267387ea\"           \"cargo_2035_267398be\"          \n[2009] \"cargo_2035_26740698\"           \"cargo_2035_26741cfd\"          \n[2011] \"cargo_2035_2674260e\"           \"cargo_2035_26743ba6\"          \n[2013] \"cargo_2035_267444f1\"           \"cargo_2035_267458ff\"          \n[2015] \"cargo_2035_26746742\"           \"cargo_2035_267472a9\"          \n[2017] \"cargo_2035_2674853e\"           \"cargo_2035_26749de1\"          \n[2019] \"cargo_2035_2675144d\"           \"cargo_2035_267529ba\"          \n[2021] \"cargo_2035_26753777\"           \"cargo_2035_26754131\"          \n[2023] \"cargo_2035_26755d3e\"           \"cargo_2035_26757fd7\"          \n[2025] \"cargo_2035_26758acb\"           \"cargo_2035_2675916c\"          \n[2027] \"cargo_2035_26760dc4\"           \"cargo_2035_26762015\"          \n[2029] \"cargo_2035_26763f16\"           \"cargo_2035_26764fa8\"          \n[2031] \"cargo_2035_267657c8\"           \"cargo_2035_267667cd\"          \n[2033] \"cargo_2035_26767885\"           \"cargo_2035_26768e3c\"          \n[2035] \"cargo_2035_267690aa\"           \"cargo_2035_26770d2f\"          \n[2037] \"cargo_2035_267711bb\"           \"cargo_2035_26773511\"          \n[2039] \"cargo_2035_267790e5\"           \"cargo_2035_267800ea\"          \n[2041] \"cargo_2035_26781809\"           \"cargo_2035_26782b0f\"          \n[2043] \"cargo_2035_26783e09\"           \"cargo_2035_26784d55\"          \n[2045] \"cargo_2035_267853ee\"           \"cargo_2035_267919c1\"          \n[2047] \"cargo_2035_26796f15\"           \"cargo_2035_26797e7b\"          \n[2049] \"cargo_2035_267984e0\"           \"cargo_2035_26799bee\"          \n[2051] \"cargo_2035_26800b28\"           \"cargo_2035_268012e0\"          \n[2053] \"cargo_2035_26802e89\"           \"cargo_2035_26803f1b\"          \n[2055] \"cargo_2035_268049c1\"           \"cargo_2035_26805c8d\"          \n[2057] \"cargo_2035_268068c1\"           \"cargo_2035_26807be2\"          \n[2059] \"cargo_2035_26808424\"           \"cargo_2035_26809373\"          \n[2061] \"cargo_2035_268100f0\"           \"cargo_2035_26811552\"          \n[2063] \"cargo_2035_26812a5c\"           \"cargo_2035_2681345f\"          \n[2065] \"cargo_2035_26814cb1\"           \"cargo_2035_26815901\"          \n[2067] \"cargo_2035_26819aec\"           \"cargo_2035_268207f7\"          \n[2069] \"cargo_2035_26821344\"           \"cargo_2035_268220e6\"          \n[2071] \"cargo_2035_268249cf\"           \"cargo_2035_26828483\"          \n[2073] \"cargo_2035_268307c6\"           \"cargo_2035_26831735\"          \n[2075] \"cargo_2035_268324cc\"           \"cargo_2035_268330c1\"          \n[2077] \"cargo_2035_2683480a\"           \"cargo_2035_2683518b\"          \n[2079] \"cargo_2035_26836176\"           \"cargo_2035_268370b6\"          \n[2081] \"cargo_2035_2683931b\"           \"cargo_2035_26840eee\"          \n[2083] \"cargo_2035_26845c33\"           \"cargo_2035_268464f8\"          \n[2085] \"cargo_2035_26848d3b\"           \"cargo_2035_2684910e\"          \n[2087] \"cargo_2035_26850d7c\"           \"cargo_2035_26851535\"          \n[2089] \"cargo_2035_26852c33\"           \"cargo_2035_26853536\"          \n[2091] \"cargo_2035_2685480d\"           \"cargo_2035_268555e0\"          \n[2093] \"cargo_2035_26856629\"           \"cargo_2035_26857c0c\"          \n[2095] \"cargo_2035_2685924a\"           \"cargo_2035_2686085b\"          \n[2097] \"cargo_2035_268619aa\"           \"cargo_2035_26862c71\"          \n[2099] \"cargo_2035_26863d75\"           \"cargo_2035_26864880\"          \n[2101] \"cargo_2035_26865b87\"           \"cargo_2035_26866b08\"          \n[2103] \"cargo_2035_268674a6\"           \"cargo_2035_26868eb7\"          \n[2105] \"cargo_2035_26870713\"           \"cargo_2035_26871f29\"          \n[2107] \"cargo_2035_26872fb9\"           \"cargo_2035_268730c4\"          \n[2109] \"cargo_2035_26874322\"           \"cargo_2035_26875676\"          \n[2111] \"cargo_2035_2687691c\"           \"cargo_2035_2687780d\"          \n[2113] \"cargo_2035_26878467\"           \"cargo_2035_2687977f\"          \n[2115] \"cargo_2035_26881b70\"           \"cargo_2035_2688262f\"          \n[2117] \"cargo_2035_26883a06\"           \"cargo_2035_268840d7\"          \n[2119] \"cargo_2035_26885262\"           \"cargo_2035_26886ea0\"          \n[2121] \"cargo_2035_2688798e\"           \"cargo_2035_26888e42\"          \n[2123] \"cargo_2035_2689565f\"           \"cargo_2035_268960c9\"          \n[2125] \"cargo_2035_26897c00\"           \"cargo_2035_26898ada\"          \n[2127] \"cargo_2035_26900375\"           \"cargo_2035_26902a05\"          \n[2129] \"cargo_2035_26904473\"           \"cargo_2035_269054a8\"          \n[2131] \"cargo_2035_26906f37\"           \"cargo_2035_2690704c\"          \n[2133] \"cargo_2035_26908615\"           \"cargo_2035_269096bb\"          \n[2135] \"cargo_2035_26910b88\"           \"cargo_2035_26911f09\"          \n[2137] \"cargo_2035_269247f2\"           \"cargo_2035_269250fd\"          \n[2139] \"cargo_2035_26928cef\"           \"cargo_2035_26929e8d\"          \n[2141] \"cargo_2035_26931386\"           \"cargo_2035_269329eb\"          \n[2143] \"cargo_2035_26933205\"           \"cargo_2035_26934195\"          \n[2145] \"cargo_2035_269353d3\"           \"cargo_2035_26947427\"          \n[2147] \"cargo_2035_26954bff\"           \"cargo_2035_26955320\"          \n[2149] \"cargo_2035_26956b11\"           \"cargo_2035_26957bae\"          \n[2151] \"cargo_2035_269584f3\"           \"cargo_2035_26959cf1\"          \n[2153] \"cargo_2035_26960823\"           \"cargo_2035_2696153e\"          \n[2155] \"cargo_2035_26962ebe\"           \"cargo_2035_2696360b\"          \n[2157] \"cargo_2035_26964613\"           \"cargo_2035_26965a59\"          \n[2159] \"cargo_2035_26966e06\"           \"cargo_2035_26967f6d\"          \n[2161] \"cargo_2035_26968747\"           \"cargo_2035_26969213\"          \n[2163] \"cargo_2035_269707d5\"           \"cargo_2035_26971eec\"          \n[2165] \"cargo_2035_26972393\"           \"cargo_2035_26973b06\"          \n[2167] \"cargo_2035_269748cb\"           \"cargo_2035_269752c6\"          \n[2169] \"cargo_2035_26978bcf\"           \"cargo_2035_26979781\"          \n[2171] \"cargo_2035_26980d34\"           \"cargo_2035_26982160\"          \n[2173] \"cargo_2035_269834c6\"           \"cargo_2035_26984023\"          \n[2175] \"cargo_2035_26985dda\"           \"cargo_2035_26986132\"          \n[2177] \"cargo_2035_26987021\"           \"cargo_2035_2698869f\"          \n[2179] \"cargo_2035_269896dd\"           \"cargo_2035_269906db\"          \n[2181] \"cargo_2035_2699108c\"           \"cargo_2035_26992d5c\"          \n[2183] \"cargo_2035_2699301a\"           \"cargo_2035_26994d63\"          \n[2185] \"cargo_2035_26995df5\"           \"cargo_2035_2699629a\"          \n[2187] \"cargo_2035_269978b8\"           \"cargo_2035_26998c89\"          \n[2189] \"cargo_2035_26999a9c\"           \"cargo_2035_27000096\"          \n[2191] \"cargo_2035_27001fd9\"           \"cargo_2035_27002201\"          \n[2193] \"cargo_2035_27003cd3\"           \"cargo_2035_270047f4\"          \n[2195] \"cargo_2035_27005cba\"           \"cargo_2035_27006851\"          \n[2197] \"cargo_2035_2700770f\"           \"cargo_2035_2700842e\"          \n[2199] \"cargo_2035_27009220\"           \"cargo_2035_27010339\"          \n[2201] \"cargo_2035_27011b37\"           \"cargo_2035_2701256b\"          \n[2203] \"cargo_2035_27013019\"           \"cargo_2035_270142da\"          \n[2205] \"cargo_2035_270153a1\"           \"cargo_2035_2701660a\"          \n[2207] \"cargo_2035_270175ec\"           \"cargo_2035_27018e28\"          \n[2209] \"cargo_2035_2701951c\"           \"cargo_2035_27020f54\"          \n[2211] \"cargo_2035_270216fc\"           \"cargo_2035_2702236e\"          \n[2213] \"cargo_2035_27023cb7\"           \"cargo_2035_27024e87\"          \n[2215] \"cargo_2035_27025135\"           \"cargo_2035_27026ccc\"          \n[2217] \"cargo_2035_270275e0\"           \"cargo_2035_27028ac4\"          \n[2219] \"cargo_2035_270294d8\"           \"cargo_2035_27030e75\"          \n[2221] \"cargo_2035_27031f7f\"           \"cargo_2035_270324c8\"          \n[2223] \"cargo_2035_270334a9\"           \"cargo_2035_27034619\"          \n[2225] \"cargo_2035_270350bb\"           \"cargo_2035_2703667d\"          \n[2227] \"cargo_2035_2703752e\"           \"cargo_2035_27038e62\"          \n[2229] \"cargo_2035_27039903\"           \"cargo_2035_27040656\"          \n[2231] \"cargo_2035_27041e02\"           \"cargo_2035_27042961\"          \n[2233] \"cargo_2035_27043007\"           \"cargo_2035_270446ae\"          \n[2235] \"cargo_2035_27045b8b\"           \"cargo_2035_2704611b\"          \n[2237] \"cargo_2035_27047822\"           \"cargo_2035_27048863\"          \n[2239] \"cargo_2035_27049839\"           \"cargo_2035_27050989\"          \n[2241] \"cargo_2035_270515ec\"           \"cargo_2035_27052574\"          \n[2243] \"cargo_2035_27053527\"           \"cargo_2035_270544e2\"          \n[2245] \"cargo_2035_27057aaf\"           \"cargo_2035_270633eb\"          \n[2247] \"cargo_2035_27064f1d\"           \"cargo_2035_27065105\"          \n[2249] \"cargo_2035_27066076\"           \"cargo_2035_27067848\"          \n[2251] \"cargo_2035_270688a2\"           \"cargo_2035_2706971d\"          \n[2253] \"cargo_2035_27070385\"           \"cargo_2035_27071b81\"          \n[2255] \"cargo_2035_27072f8c\"           \"cargo_2035_2707320e\"          \n[2257] \"cargo_2035_270749d7\"           \"cargo_2035_270753d0\"          \n[2259] \"cargo_2035_27076a95\"           \"cargo_2035_27077f91\"          \n[2261] \"cargo_2035_27078659\"           \"cargo_2035_27079fe8\"          \n[2263] \"cargo_2035_27080b4f\"           \"cargo_2035_27085cdf\"          \n[2265] \"cargo_2035_27091de7\"           \"cargo_2035_27092495\"          \n[2267] \"cargo_2035_2709398c\"           \"cargo_2035_270944f3\"          \n[2269] \"cargo_2035_27095461\"           \"cargo_2035_27096cbb\"          \n[2271] \"cargo_2035_2709769d\"           \"cargo_2035_27098d08\"          \n[2273] \"cargo_2035_27099281\"           \"cargo_2035_271002fa\"          \n[2275] \"cargo_2035_27101746\"           \"cargo_2035_271025fb\"          \n[2277] \"cargo_2035_27103e73\"           \"cargo_2035_271047fc\"          \n[2279] \"cargo_2035_27105f51\"           \"cargo_2035_27107ae5\"          \n[2281] \"cargo_2035_27109bf2\"           \"cargo_2035_2711170e\"          \n[2283] \"cargo_2035_27112e17\"           \"cargo_2035_27113ba5\"          \n[2285] \"cargo_2035_2711442a\"           \"cargo_2035_27115952\"          \n[2287] \"cargo_2035_271160b5\"           \"cargo_2035_271181c0\"          \n[2289] \"cargo_2035_271190c5\"           \"cargo_2035_2712040b\"          \n[2291] \"cargo_2035_27132753\"           \"cargo_2035_2713336b\"          \n[2293] \"cargo_2035_27134dc7\"           \"cargo_2035_27135850\"          \n[2295] \"cargo_2035_27136743\"           \"cargo_2035_27137373\"          \n[2297] \"cargo_2035_27138ada\"           \"cargo_2035_271414fb\"          \n[2299] \"cargo_2035_2714484d\"           \"cargo_2035_27145019\"          \n[2301] \"cargo_2035_2714637e\"           \"cargo_2035_2714742a\"          \n[2303] \"cargo_2035_271481f4\"           \"cargo_2035_27154bd0\"          \n[2305] \"cargo_2035_27156d7f\"           \"cargo_2035_271584f3\"          \n[2307] \"cargo_2035_27159476\"           \"cargo_2035_2716044e\"          \n[2309] \"cargo_2035_271619b3\"           \"cargo_2035_27162a72\"          \n[2311] \"cargo_2035_271635a9\"           \"cargo_2035_271645f8\"          \n[2313] \"cargo_2035_27166b4f\"           \"cargo_2035_27167a4e\"          \n[2315] \"cargo_2035_2716972e\"           \"cargo_2035_27170a6b\"          \n[2317] \"cargo_2035_2717130b\"           \"cargo_2035_27172c1a\"          \n[2319] \"cargo_2035_271736b0\"           \"cargo_2035_27174ca1\"          \n[2321] \"cargo_2035_27175623\"           \"cargo_2035_27176465\"          \n[2323] \"cargo_2035_27177a3d\"           \"cargo_2035_27185855\"          \n[2325] \"cargo_2035_27186030\"           \"cargo_2035_2718772b\"          \n[2327] \"cargo_2035_27188adf\"           \"cargo_2035_271890a9\"          \n[2329] \"cargo_2035_27190a75\"           \"cargo_2035_2719160a\"          \n[2331] \"cargo_2035_27192a4b\"           \"cargo_2035_271937d4\"          \n[2333] \"cargo_2035_27194e83\"           \"cargo_2035_27196c40\"          \n[2335] \"cargo_2035_27207bf9\"           \"cargo_2035_27208c94\"          \n[2337] \"cargo_2035_27209c03\"           \"cargo_2035_272100d7\"          \n[2339] \"cargo_2035_272116eb\"           \"cargo_2035_272121e1\"          \n[2341] \"cargo_2035_272137ca\"           \"cargo_2035_27214364\"          \n[2343] \"cargo_2035_27215887\"           \"cargo_2035_272162a0\"          \n[2345] \"cargo_2035_27217104\"           \"cargo_2035_272188cc\"          \n[2347] \"cargo_2035_2721922a\"           \"cargo_2035_2722068b\"          \n[2349] \"cargo_2035_272210c7\"           \"cargo_2035_27222d62\"          \n[2351] \"cargo_2035_27223098\"           \"cargo_2035_27224e79\"          \n[2353] \"cargo_2035_272250fb\"           \"cargo_2035_272263ef\"          \n[2355] \"cargo_2035_27227813\"           \"cargo_2035_27228a03\"          \n[2357] \"cargo_2035_27229356\"           \"cargo_2035_27234101\"          \n[2359] \"cargo_2035_272459a5\"           \"cargo_2035_27250292\"          \n[2361] \"cargo_2035_27251744\"           \"cargo_2035_27252295\"          \n[2363] \"cargo_2035_2725356a\"           \"cargo_2035_27254eea\"          \n[2365] \"cargo_2035_27255be6\"           \"cargo_2035_27256a4d\"          \n[2367] \"cargo_2035_27257191\"           \"cargo_2035_272589e6\"          \n[2369] \"cargo_2035_27259fbe\"           \"cargo_2035_27260cb3\"          \n[2371] \"cargo_2035_27261600\"           \"cargo_2035_2726272f\"          \n[2373] \"cargo_2035_27263231\"           \"cargo_2035_272641b7\"          \n[2375] \"cargo_2035_272650a0\"           \"cargo_2035_27266d43\"          \n[2377] \"cargo_2035_27267d5b\"           \"cargo_2035_27268a74\"          \n[2379] \"cargo_2035_27269fc6\"           \"cargo_2035_27270447\"          \n[2381] \"cargo_2035_27271c71\"           \"cargo_2035_27272043\"          \n[2383] \"cargo_2035_272735a5\"           \"cargo_2035_27274caa\"          \n[2385] \"cargo_2035_272754f0\"           \"cargo_2035_272765c6\"          \n[2387] \"cargo_2035_27277628\"           \"cargo_2035_272780ff\"          \n[2389] \"cargo_2035_2727994c\"           \"cargo_2035_27280625\"          \n[2391] \"cargo_2035_2728187d\"           \"cargo_2035_27282d6f\"          \n[2393] \"cargo_2035_272830a1\"           \"cargo_2035_272849ac\"          \n[2395] \"cargo_2035_27285603\"           \"cargo_2035_27286c6c\"          \n[2397] \"cargo_2035_27287ca2\"           \"cargo_2035_27288e8b\"          \n[2399] \"cargo_2035_27289b4a\"           \"cargo_2035_27290dcd\"          \n[2401] \"cargo_2035_27291477\"           \"cargo_2035_272927be\"          \n[2403] \"cargo_2035_27293c2c\"           \"cargo_2035_272946d9\"          \n[2405] \"cargo_2035_27295c68\"           \"cargo_2035_27296778\"          \n[2407] \"cargo_2035_272973af\"           \"cargo_2035_27298900\"          \n[2409] \"cargo_2035_2729965c\"           \"cargo_2035_27300143\"          \n[2411] \"cargo_2035_27301f2f\"           \"cargo_2035_27302f29\"          \n[2413] \"cargo_2035_273032d0\"           \"cargo_2035_273049b6\"          \n[2415] \"cargo_2035_27305685\"           \"cargo_2035_27309e82\"          \n[2417] \"cargo_2035_27320b3a\"           \"cargo_2035_27326d2f\"          \n[2419] \"cargo_2035_2732737e\"           \"cargo_2035_2732826c\"          \n[2421] \"cargo_2035_273311f1\"           \"cargo_2035_27332287\"          \n[2423] \"cargo_2035_2733370f\"           \"cargo_2035_27335c02\"          \n[2425] \"cargo_2035_27340edb\"           \"cargo_2035_27346b96\"          \n[2427] \"cargo_2035_27347e06\"           \"cargo_2035_273480fc\"          \n[2429] \"cargo_2035_27349631\"           \"cargo_2035_273507c5\"          \n[2431] \"cargo_2035_27351731\"           \"cargo_2035_27352863\"          \n[2433] \"cargo_2035_27353ffc\"           \"cargo_2035_273540ab\"          \n[2435] \"cargo_2035_27355d69\"           \"cargo_2035_273566d4\"          \n[2437] \"cargo_2035_2735706f\"           \"cargo_2035_2736081e\"          \n[2439] \"cargo_2035_273610e1\"           \"cargo_2035_27362be3\"          \n[2441] \"cargo_2035_27364275\"           \"cargo_2035_2736581e\"          \n[2443] \"cargo_2035_27366912\"           \"cargo_2035_27367bbb\"          \n[2445] \"cargo_2035_273681d8\"           \"cargo_2035_2736949e\"          \n[2447] \"cargo_2035_27370eb6\"           \"cargo_2035_27371ad7\"          \n[2449] \"cargo_2035_27372167\"           \"cargo_2035_27373fc8\"          \n[2451] \"cargo_2035_27374c41\"           \"cargo_2035_27375e72\"          \n[2453] \"cargo_2035_27376018\"           \"cargo_2035_27377035\"          \n[2455] \"cargo_2035_27378ce1\"           \"cargo_2035_273798b3\"          \n[2457] \"cargo_2035_2738003c\"           \"cargo_2035_27381636\"          \n[2459] \"cargo_2035_27382134\"           \"cargo_2035_27383ddd\"          \n[2461] \"cargo_2035_27384289\"           \"cargo_2035_273858c4\"          \n[2463] \"cargo_2035_27386013\"           \"cargo_2035_2738731f\"          \n[2465] \"cargo_2035_27388697\"           \"cargo_2035_27389cfa\"          \n[2467] \"cargo_2035_27390510\"           \"cargo_2035_27391972\"          \n[2469] \"cargo_2035_27392d8b\"           \"cargo_2035_27393af7\"          \n[2471] \"cargo_2035_27394837\"           \"cargo_2035_27395001\"          \n[2473] \"cargo_2035_27396cbb\"           \"cargo_2035_2739773a\"          \n[2475] \"cargo_2035_27398ccb\"           \"cargo_2035_273998db\"          \n[2477] \"cargo_2035_2740052a\"           \"cargo_2035_27401842\"          \n[2479] \"cargo_2035_274020f7\"           \"cargo_2035_27403a5a\"          \n[2481] \"cargo_2035_27404686\"           \"cargo_2035_27405cd8\"          \n[2483] \"cargo_2035_274065d1\"           \"cargo_2035_27407386\"          \n[2485] \"cargo_2035_27408dab\"           \"cargo_2035_27409caa\"          \n[2487] \"cargo_2035_27410dbb\"           \"cargo_2035_2741109c\"          \n[2489] \"cargo_2035_27412b96\"           \"cargo_2035_27413e55\"          \n[2491] \"cargo_2035_27414728\"           \"cargo_2035_27415131\"          \n[2493] \"cargo_2035_27419e0e\"           \"cargo_2035_27424c6b\"          \n[2495] \"cargo_2035_27425936\"           \"cargo_2035_27426b30\"          \n[2497] \"cargo_2035_27427d95\"           \"cargo_2035_27428e6d\"          \n[2499] \"cargo_2035_27429ba1\"           \"cargo_2035_27432c75\"          \n[2501] \"cargo_2035_274334c7\"           \"cargo_2035_27434b24\"          \n[2503] \"cargo_2035_27438297\"           \"cargo_2035_27443ada\"          \n[2505] \"cargo_2035_27444cb0\"           \"cargo_2035_274479d0\"          \n[2507] \"cargo_2035_27448e4a\"           \"cargo_2035_274509d0\"          \n[2509] \"cargo_2035_27451b0f\"           \"cargo_2035_27452dad\"          \n[2511] \"cargo_2035_274530c1\"           \"cargo_2035_27454b61\"          \n[2513] \"cargo_2035_2745588c\"           \"cargo_2035_27456e7c\"          \n[2515] \"cargo_2035_2745721b\"           \"cargo_2035_27458ed6\"          \n[2517] \"cargo_2035_27459289\"           \"cargo_2035_274604b8\"          \n[2519] \"cargo_2035_27461954\"           \"cargo_2035_27462513\"          \n[2521] \"cargo_2035_2746385a\"           \"cargo_2035_27464d5a\"          \n[2523] \"cargo_2035_27465d36\"           \"cargo_2035_27466ccf\"          \n[2525] \"cargo_2035_27467bc3\"           \"cargo_2035_27468581\"          \n[2527] \"cargo_2035_27469a17\"           \"cargo_2035_27470bb1\"          \n[2529] \"cargo_2035_27471938\"           \"cargo_2035_274729db\"          \n[2531] \"cargo_2035_27473b2d\"           \"cargo_2035_274740f1\"          \n[2533] \"cargo_2035_274754f6\"           \"cargo_2035_27476713\"          \n[2535] \"cargo_2035_274772f4\"           \"cargo_2035_2747885b\"          \n[2537] \"cargo_2035_2747971a\"           \"cargo_2035_27480e07\"          \n[2539] \"cargo_2035_274810ef\"           \"cargo_2035_2748239a\"          \n[2541] \"cargo_2035_27483b37\"           \"cargo_2035_274843dc\"          \n[2543] \"cargo_2035_2748502e\"           \"cargo_2035_27486d56\"          \n[2545] \"cargo_2035_274877d1\"           \"cargo_2035_27488a52\"          \n[2547] \"cargo_2035_27489a0c\"           \"cargo_2035_27490c6e\"          \n[2549] \"cargo_2035_27491387\"           \"cargo_2035_274929b8\"          \n[2551] \"cargo_2035_27493b8c\"           \"cargo_2035_27494e07\"          \n[2553] \"cargo_2035_27495634\"           \"cargo_2035_27496aac\"          \n[2555] \"cargo_2035_27497c8c\"           \"cargo_2035_274982b5\"          \n[2557] \"cargo_2035_27499723\"           \"cargo_2035_27500a7f\"          \n[2559] \"cargo_2035_275010f4\"           \"cargo_2035_275028bb\"          \n[2561] \"cargo_2035_27503ba2\"           \"cargo_2035_27504c74\"          \n[2563] \"cargo_2035_275058b8\"           \"cargo_2035_27506c1b\"          \n[2565] \"cargo_2035_27507939\"           \"cargo_2035_27508c43\"          \n[2567] \"cargo_2035_275099e2\"           \"cargo_2035_27510f7a\"          \n[2569] \"cargo_2035_275117eb\"           \"cargo_2035_275122f9\"          \n[2571] \"cargo_2035_27513257\"           \"cargo_2035_27514970\"          \n[2573] \"cargo_2035_27515fae\"           \"cargo_2035_27516bce\"          \n[2575] \"cargo_2035_27517c06\"           \"cargo_2035_27518a5f\"          \n[2577] \"cargo_2035_27528153\"           \"cargo_2035_27529881\"          \n[2579] \"cargo_2035_27532651\"           \"cargo_2035_27533955\"          \n[2581] \"cargo_2035_2753471b\"           \"cargo_2035_275354d7\"          \n[2583] \"cargo_2035_27537a81\"           \"cargo_2035_27541172\"          \n[2585] \"cargo_2035_2754616c\"           \"cargo_2035_27547614\"          \n[2587] \"cargo_2035_27548e3e\"           \"cargo_2035_2754979e\"          \n[2589] \"cargo_2035_27550617\"           \"cargo_2035_2755268e\"          \n[2591] \"cargo_2035_27554b3f\"           \"cargo_2035_2755556c\"          \n[2593] \"cargo_2035_275566f2\"           \"cargo_2035_27557511\"          \n[2595] \"cargo_2035_2755880b\"           \"cargo_2035_27559c28\"          \n[2597] \"cargo_2035_27560f09\"           \"cargo_2035_27561ff4\"          \n[2599] \"cargo_2035_2756251f\"           \"cargo_2035_2756351e\"          \n[2601] \"cargo_2035_27565c33\"           \"cargo_2035_275665e0\"          \n[2603] \"cargo_2035_2756784f\"           \"cargo_2035_27568e5d\"          \n[2605] \"cargo_2035_275696fd\"           \"cargo_2035_2757044a\"          \n[2607] \"cargo_2035_275712ec\"           \"cargo_2035_27572a45\"          \n[2609] \"cargo_2035_275734cc\"           \"cargo_2035_275748a6\"          \n[2611] \"cargo_2035_27576410\"           \"cargo_2035_27577be1\"          \n[2613] \"cargo_2035_27578e87\"           \"cargo_2035_27579c76\"          \n[2615] \"cargo_2035_27580a4a\"           \"cargo_2035_27581f9f\"          \n[2617] \"cargo_2035_27582038\"           \"cargo_2035_27583715\"          \n[2619] \"cargo_2035_27584f66\"           \"cargo_2035_275856f2\"          \n[2621] \"cargo_2035_27587fe5\"           \"cargo_2035_275887ca\"          \n[2623] \"cargo_2035_27589fdc\"           \"cargo_2035_275900e9\"          \n[2625] \"cargo_2035_27591683\"           \"cargo_2035_27592e9e\"          \n[2627] \"cargo_2035_2759395c\"           \"cargo_2035_27594d13\"          \n[2629] \"cargo_2035_27595ed3\"           \"cargo_2035_275967e6\"          \n[2631] \"cargo_2035_275987f2\"           \"cargo_2035_27599f05\"          \n[2633] \"cargo_2035_276001b7\"           \"cargo_2035_27601dca\"          \n[2635] \"cargo_2035_27602f19\"           \"cargo_2035_27603b66\"          \n[2637] \"cargo_2035_27604f33\"           \"cargo_2035_27605520\"          \n[2639] \"cargo_2035_27606f3c\"           \"cargo_2035_276073f3\"          \n[2641] \"cargo_2035_2760926b\"           \"cargo_2035_27610861\"          \n[2643] \"cargo_2035_27611f27\"           \"cargo_2035_27612492\"          \n[2645] \"cargo_2035_27613ee5\"           \"cargo_2035_27614127\"          \n[2647] \"cargo_2035_27615b38\"           \"cargo_2035_27616be5\"          \n[2649] \"cargo_2035_276173c7\"           \"cargo_2035_276187fe\"          \n[2651] \"cargo_2035_27620fc3\"           \"cargo_2035_2762171e\"          \n[2653] \"cargo_2035_27622a63\"           \"cargo_2035_27623ee3\"          \n[2655] \"cargo_2035_2762482e\"           \"cargo_2035_27625b9e\"          \n[2657] \"cargo_2035_27626b7f\"           \"cargo_2035_276278c7\"          \n[2659] \"cargo_2035_27628367\"           \"cargo_2035_27629d4c\"          \n[2661] \"cargo_2035_27631aa1\"           \"cargo_2035_2763212b\"          \n[2663] \"cargo_2035_27633ab1\"           \"cargo_2035_27635493\"          \n[2665] \"cargo_2035_276368a0\"           \"cargo_2035_2763705c\"          \n[2667] \"cargo_2035_27638692\"           \"cargo_2035_2763972f\"          \n[2669] \"cargo_2035_27640d67\"           \"cargo_2035_27641289\"          \n[2671] \"cargo_2035_276426df\"           \"cargo_2035_276437b3\"          \n[2673] \"cargo_2035_27644762\"           \"cargo_2035_27645875\"          \n[2675] \"cargo_2035_27646428\"           \"cargo_2035_27647b6b\"          \n[2677] \"cargo_2035_27648c7b\"           \"cargo_2035_2764918f\"          \n[2679] \"cargo_2035_2765064f\"           \"cargo_2035_27651a0f\"          \n[2681] \"cargo_2035_27652b54\"           \"cargo_2035_27653e3d\"          \n[2683] \"cargo_2035_27654690\"           \"cargo_2035_27655081\"          \n[2685] \"cargo_2035_276566d1\"           \"cargo_2035_27657b6c\"          \n[2687] \"cargo_2035_27658494\"           \"cargo_2035_276599dd\"          \n[2689] \"cargo_2035_27660d39\"           \"cargo_2035_27661966\"          \n[2691] \"cargo_2035_27662a42\"           \"cargo_2035_276630b4\"          \n[2693] \"cargo_2035_2766434f\"           \"cargo_2035_27665b0f\"          \n[2695] \"cargo_2035_276661e4\"           \"cargo_2035_2766785e\"          \n[2697] \"cargo_2035_27668ded\"           \"cargo_2035_27669b28\"          \n[2699] \"cargo_2035_27670033\"           \"cargo_2035_27671ab8\"          \n[2701] \"cargo_2035_27672e33\"           \"cargo_2035_27673078\"          \n[2703] \"cargo_2035_27674b84\"           \"cargo_2035_276754d4\"          \n[2705] \"cargo_2035_276767bb\"           \"cargo_2035_276770f7\"          \n[2707] \"cargo_2035_276783f8\"           \"cargo_2035_276799bc\"          \n[2709] \"cargo_2035_276800eb\"           \"cargo_2035_27681a11\"          \n[2711] \"cargo_2035_27682afc\"           \"cargo_2035_2768329d\"          \n[2713] \"cargo_2035_2768406f\"           \"cargo_2035_276851a1\"          \n[2715] \"cargo_2035_276869b4\"           \"cargo_2035_27687904\"          \n[2717] \"cargo_2035_27688cdf\"           \"cargo_2035_27689295\"          \n[2719] \"cargo_2035_27690ab3\"           \"cargo_2035_2769154b\"          \n[2721] \"cargo_2035_27692095\"           \"cargo_2035_2769311b\"          \n[2723] \"cargo_2035_27694013\"           \"cargo_2035_27695e0a\"          \n[2725] \"cargo_2035_27696962\"           \"cargo_2035_27697d57\"          \n[2727] \"cargo_2035_27698b5c\"           \"cargo_2035_27699b7e\"          \n[2729] \"cargo_2035_27700fac\"           \"cargo_2035_27701110\"          \n[2731] \"cargo_2035_27702cb4\"           \"cargo_2035_27703053\"          \n[2733] \"cargo_2035_27704172\"           \"cargo_2035_27705adb\"          \n[2735] \"cargo_2035_2770686f\"           \"cargo_2035_27707ea0\"          \n[2737] \"cargo_2035_277085d8\"           \"cargo_2035_27709e24\"          \n[2739] \"cargo_2035_277103ab\"           \"cargo_2035_277115c5\"          \n[2741] \"cargo_2035_27712d33\"           \"cargo_2035_27713e43\"          \n[2743] \"cargo_2035_27714827\"           \"cargo_2035_277156cc\"          \n[2745] \"cargo_2035_27716c6c\"           \"cargo_2035_277172c8\"          \n[2747] \"cargo_2035_2771888e\"           \"cargo_2035_27723e32\"          \n[2749] \"cargo_2035_277307fe\"           \"cargo_2035_2773233d\"          \n[2751] \"cargo_2035_2773395b\"           \"cargo_2035_2773423f\"          \n[2753] \"cargo_2035_277352c9\"           \"cargo_2035_27737270\"          \n[2755] \"cargo_2035_27738fec\"           \"cargo_2035_27739bda\"          \n[2757] \"cargo_2035_277417b1\"           \"cargo_2035_27742fda\"          \n[2759] \"cargo_2035_27743b04\"           \"cargo_2035_2774568c\"          \n[2761] \"cargo_2035_27747557\"           \"cargo_2035_277493ad\"          \n[2763] \"cargo_2035_27758c78\"           \"cargo_2035_27759234\"          \n[2765] \"cargo_2035_27760381\"           \"cargo_2035_27761f29\"          \n[2767] \"cargo_2035_277626be\"           \"cargo_2035_277631cd\"          \n[2769] \"cargo_2035_2776497d\"           \"cargo_2035_27765672\"          \n[2771] \"cargo_2035_2776649b\"           \"cargo_2035_27769102\"          \n[2773] \"cargo_2035_27771a6a\"           \"cargo_2035_27773f51\"          \n[2775] \"cargo_2035_27774770\"           \"cargo_2035_27775d9b\"          \n[2777] \"cargo_2035_27776cf7\"           \"cargo_2035_27777176\"          \n[2779] \"cargo_2035_27778be3\"           \"cargo_2035_2778097e\"          \n[2781] \"cargo_2035_27781f41\"           \"cargo_2035_27788ead\"          \n[2783] \"cargo_2035_2778947a\"           \"cargo_2035_27790895\"          \n[2785] \"cargo_2035_2779177f\"           \"cargo_2035_277920ff\"          \n[2787] \"cargo_2035_27793873\"           \"cargo_2035_27794891\"          \n[2789] \"cargo_2035_277951a7\"           \"cargo_2035_27796dec\"          \n[2791] \"cargo_2035_27797f51\"           \"cargo_2035_277984ff\"          \n[2793] \"cargo_2035_27799772\"           \"cargo_2035_27800528\"          \n[2795] \"cargo_2035_27801a5e\"           \"cargo_2035_27802e52\"          \n[2797] \"cargo_2035_27803837\"           \"cargo_2035_27804dc7\"          \n[2799] \"cargo_2035_27805373\"           \"cargo_2035_278065d4\"          \n[2801] \"cargo_2035_278070bc\"           \"cargo_2035_27808a56\"          \n[2803] \"cargo_2035_278097a4\"           \"cargo_2035_27810437\"          \n[2805] \"cargo_2035_27811279\"           \"cargo_2035_27812ae5\"          \n[2807] \"cargo_2035_27813f49\"           \"cargo_2035_27814dbb\"          \n[2809] \"cargo_2035_278158ce\"           \"cargo_2035_27816ab6\"          \n[2811] \"cargo_2035_27817e33\"           \"cargo_2035_278184c3\"          \n[2813] \"cargo_2035_278194c4\"           \"cargo_2035_27820a1a\"          \n[2815] \"cargo_2035_27821b1c\"           \"cargo_2035_27822c33\"          \n[2817] \"cargo_2035_27823265\"           \"cargo_2035_27824da1\"          \n[2819] \"cargo_2035_27825827\"           \"cargo_2035_27826228\"          \n[2821] \"cargo_2035_27827a16\"           \"cargo_2035_27828ffa\"          \n[2823] \"cargo_2035_27829110\"           \"cargo_2035_2783053a\"          \n[2825] \"cargo_2035_27831f8d\"           \"cargo_2035_27832bd7\"          \n[2827] \"cargo_2035_2783309b\"           \"cargo_2035_27834e1b\"          \n[2829] \"cargo_2035_27835938\"           \"cargo_2035_27843d26\"          \n[2831] \"cargo_2035_27846940\"           \"cargo_2035_278479e2\"          \n[2833] \"cargo_2035_27848e77\"           \"cargo_2035_27849bbb\"          \n[2835] \"cargo_2035_2785059e\"           \"cargo_2035_27851415\"          \n[2837] \"cargo_2035_27852e31\"           \"cargo_2035_278534d4\"          \n[2839] \"cargo_2035_27854918\"           \"cargo_2035_278615ec\"          \n[2841] \"cargo_2035_27867bb5\"           \"cargo_2035_27869087\"          \n[2843] \"cargo_2035_27871cb7\"           \"cargo_2035_27873d7d\"          \n[2845] \"cargo_2035_27875365\"           \"cargo_2035_27877bfa\"          \n[2847] \"cargo_2035_27882e60\"           \"cargo_2035_27883c31\"          \n[2849] \"cargo_2035_2788408b\"           \"cargo_2035_27885ed2\"          \n[2851] \"cargo_2035_27886456\"           \"cargo_2035_27887a60\"          \n[2853] \"cargo_2035_278887e9\"           \"cargo_2035_278892bb\"          \n[2855] \"cargo_2035_27890a5f\"           \"cargo_2035_278916d8\"          \n[2857] \"cargo_2035_27893eee\"           \"cargo_2035_278946b7\"          \n[2859] \"cargo_2035_27895231\"           \"cargo_2035_27896f85\"          \n[2861] \"cargo_2035_278978da\"           \"cargo_2035_27898201\"          \n[2863] \"cargo_2035_27906f30\"           \"cargo_2035_27909784\"          \n[2865] \"cargo_2035_27910a64\"           \"cargo_2035_27911e0c\"          \n[2867] \"cargo_2035_27912d20\"           \"cargo_2035_27914c15\"          \n[2869] \"cargo_2035_27915bd2\"           \"cargo_2035_27917ddf\"          \n[2871] \"cargo_2035_27919414\"           \"cargo_2035_279215dc\"          \n[2873] \"cargo_2035_27923e81\"           \"cargo_2035_27924f1f\"          \n[2875] \"cargo_2035_27925e32\"           \"cargo_2035_2792611c\"          \n[2877] \"cargo_2035_27927fed\"           \"cargo_2035_27928019\"          \n[2879] \"cargo_2035_27931dc2\"           \"cargo_2035_279329aa\"          \n[2881] \"cargo_2035_27934a9a\"           \"cargo_2035_279352a3\"          \n[2883] \"cargo_2035_279377dc\"           \"cargo_2035_27938d37\"          \n[2885] \"cargo_2035_279418dc\"           \"cargo_2035_27942002\"          \n[2887] \"cargo_2035_27945cb3\"           \"cargo_2035_27946e6b\"          \n[2889] \"cargo_2035_27948535\"           \"cargo_2035_2795207a\"          \n[2891] \"cargo_2035_27953b64\"           \"cargo_2035_27954309\"          \n[2893] \"cargo_2035_2795555c\"           \"cargo_2035_27956e39\"          \n[2895] \"cargo_2035_27958d1d\"           \"cargo_2035_2795952c\"          \n[2897] \"cargo_2035_27960276\"           \"cargo_2035_2796180b\"          \n[2899] \"cargo_2035_27962f56\"           \"cargo_2035_2796370e\"          \n[2901] \"cargo_2035_279654cc\"           \"cargo_2035_27967431\"          \n[2903] \"cargo_2035_27968e56\"           \"cargo_2035_27969133\"          \n[2905] \"cargo_2035_279708b8\"           \"cargo_2035_279719b7\"          \n[2907] \"cargo_2035_27976280\"           \"cargo_2035_279782b2\"          \n[2909] \"cargo_2035_279793a7\"           \"cargo_2035_279807eb\"          \n[2911] \"cargo_2035_279810c7\"           \"cargo_2035_27982bab\"          \n[2913] \"cargo_2035_27983c11\"           \"cargo_2035_279843af\"          \n[2915] \"cargo_2035_279859e0\"           \"cargo_2035_27986589\"          \n[2917] \"cargo_2035_279873bb\"           \"cargo_2035_279881cc\"          \n[2919] \"cargo_2035_2798901c\"           \"cargo_2035_27990fb1\"          \n[2921] \"cargo_2035_27991e2e\"           \"cargo_2035_27992fd7\"          \n[2923] \"cargo_2035_279937eb\"           \"cargo_2035_27994f4b\"          \n[2925] \"cargo_2035_27995a4b\"           \"cargo_2035_27996833\"          \n[2927] \"cargo_2035_27997b33\"           \"cargo_2035_27998afe\"          \n[2929] \"cargo_2035_279996df\"           \"cargo_2035_28000476\"          \n[2931] \"cargo_2035_280014d5\"           \"cargo_2035_280027f9\"          \n[2933] \"cargo_2035_2800334d\"           \"cargo_2035_280044d9\"          \n[2935] \"cargo_2035_2800569c\"           \"cargo_2035_28006a7d\"          \n[2937] \"cargo_2035_28007a33\"           \"cargo_2035_2800836a\"          \n[2939] \"cargo_2035_28009041\"           \"cargo_2035_280109ee\"          \n[2941] \"cargo_2035_2801156f\"           \"cargo_2035_280121f4\"          \n[2943] \"cargo_2035_28013c9c\"           \"cargo_2035_2801447b\"          \n[2945] \"cargo_2035_28015cf9\"           \"cargo_2035_280160af\"          \n[2947] \"cargo_2035_2801721a\"           \"cargo_2035_28018c74\"          \n[2949] \"cargo_2035_28019053\"           \"cargo_2035_28020d07\"          \n[2951] \"cargo_2035_28021b14\"           \"cargo_2035_28022bfa\"          \n[2953] \"cargo_2035_28023e72\"           \"cargo_2035_280248e7\"          \n[2955] \"cargo_2035_28025623\"           \"cargo_2035_28026892\"          \n[2957] \"cargo_2035_28027463\"           \"cargo_2035_280288df\"          \n[2959] \"cargo_2035_2802936c\"           \"cargo_2035_28030c52\"          \n[2961] \"cargo_2035_28032840\"           \"cargo_2035_28033d6d\"          \n[2963] \"cargo_2035_28034622\"           \"cargo_2035_28035141\"          \n[2965] \"cargo_2035_28036bdd\"           \"cargo_2035_28037a4c\"          \n[2967] \"cargo_2035_28038a0d\"           \"cargo_2035_28039dda\"          \n[2969] \"cargo_2035_28040bb2\"           \"cargo_2035_28044392\"          \n[2971] \"cargo_2035_28045f8a\"           \"cargo_2035_28056c42\"          \n[2973] \"cargo_2035_28065342\"           \"cargo_2035_28066b69\"          \n[2975] \"cargo_2035_28067de6\"           \"cargo_2035_2806869a\"          \n[2977] \"cargo_2035_28069dcc\"           \"cargo_2035_2807091b\"          \n[2979] \"cargo_2035_28071c55\"           \"cargo_2035_28072952\"          \n[2981] \"cargo_2035_28073c8d\"           \"cargo_2035_2807479d\"          \n[2983] \"cargo_2035_28075556\"           \"cargo_2035_28076174\"          \n[2985] \"cargo_2035_2807721c\"           \"cargo_2035_28078681\"          \n[2987] \"cargo_2035_28079623\"           \"cargo_2035_280802ce\"          \n[2989] \"cargo_2035_28081952\"           \"cargo_2035_2808294f\"          \n[2991] \"cargo_2035_28083917\"           \"cargo_2035_2808436d\"          \n[2993] \"cargo_2035_28085edd\"           \"cargo_2035_28086dc7\"          \n[2995] \"cargo_2035_2808741b\"           \"cargo_2035_28088a6e\"          \n[2997] \"cargo_2035_28089e02\"           \"cargo_2035_28090be2\"          \n[2999] \"cargo_2035_28091df5\"           \"cargo_2035_28092930\"          \n[3001] \"cargo_2035_28093f5e\"           \"cargo_2035_28094373\"          \n[3003] \"cargo_2035_2809595e\"           \"cargo_2035_28096431\"          \n[3005] \"cargo_2035_28097bde\"           \"cargo_2035_28098db9\"          \n[3007] \"cargo_2035_28099adf\"           \"cargo_2035_28100e56\"          \n[3009] \"cargo_2035_281018b5\"           \"cargo_2035_281023a1\"          \n[3011] \"cargo_2035_28103c51\"           \"cargo_2035_28104711\"          \n[3013] \"cargo_2035_28105b05\"           \"cargo_2035_28106a99\"          \n[3015] \"cargo_2035_28107862\"           \"cargo_2035_28108922\"          \n[3017] \"cargo_2035_281099ec\"           \"cargo_2035_2811013b\"          \n[3019] \"cargo_2035_281110da\"           \"cargo_2035_281127fd\"          \n[3021] \"cargo_2035_281138c1\"           \"cargo_2035_2811483d\"          \n[3023] \"cargo_2035_281159ae\"           \"cargo_2035_28116aa2\"          \n[3025] \"cargo_2035_2811700d\"           \"cargo_2035_28118d3f\"          \n[3027] \"cargo_2035_28119e25\"           \"cargo_2035_2812071d\"          \n[3029] \"cargo_2035_28121cd6\"           \"cargo_2035_28122897\"          \n[3031] \"cargo_2035_2812332d\"           \"cargo_2035_28124c5b\"          \n[3033] \"cargo_2035_28125352\"           \"cargo_2035_28126af7\"          \n[3035] \"cargo_2035_281277c7\"           \"cargo_2035_2812892d\"          \n[3037] \"cargo_2035_281299ad\"           \"cargo_2035_281306c9\"          \n[3039] \"cargo_2035_2813198d\"           \"cargo_2035_281324f7\"          \n[3041] \"cargo_2035_28133c56\"           \"cargo_2035_281340f0\"          \n[3043] \"cargo_2035_281357e4\"           \"cargo_2035_2813617d\"          \n[3045] \"cargo_2035_28137a66\"           \"cargo_2035_28138762\"          \n[3047] \"cargo_2035_2813937d\"           \"cargo_2035_2814013f\"          \n[3049] \"cargo_2035_28141e9c\"           \"cargo_2035_28142948\"          \n[3051] \"cargo_2035_2814310b\"           \"cargo_2035_28144e02\"          \n[3053] \"cargo_2035_28145c36\"           \"cargo_2035_28146de9\"          \n[3055] \"cargo_2035_2814737b\"           \"cargo_2035_28148c12\"          \n[3057] \"cargo_2035_2814951a\"           \"cargo_2035_28150b10\"          \n[3059] \"cargo_2035_28151c14\"           \"cargo_2035_281529b8\"          \n[3061] \"cargo_2035_28153443\"           \"cargo_2035_281549bf\"          \n[3063] \"cargo_2035_28155e2d\"           \"cargo_2035_28156eb9\"          \n[3065] \"cargo_2035_28157fe2\"           \"cargo_2035_2815837b\"          \n[3067] \"cargo_2035_28159dea\"           \"cargo_2035_2816033b\"          \n[3069] \"cargo_2035_2816107b\"           \"cargo_2035_28170cdc\"          \n[3071] \"cargo_2035_281711e8\"           \"cargo_2035_28172868\"          \n[3073] \"cargo_2035_2817300d\"           \"cargo_2035_281749ae\"          \n[3075] \"cargo_2035_2817598d\"           \"cargo_2035_2817686c\"          \n[3077] \"cargo_2035_281773b7\"           \"cargo_2035_28178163\"          \n[3079] \"cargo_2035_28179f0c\"           \"cargo_2035_28180409\"          \n[3081] \"cargo_2035_28181aca\"           \"cargo_2035_28182442\"          \n[3083] \"cargo_2035_281846dc\"           \"cargo_2035_28185e62\"          \n[3085] \"cargo_2035_2818611e\"           \"cargo_2035_28189331\"          \n[3087] \"cargo_2035_2819034a\"           \"cargo_2035_281911c1\"          \n[3089] \"cargo_2035_28192da8\"           \"cargo_2035_2819361f\"          \n[3091] \"cargo_2035_28194839\"           \"cargo_2035_281950d9\"          \n[3093] \"cargo_2035_2819675f\"           \"cargo_2035_28197cb0\"          \n[3095] \"cargo_2035_28198c49\"           \"cargo_2035_2820006a\"          \n[3097] \"cargo_2035_2820173c\"           \"cargo_2035_2820242d\"          \n[3099] \"cargo_2035_28203854\"           \"cargo_2035_282047bd\"          \n[3101] \"cargo_2035_282057f4\"           \"cargo_2035_2820751f\"          \n[3103] \"cargo_2035_28208d10\"           \"cargo_2035_28209177\"          \n[3105] \"cargo_2035_28211269\"           \"cargo_2035_28212cc3\"          \n[3107] \"cargo_2035_28213a84\"           \"cargo_2035_282149f0\"          \n[3109] \"cargo_2035_28215b44\"           \"cargo_2035_282164f1\"          \n[3111] \"cargo_2035_282179c7\"           \"cargo_2035_282185d4\"          \n[3113] \"cargo_2035_282190c1\"           \"cargo_2035_2822008a\"          \n[3115] \"cargo_2035_28222feb\"           \"cargo_2035_28223080\"          \n[3117] \"cargo_2035_28224554\"           \"cargo_2035_28225dc1\"          \n[3119] \"cargo_2035_28226a35\"           \"cargo_2035_28227148\"          \n[3121] \"cargo_2035_282286c2\"           \"cargo_2035_2823497b\"          \n[3123] \"cargo_2035_28235740\"           \"cargo_2035_28236391\"          \n[3125] \"cargo_2035_2823725b\"           \"cargo_2035_28238364\"          \n[3127] \"cargo_2035_28239aef\"           \"cargo_2035_28240683\"          \n[3129] \"cargo_2035_2824165f\"           \"cargo_2035_28245cc8\"          \n[3131] \"cargo_2035_28250510\"           \"cargo_2035_28251e90\"          \n[3133] \"cargo_2035_282526cf\"           \"cargo_2035_28253551\"          \n[3135] \"cargo_2035_2825490c\"           \"cargo_2035_28255990\"          \n[3137] \"cargo_2035_2825633e\"           \"cargo_2035_28257492\"          \n[3139] \"cargo_2035_282587c0\"           \"cargo_2035_28259ec2\"          \n[3141] \"cargo_2035_28260acb\"           \"cargo_2035_28261173\"          \n[3143] \"cargo_2035_28262978\"           \"cargo_2035_282632c3\"          \n[3145] \"cargo_2035_2826480c\"           \"cargo_2035_282651ed\"          \n[3147] \"cargo_2035_28266815\"           \"cargo_2035_282679c4\"          \n[3149] \"cargo_2035_2826989c\"           \"cargo_2035_2827061f\"          \n[3151] \"cargo_2035_282714e0\"           \"cargo_2035_28272702\"          \n[3153] \"cargo_2035_2827366d\"           \"cargo_2035_282747ea\"          \n[3155] \"cargo_2035_28275be0\"           \"cargo_2035_282765da\"          \n[3157] \"cargo_2035_28277bd0\"           \"cargo_2035_28278c6d\"          \n[3159] \"cargo_2035_2828097c\"           \"cargo_2035_28281c90\"          \n[3161] \"cargo_2035_28282a50\"           \"cargo_2035_28283adb\"          \n[3163] \"cargo_2035_2828446e\"           \"cargo_2035_28285d0d\"          \n[3165] \"cargo_2035_2828633e\"           \"cargo_2035_28287a92\"          \n[3167] \"cargo_2035_28288e49\"           \"cargo_2035_28291134\"          \n[3169] \"cargo_2035_28292e0d\"           \"cargo_2035_28293025\"          \n[3171] \"cargo_2035_28299145\"           \"cargo_2035_28300de1\"          \n[3173] \"cargo_2035_28301f49\"           \"cargo_2035_28302a76\"          \n[3175] \"cargo_2035_28303939\"           \"cargo_2035_2830458c\"          \n[3177] \"cargo_2035_2830577a\"           \"cargo_2035_28306069\"          \n[3179] \"cargo_2035_28307b2f\"           \"cargo_2035_28308a6a\"          \n[3181] \"cargo_2035_28309e4c\"           \"cargo_2035_28310ad6\"          \n[3183] \"cargo_2035_28311194\"           \"cargo_2035_283124d4\"          \n[3185] \"cargo_2035_283134ee\"           \"cargo_2035_283147d7\"          \n[3187] \"cargo_2035_28315b12\"           \"cargo_2035_283160d6\"          \n[3189] \"cargo_2035_28317fd9\"           \"cargo_2035_28322c0e\"          \n[3191] \"cargo_2035_283297a8\"           \"cargo_2035_283303be\"          \n[3193] \"cargo_2035_2833106f\"           \"cargo_2035_28332486\"          \n[3195] \"cargo_2035_28333e64\"           \"cargo_2035_2833446c\"          \n[3197] \"cargo_2035_283356bc\"           \"cargo_2035_283368cf\"          \n[3199] \"cargo_2035_28337739\"           \"cargo_2035_2833806b\"          \n[3201] \"cargo_2035_2833924e\"           \"cargo_2035_28340ef5\"          \n[3203] \"cargo_2035_28341adc\"           \"cargo_2035_28342875\"          \n[3205] \"cargo_2035_28343c5d\"           \"cargo_2035_28344af6\"          \n[3207] \"cargo_2035_28345590\"           \"cargo_2035_28346f9e\"          \n[3209] \"cargo_2035_283479c0\"           \"cargo_2035_28348407\"          \n[3211] \"cargo_2035_28349ab4\"           \"cargo_2035_28350a9b\"          \n[3213] \"cargo_2035_28351841\"           \"cargo_2035_28352518\"          \n[3215] \"cargo_2035_28353eb8\"           \"cargo_2035_283542b0\"          \n[3217] \"cargo_2035_28355240\"           \"cargo_2035_28356749\"          \n[3219] \"cargo_2035_28357c15\"           \"cargo_2035_28358a18\"          \n[3221] \"cargo_2035_28359b69\"           \"cargo_2035_28360e7f\"          \n[3223] \"cargo_2035_28361344\"           \"cargo_2035_28366ed2\"          \n[3225] \"cargo_2035_28372f26\"           \"cargo_2035_283736cd\"          \n[3227] \"cargo_2035_28374b01\"           \"cargo_2035_28375a92\"          \n[3229] \"cargo_2035_28376768\"           \"cargo_2035_28377af4\"          \n[3231] \"cargo_2035_28378cd4\"           \"cargo_2035_283791dd\"          \n[3233] \"cargo_2035_28380511\"           \"cargo_2035_28381a5c\"          \n[3235] \"cargo_2035_28382a65\"           \"cargo_2035_2838330c\"          \n[3237] \"cargo_2035_28384012\"           \"cargo_2035_28385738\"          \n[3239] \"cargo_2035_28386f11\"           \"cargo_2035_28387b06\"          \n[3241] \"cargo_2035_28388d87\"           \"cargo_2035_28389049\"          \n[3243] \"cargo_2035_28390e99\"           \"cargo_2035_28391b4c\"          \n[3245] \"cargo_2035_28392774\"           \"cargo_2035_28393dad\"          \n[3247] \"cargo_2035_28394484\"           \"cargo_2035_28395ddc\"          \n[3249] \"cargo_2035_28396354\"           \"cargo_2035_28397f6c\"          \n[3251] \"cargo_2035_28398d0d\"           \"cargo_2035_28399239\"          \n[3253] \"cargo_2035_2840031c\"           \"cargo_2035_28401e24\"          \n[3255] \"cargo_2035_284025d5\"           \"cargo_2035_28403b14\"          \n[3257] \"cargo_2035_284041c4\"           \"cargo_2035_28405eb1\"          \n[3259] \"cargo_2035_2840690e\"           \"cargo_2035_28407ba4\"          \n[3261] \"cargo_2035_28408fd3\"           \"cargo_2035_28409049\"          \n[3263] \"cargo_2035_2841006e\"           \"cargo_2035_2841160a\"          \n[3265] \"cargo_2035_28412984\"           \"cargo_2035_28413b2b\"          \n[3267] \"cargo_2035_284142bf\"           \"cargo_2035_28415415\"          \n[3269] \"cargo_2035_284169b7\"           \"cargo_2035_28417d7e\"          \n[3271] \"cargo_2035_284185cc\"           \"cargo_2035_284197c9\"          \n[3273] \"cargo_2035_28420500\"           \"cargo_2035_28421130\"          \n[3275] \"cargo_2035_28422587\"           \"cargo_2035_28433dc1\"          \n[3277] \"cargo_2035_284343cb\"           \"cargo_2035_28435477\"          \n[3279] \"cargo_2035_28436303\"           \"cargo_2035_28437317\"          \n[3281] \"cargo_2035_28438e2a\"           \"cargo_2035_2843950c\"          \n[3283] \"cargo_2035_28440120\"           \"cargo_2035_284414b9\"          \n[3285] \"cargo_2035_284427f0\"           \"cargo_2035_284437b9\"          \n[3287] \"cargo_2035_28444ecd\"           \"cargo_2035_284457c7\"          \n[3289] \"cargo_2035_284464f9\"           \"cargo_2035_28447775\"          \n[3291] \"cargo_2035_28448fa7\"           \"cargo_2035_2844962e\"          \n[3293] \"cargo_2035_28450672\"           \"cargo_2035_28451608\"          \n[3295] \"cargo_2035_28452b54\"           \"cargo_2035_28453f8a\"          \n[3297] \"cargo_2035_284544ab\"           \"cargo_2035_28459c0f\"          \n[3299] \"cargo_2035_28465e29\"           \"cargo_2035_28466c1f\"          \n[3301] \"cargo_2035_284678a5\"           \"cargo_2035_2846824e\"          \n[3303] \"cargo_2035_28469704\"           \"cargo_2035_284700fc\"          \n[3305] \"cargo_2035_28472c10\"           \"cargo_2035_284739fe\"          \n[3307] \"cargo_2035_284742cd\"           \"cargo_2035_2847562d\"          \n[3309] \"cargo_2035_28476074\"           \"cargo_2035_2847991b\"          \n[3311] \"cargo_2035_28480eb0\"           \"cargo_2035_28489dfe\"          \n[3313] \"cargo_2035_28490882\"           \"cargo_2035_28491a13\"          \n[3315] \"cargo_2035_28492f55\"           \"cargo_2035_284939f7\"          \n[3317] \"cargo_2035_28494989\"           \"cargo_2035_28495b0c\"          \n[3319] \"cargo_2035_28496ea6\"           \"cargo_2035_284978ac\"          \n[3321] \"cargo_2035_28498dcc\"           \"cargo_2035_28499ed2\"          \n[3323] \"cargo_2035_285009dc\"           \"cargo_2035_28501030\"          \n[3325] \"cargo_2035_285026b1\"           \"cargo_2035_285031e4\"          \n[3327] \"cargo_2035_2850493c\"           \"cargo_2035_28505516\"          \n[3329] \"cargo_2035_28506dd0\"           \"cargo_2035_28507fcb\"          \n[3331] \"cargo_2035_28508390\"           \"cargo_2035_28509ad8\"          \n[3333] \"cargo_2035_2851042d\"           \"cargo_2035_285118ad\"          \n[3335] \"cargo_2035_28512999\"           \"cargo_2035_28513880\"          \n[3337] \"cargo_2035_2851434e\"           \"cargo_2035_2851579b\"          \n[3339] \"cargo_2035_2851637d\"           \"cargo_2035_28517b21\"          \n[3341] \"cargo_2035_285188d6\"           \"cargo_2035_28519919\"          \n[3343] \"cargo_2035_285206ca\"           \"cargo_2035_285216a3\"          \n[3345] \"cargo_2035_28522ee6\"           \"cargo_2035_28523192\"          \n[3347] \"cargo_2035_2852422a\"           \"cargo_2035_28525077\"          \n[3349] \"cargo_2035_28526fa6\"           \"cargo_2035_28527f5a\"          \n[3351] \"cargo_2035_28528bcc\"           \"cargo_2035_285297e3\"          \n[3353] \"cargo_2035_285305c1\"           \"cargo_2035_2853151a\"          \n[3355] \"cargo_2035_2853242d\"           \"cargo_2035_28533899\"          \n[3357] \"cargo_2035_285348cd\"           \"cargo_2035_285358b0\"          \n[3359] \"cargo_2035_28544ad8\"           \"cargo_2035_28547470\"          \n[3361] \"cargo_2035_2854828d\"           \"cargo_2035_2854906a\"          \n[3363] \"cargo_2035_28551b28\"           \"cargo_2035_28552459\"          \n[3365] \"cargo_2035_28553c7b\"           \"cargo_2035_28554029\"          \n[3367] \"cargo_2035_28555cd1\"           \"cargo_2035_285579bf\"          \n[3369] \"cargo_2035_285584e7\"           \"cargo_2035_28559bda\"          \n[3371] \"cargo_2035_28560cf3\"           \"cargo_2035_28562de2\"          \n[3373] \"cargo_2035_28563c2e\"           \"cargo_2035_28564b8d\"          \n[3375] \"cargo_2035_28565bf4\"           \"cargo_2035_285667a0\"          \n[3377] \"cargo_2035_2856701d\"           \"cargo_2035_28568f00\"          \n[3379] \"cargo_2035_28569a20\"           \"cargo_2035_28570aab\"          \n[3381] \"cargo_2035_28571890\"           \"cargo_2035_28573e7d\"          \n[3383] \"cargo_2035_28574c9e\"           \"cargo_2035_28575ac9\"          \n[3385] \"cargo_2035_28576686\"           \"cargo_2035_28577671\"          \n[3387] \"cargo_2035_2857892b\"           \"cargo_2035_28579748\"          \n[3389] \"cargo_2035_28580f64\"           \"cargo_2035_2858132b\"          \n[3391] \"cargo_2035_28583dac\"           \"cargo_2035_28584c14\"          \n[3393] \"cargo_2035_2858548c\"           \"cargo_2035_28586159\"          \n[3395] \"cargo_2035_2858710d\"           \"cargo_2035_28588628\"          \n[3397] \"cargo_2035_285899d2\"           \"cargo_2035_28590de6\"          \n[3399] \"cargo_2035_28591d13\"           \"cargo_2035_285930ac\"          \n[3401] \"cargo_2035_28594ab5\"           \"cargo_2035_28595b3f\"          \n[3403] \"cargo_2035_28596198\"           \"cargo_2035_28597faa\"          \n[3405] \"cargo_2035_28598501\"           \"cargo_2035_285998db\"          \n[3407] \"cargo_2035_28600c4b\"           \"cargo_2035_28602768\"          \n[3409] \"cargo_2035_28606e04\"           \"cargo_2035_28616ab5\"          \n[3411] \"cargo_2035_28617b11\"           \"cargo_2035_286182c4\"          \n[3413] \"cargo_2035_28619cab\"           \"cargo_2035_286208a5\"          \n[3415] \"cargo_2035_286215e1\"           \"cargo_2035_2862260e\"          \n[3417] \"cargo_2035_2862328e\"           \"cargo_2035_28624b3e\"          \n[3419] \"cargo_2035_2862576f\"           \"cargo_2035_28628911\"          \n[3421] \"cargo_2035_28629391\"           \"cargo_2035_28630ac2\"          \n[3423] \"cargo_2035_286318e0\"           \"cargo_2035_28632d51\"          \n[3425] \"cargo_2035_28634694\"           \"cargo_2035_2863581b\"          \n[3427] \"cargo_2035_28636034\"           \"cargo_2035_28637399\"          \n[3429] \"cargo_2035_286392c8\"           \"cargo_2035_28640eae\"          \n[3431] \"cargo_2035_28641b5d\"           \"cargo_2035_2864256f\"          \n[3433] \"cargo_2035_28643282\"           \"cargo_2035_28644c31\"          \n[3435] \"cargo_2035_28645f9d\"           \"cargo_2035_28647e31\"          \n[3437] \"cargo_2035_28648cbc\"           \"cargo_2035_286499eb\"          \n[3439] \"cargo_2035_28650f97\"           \"cargo_2035_28651ab4\"          \n[3441] \"cargo_2035_286520b7\"           \"cargo_2035_286536a4\"          \n[3443] \"cargo_2035_28654b58\"           \"cargo_2035_28655add\"          \n[3445] \"cargo_2035_28656cb8\"           \"cargo_2035_28657686\"          \n[3447] \"cargo_2035_28658af2\"           \"cargo_2035_286594e3\"          \n[3449] \"cargo_2035_2866037f\"           \"cargo_2035_286611aa\"          \n[3451] \"cargo_2035_28662db7\"           \"cargo_2035_286636ad\"          \n[3453] \"cargo_2035_286643b0\"           \"cargo_2035_28665fc1\"          \n[3455] \"cargo_2035_28666f31\"           \"cargo_2035_28667e27\"          \n[3457] \"cargo_2035_286686a3\"           \"cargo_2035_286694a7\"          \n[3459] \"cargo_2035_28670d50\"           \"cargo_2035_2867161c\"          \n[3461] \"cargo_2035_28672bd1\"           \"cargo_2035_28673411\"          \n[3463] \"cargo_2035_28674806\"           \"cargo_2035_2867577c\"          \n[3465] \"cargo_2035_28676ac4\"           \"cargo_2035_286771a1\"          \n[3467] \"cargo_2035_28678dd7\"           \"cargo_2035_286791f6\"          \n[3469] \"cargo_2035_28680d4c\"           \"cargo_2035_28681870\"          \n[3471] \"cargo_2035_28682e4c\"           \"cargo_2035_2868367c\"          \n[3473] \"cargo_2035_28684dc0\"           \"cargo_2035_286857c7\"          \n[3475] \"cargo_2035_28686ce7\"           \"cargo_2035_28687d59\"          \n[3477] \"cargo_2035_28688c13\"           \"cargo_2035_28689082\"          \n[3479] \"cargo_2035_28690714\"           \"cargo_2035_28691976\"          \n[3481] \"cargo_2035_28692fdd\"           \"cargo_2035_2869300d\"          \n[3483] \"cargo_2035_28694036\"           \"cargo_2035_2869555f\"          \n[3485] \"cargo_2035_28696b50\"           \"cargo_2035_28697d72\"          \n[3487] \"cargo_2035_28698f37\"           \"cargo_2035_28699a97\"          \n[3489] \"cargo_2035_28700e86\"           \"cargo_2035_28701732\"          \n[3491] \"cargo_2035_2870276c\"           \"cargo_2035_28703c87\"          \n[3493] \"cargo_2035_28704e2b\"           \"cargo_2035_28705cc9\"          \n[3495] \"cargo_2035_28706be9\"           \"cargo_2035_2870703a\"          \n[3497] \"cargo_2035_28708662\"           \"cargo_2035_287092a2\"          \n[3499] \"cargo_2035_28710f0a\"           \"cargo_2035_28711db6\"          \n[3501] \"cargo_2035_28712877\"           \"cargo_2035_2871369a\"          \n[3503] \"cargo_2035_28714686\"           \"cargo_2035_28715ac1\"          \n[3505] \"cargo_2035_287165aa\"           \"cargo_2035_28717df1\"          \n[3507] \"cargo_2035_2871850f\"           \"cargo_2035_28719e33\"          \n[3509] \"cargo_2035_28720cb7\"           \"cargo_2035_287212cf\"          \n[3511] \"cargo_2035_2872244d\"           \"cargo_2035_2872309a\"          \n[3513] \"cargo_2035_28724ad3\"           \"cargo_2035_28725e9f\"          \n[3515] \"cargo_2035_287264b5\"           \"cargo_2035_28727d5d\"          \n[3517] \"cargo_2035_28728bd7\"           \"cargo_2035_28729306\"          \n[3519] \"cargo_2035_287302ea\"           \"cargo_2035_28735ded\"          \n[3521] \"cargo_2035_28750b60\"           \"cargo_2035_28751860\"          \n[3523] \"cargo_2035_287521e0\"           \"cargo_2035_2875396f\"          \n[3525] \"cargo_2035_28754814\"           \"cargo_2035_287552e1\"          \n[3527] \"cargo_2035_28757f09\"           \"cargo_2035_28758400\"          \n[3529] \"cargo_2035_28759679\"           \"cargo_2035_28761e71\"          \n[3531] \"cargo_2035_28762f2f\"           \"cargo_2035_28763dfd\"          \n[3533] \"cargo_2035_28764fe7\"           \"cargo_2035_287657e8\"          \n[3535] \"cargo_2035_2876626d\"           \"cargo_2035_28767f72\"          \n[3537] \"cargo_2035_28768aa2\"           \"cargo_2035_287696c2\"          \n[3539] \"cargo_2035_287708d6\"           \"cargo_2035_287715ee\"          \n[3541] \"cargo_2035_287720a7\"           \"cargo_2035_28773d79\"          \n[3543] \"cargo_2035_2877517e\"           \"cargo_2035_28776ca4\"          \n[3545] \"cargo_2035_28777cc4\"           \"cargo_2035_2877810c\"          \n[3547] \"cargo_2035_287793e7\"           \"cargo_2035_28780089\"          \n[3549] \"cargo_2035_28782d37\"           \"cargo_2035_28783499\"          \n[3551] \"cargo_2035_28784f9e\"           \"cargo_2035_28785021\"          \n[3553] \"cargo_2035_287866ed\"           \"cargo_2035_28787286\"          \n[3555] \"cargo_2035_28788e42\"           \"cargo_2035_28793346\"          \n[3557] \"cargo_2035_28799499\"           \"cargo_2035_28800607\"          \n[3559] \"cargo_2035_28801c50\"           \"cargo_2035_28802eb0\"          \n[3561] \"cargo_2035_28804ee4\"           \"cargo_2035_28805365\"          \n[3563] \"cargo_2035_28806f3a\"           \"cargo_2035_2880824a\"          \n[3565] \"cargo_2035_28810ebb\"           \"cargo_2035_28811792\"          \n[3567] \"cargo_2035_288121e1\"           \"cargo_2035_288138ab\"          \n[3569] \"cargo_2035_28814d57\"           \"cargo_2035_28815c3c\"          \n[3571] \"cargo_2035_288163f7\"           \"cargo_2035_28817762\"          \n[3573] \"cargo_2035_28818673\"           \"cargo_2035_28819786\"          \n[3575] \"cargo_2035_28820904\"           \"cargo_2035_28821e25\"          \n[3577] \"cargo_2035_28822575\"           \"cargo_2035_28823ab2\"          \n[3579] \"cargo_2035_28824db0\"           \"cargo_2035_28825efc\"          \n[3581] \"cargo_2035_28826389\"           \"cargo_2035_28827a2f\"          \n[3583] \"cargo_2035_2882831f\"           \"cargo_2035_28829543\"          \n[3585] \"cargo_2035_28830df4\"           \"cargo_2035_28831e2b\"          \n[3587] \"cargo_2035_2883238a\"           \"cargo_2035_288333ed\"          \n[3589] \"cargo_2035_28834337\"           \"cargo_2035_28839efb\"          \n[3591] \"cargo_2035_28846cd5\"           \"cargo_2035_28847e4a\"          \n[3593] \"cargo_2035_2884889b\"           \"cargo_2035_288491dd\"          \n[3595] \"cargo_2035_28850d37\"           \"cargo_2035_28851cd5\"          \n[3597] \"cargo_2035_288524c7\"           \"cargo_2035_28853a42\"          \n[3599] \"cargo_2035_28854837\"           \"cargo_2035_288559cd\"          \n[3601] \"cargo_2035_288561e6\"           \"cargo_2035_288578f3\"          \n[3603] \"cargo_2035_288580d3\"           \"cargo_2035_28859587\"          \n[3605] \"cargo_2035_28860e20\"           \"cargo_2035_2886138a\"          \n[3607] \"cargo_2035_2886270f\"           \"cargo_2035_28863a72\"          \n[3609] \"cargo_2035_28864afb\"           \"cargo_2035_28865e79\"          \n[3611] \"cargo_2035_28866286\"           \"cargo_2035_28867f80\"          \n[3613] \"cargo_2035_288681cf\"           \"cargo_2035_28869143\"          \n[3615] \"cargo_2035_28870fa9\"           \"cargo_2035_28871190\"          \n[3617] \"cargo_2035_288726d0\"           \"cargo_2035_28873a60\"          \n[3619] \"cargo_2035_28874684\"           \"cargo_2035_2887544e\"          \n[3621] \"cargo_2035_288763b8\"           \"cargo_2035_288779f1\"          \n[3623] \"cargo_2035_2887805d\"           \"cargo_2035_28879b9d\"          \n[3625] \"cargo_2035_28880463\"           \"cargo_2035_288810ba\"          \n[3627] \"cargo_2035_2888254f\"           \"cargo_2035_28883840\"          \n[3629] \"cargo_2035_28884dfd\"           \"cargo_2035_28885226\"          \n[3631] \"cargo_2035_28886e4d\"           \"cargo_2035_288879fe\"          \n[3633] \"cargo_2035_28888ef4\"           \"cargo_2035_288894e0\"          \n[3635] \"cargo_2035_288902eb\"           \"cargo_2035_28891677\"          \n[3637] \"cargo_2035_28892d68\"           \"cargo_2035_288934b0\"          \n[3639] \"cargo_2035_28894f01\"           \"cargo_2035_28895262\"          \n[3641] \"cargo_2035_2889644f\"           \"cargo_2035_28897646\"          \n[3643] \"cargo_2035_28898249\"           \"cargo_2035_288993c3\"          \n[3645] \"cargo_2035_28900c35\"           \"cargo_2035_28901011\"          \n[3647] \"cargo_2035_2890265e\"           \"cargo_2035_28903337\"          \n[3649] \"cargo_2035_28904f1d\"           \"cargo_2035_289054d3\"          \n[3651] \"cargo_2035_28906d38\"           \"cargo_2035_28907762\"          \n[3653] \"cargo_2035_28908794\"           \"cargo_2035_2890936b\"          \n[3655] \"cargo_2035_28910be2\"           \"cargo_2035_28911839\"          \n[3657] \"cargo_2035_28912d75\"           \"cargo_2035_289130b2\"          \n[3659] \"cargo_2035_289142a8\"           \"cargo_2035_289153eb\"          \n[3661] \"cargo_2035_289166fd\"           \"cargo_2035_28917d03\"          \n[3663] \"cargo_2035_28918c37\"           \"cargo_2035_28919e72\"          \n[3665] \"cargo_2035_2892096e\"           \"cargo_2035_2892178d\"          \n[3667] \"cargo_2035_289220e4\"           \"cargo_2035_28923b0c\"          \n[3669] \"cargo_2035_289246b6\"           \"cargo_2035_28925628\"          \n[3671] \"cargo_2035_28926218\"           \"cargo_2035_289279e2\"          \n[3673] \"cargo_2035_28928667\"           \"cargo_2035_289292f2\"          \n[3675] \"cargo_2035_28930f74\"           \"cargo_2035_28931fd5\"          \n[3677] \"cargo_2035_289411a0\"           \"cargo_2035_28942d3f\"          \n[3679] \"cargo_2035_28943dbc\"           \"cargo_2035_289440af\"          \n[3681] \"cargo_2035_289457dc\"           \"cargo_2035_28946a12\"          \n[3683] \"cargo_2035_2894792b\"           \"cargo_2035_28948cca\"          \n[3685] \"cargo_2035_2894900c\"           \"cargo_2035_2895051d\"          \n[3687] \"cargo_2035_28951e4f\"           \"cargo_2035_28954e64\"          \n[3689] \"cargo_2035_28959397\"           \"cargo_2035_28960de6\"          \n[3691] \"cargo_2035_28961dcc\"           \"cargo_2035_289624b9\"          \n[3693] \"cargo_2035_28963403\"           \"cargo_2035_28964cfc\"          \n[3695] \"cargo_2035_28965828\"           \"cargo_2035_289661e2\"          \n[3697] \"cargo_2035_28967131\"           \"cargo_2035_28968fec\"          \n[3699] \"cargo_2035_28969e6f\"           \"cargo_2035_2897078c\"          \n[3701] \"cargo_2035_28971b18\"           \"cargo_2035_28972b55\"          \n[3703] \"cargo_2035_289740cc\"           \"cargo_2035_289751c3\"          \n[3705] \"cargo_2035_28976077\"           \"cargo_2035_289778ed\"          \n[3707] \"cargo_2035_28978035\"           \"cargo_2035_28980f52\"          \n[3709] \"cargo_2035_289829d5\"           \"cargo_2035_28983493\"          \n[3711] \"cargo_2035_28985350\"           \"cargo_2035_289869a1\"          \n[3713] \"cargo_2035_28988f25\"           \"cargo_2035_28989e68\"          \n[3715] \"cargo_2035_28992184\"           \"cargo_2035_2899383d\"          \n[3717] \"cargo_2035_2899468e\"           \"cargo_2035_28996660\"          \n[3719] \"cargo_2035_28997ace\"           \"cargo_2035_289985d3\"          \n[3721] \"cargo_2035_290004b8\"           \"cargo_2035_290012dd\"          \n[3723] \"cargo_2035_29002d6d\"           \"cargo_2035_29003f89\"          \n[3725] \"cargo_2035_290046e2\"           \"cargo_2035_29005d6e\"          \n[3727] \"cargo_2035_2900782c\"           \"cargo_2035_290087a6\"          \n[3729] \"cargo_2035_29011aab\"           \"cargo_2035_29013df9\"          \n[3731] \"cargo_2035_29015ee7\"           \"cargo_2035_29016834\"          \n[3733] \"cargo_2035_29017850\"           \"cargo_2035_29018e44\"          \n[3735] \"cargo_2035_2901965e\"           \"cargo_2035_29022113\"          \n[3737] \"cargo_2035_29023970\"           \"cargo_2035_290244b4\"          \n[3739] \"cargo_2035_29026b6b\"           \"cargo_2035_29027cd7\"          \n[3741] \"cargo_2035_290282c6\"           \"cargo_2035_29029ab3\"          \n[3743] \"cargo_2035_29030dc5\"           \"cargo_2035_29040244\"          \n[3745] \"cargo_2035_290410d2\"           \"cargo_2035_290426fc\"          \n[3747] \"cargo_2035_2904349a\"           \"cargo_2035_29044784\"          \n[3749] \"cargo_2035_29045ad6\"           \"cargo_2035_290463d9\"          \n[3751] \"cargo_2035_29049393\"           \"cargo_2035_290510ce\"          \n[3753] \"cargo_2035_29052155\"           \"cargo_2035_290536e9\"          \n[3755] \"cargo_2035_290543a2\"           \"cargo_2035_29055cb1\"          \n[3757] \"cargo_2035_29056147\"           \"cargo_2035_29057c56\"          \n[3759] \"cargo_2035_290591ad\"           \"cargo_2035_29060883\"          \n[3761] \"cargo_2035_29062cbb\"           \"cargo_2035_29064064\"          \n[3763] \"cargo_2035_2906513e\"           \"cargo_2035_29066efb\"          \n[3765] \"cargo_2035_29067509\"           \"cargo_2035_29068909\"          \n[3767] \"cargo_2035_2906937e\"           \"cargo_2035_290705ee\"          \n[3769] \"cargo_2035_2907380b\"           \"cargo_2035_29079438\"          \n[3771] \"cargo_2035_29080d9a\"           \"cargo_2035_290812ba\"          \n[3773] \"cargo_2035_29082fde\"           \"cargo_2035_29083dbf\"          \n[3775] \"cargo_2035_29084c59\"           \"cargo_2035_29085fb1\"          \n[3777] \"cargo_2035_29086eca\"           \"cargo_2035_29087425\"          \n[3779] \"cargo_2035_29088a8c\"           \"cargo_2035_290899d3\"          \n[3781] \"cargo_2035_29090f0a\"           \"cargo_2035_2909135a\"          \n[3783] \"cargo_2035_29092d76\"           \"cargo_2035_2909369c\"          \n[3785] \"cargo_2035_29094c98\"           \"cargo_2035_29095c7f\"          \n[3787] \"cargo_2035_29096cf6\"           \"cargo_2035_29097b62\"          \n[3789] \"cargo_2035_29098b12\"           \"cargo_2035_29099faf\"          \n[3791] \"cargo_2035_2910052f\"           \"cargo_2035_29101fc8\"          \n[3793] \"cargo_2035_29102c4e\"           \"cargo_2035_29103fc1\"          \n[3795] \"cargo_2035_291046ac\"           \"cargo_2035_29105e81\"          \n[3797] \"cargo_2035_29106837\"           \"cargo_2035_29107662\"          \n[3799] \"cargo_2035_291085b0\"           \"cargo_2035_29109a9d\"          \n[3801] \"cargo_2035_2911095a\"           \"cargo_2035_2911155d\"          \n[3803] \"cargo_2035_29112e93\"           \"cargo_2035_2911340e\"          \n[3805] \"cargo_2035_291143d7\"           \"cargo_2035_291150e9\"          \n[3807] \"cargo_2035_29116502\"           \"cargo_2035_29117563\"          \n[3809] \"cargo_2035_29118079\"           \"cargo_2035_291193e6\"          \n[3811] \"cargo_2035_29120663\"           \"cargo_2035_291213b0\"          \n[3813] \"cargo_2035_29122bbe\"           \"cargo_2035_29123af6\"          \n[3815] \"cargo_2035_29124403\"           \"cargo_2035_29125452\"          \n[3817] \"cargo_2035_29126103\"           \"cargo_2035_291279ed\"          \n[3819] \"cargo_2035_2912885d\"           \"cargo_2035_29129b7d\"          \n[3821] \"cargo_2035_291309f9\"           \"cargo_2035_29131538\"          \n[3823] \"cargo_2035_29132922\"           \"cargo_2035_291338ca\"          \n[3825] \"cargo_2035_2913407d\"           \"cargo_2035_29135a5e\"          \n[3827] \"cargo_2035_291364df\"           \"cargo_2035_291379e0\"          \n[3829] \"cargo_2035_291388e3\"           \"cargo_2035_29139f57\"          \n[3831] \"cargo_2035_29140f98\"           \"cargo_2035_29141b4f\"          \n[3833] \"cargo_2035_29142cc8\"           \"cargo_2035_291430ad\"          \n[3835] \"cargo_2035_29144fb6\"           \"cargo_2035_291450e6\"          \n[3837] \"cargo_2035_291463fe\"           \"cargo_2035_29147803\"          \n[3839] \"cargo_2035_29148459\"           \"cargo_2035_2914965f\"          \n[3841] \"cargo_2035_2915012f\"           \"cargo_2035_29151cf4\"          \n[3843] \"cargo_2035_29152a8a\"           \"cargo_2035_291533e7\"          \n[3845] \"cargo_2035_291541ba\"           \"cargo_2035_29155b85\"          \n[3847] \"cargo_2035_2915629f\"           \"cargo_2035_291576ed\"          \n[3849] \"cargo_2035_29158708\"           \"cargo_2035_2915970f\"          \n[3851] \"cargo_2035_29160929\"           \"cargo_2035_291676cc\"          \n[3853] \"cargo_2035_29172a4f\"           \"cargo_2035_29173619\"          \n[3855] \"cargo_2035_291745b0\"           \"cargo_2035_29175c12\"          \n[3857] \"cargo_2035_2917602d\"           \"cargo_2035_29177668\"          \n[3859] \"cargo_2035_291780fc\"           \"cargo_2035_291792d9\"          \n[3861] \"cargo_2035_2918047b\"           \"cargo_2035_29181680\"          \n[3863] \"cargo_2035_291836b1\"           \"cargo_2035_29184872\"          \n[3865] \"cargo_2035_2918543e\"           \"cargo_2035_291866db\"          \n[3867] \"cargo_2035_291877d4\"           \"cargo_2035_29189197\"          \n[3869] \"cargo_2035_29190b6f\"           \"cargo_2035_2919150e\"          \n[3871] \"cargo_2035_29192c4a\"           \"cargo_2035_29194d75\"          \n[3873] \"cargo_2035_2919520e\"           \"cargo_2035_29196123\"          \n[3875] \"cargo_2035_29197691\"           \"cargo_2035_29198186\"          \n[3877] \"cargo_2035_29199348\"           \"cargo_2035_292071fb\"          \n[3879] \"cargo_2035_292088fa\"           \"cargo_2035_2920970d\"          \n[3881] \"cargo_2035_29210e39\"           \"cargo_2035_29211799\"          \n[3883] \"cargo_2035_292130a4\"           \"cargo_2035_29214bae\"          \n[3885] \"cargo_2035_2921553f\"           \"cargo_2035_29216b09\"          \n[3887] \"cargo_2035_29218bc7\"           \"cargo_2035_29219965\"          \n[3889] \"cargo_2035_29220802\"           \"cargo_2035_29221f4e\"          \n[3891] \"cargo_2035_292220eb\"           \"cargo_2035_29223e84\"          \n[3893] \"cargo_2035_292241dd\"           \"cargo_2035_29225316\"          \n[3895] \"cargo_2035_29226285\"           \"cargo_2035_29227ea7\"          \n[3897] \"cargo_2035_29229f82\"           \"cargo_2035_29232da3\"          \n[3899] \"cargo_2035_29233c12\"           \"cargo_2035_2923548d\"          \n[3901] \"cargo_2035_292364e2\"           \"cargo_2035_292371a9\"          \n[3903] \"cargo_2035_292382aa\"           \"cargo_2035_29240705\"          \n[3905] \"cargo_2035_29241599\"           \"cargo_2035_29244134\"          \n[3907] \"cargo_2035_2924636c\"           \"cargo_2035_29248646\"          \n[3909] \"cargo_2035_29249bf1\"           \"cargo_2035_292508f9\"          \n[3911] \"cargo_2035_29251730\"           \"cargo_2035_29252437\"          \n[3913] \"cargo_2035_29253538\"           \"cargo_2035_2925494a\"          \n[3915] \"cargo_2035_292552a0\"           \"cargo_2035_29256ec8\"          \n[3917] \"cargo_2035_292578d5\"           \"cargo_2035_29259952\"          \n[3919] \"cargo_2035_29260f62\"           \"cargo_2035_2926152c\"          \n[3921] \"cargo_2035_292625a7\"           \"cargo_2035_2926329b\"          \n[3923] \"cargo_2035_29264a0f\"           \"cargo_2035_2926501f\"          \n[3925] \"cargo_2035_29266f08\"           \"cargo_2035_2926731d\"          \n[3927] \"cargo_2035_29268cf5\"           \"cargo_2035_29270660\"          \n[3929] \"cargo_2035_29271b24\"           \"cargo_2035_29272144\"          \n[3931] \"cargo_2035_29273505\"           \"cargo_2035_29274647\"          \n[3933] \"cargo_2035_29275d67\"           \"cargo_2035_2927637f\"          \n[3935] \"cargo_2035_29277841\"           \"cargo_2035_2927880c\"          \n[3937] \"cargo_2035_2927965e\"           \"cargo_2035_29281c64\"          \n[3939] \"cargo_2035_29282142\"           \"cargo_2035_29283dd0\"          \n[3941] \"cargo_2035_292841fc\"           \"cargo_2035_29285c16\"          \n[3943] \"cargo_2035_292868ac\"           \"cargo_2035_29293f38\"          \n[3945] \"cargo_2035_29303583\"           \"cargo_2035_29305e15\"          \n[3947] \"cargo_2035_29307aa3\"           \"cargo_2035_2930873e\"          \n[3949] \"cargo_2035_293098e0\"           \"cargo_2035_29310e28\"          \n[3951] \"cargo_2035_2931168f\"           \"cargo_2035_293121ae\"          \n[3953] \"cargo_2035_2931357b\"           \"cargo_2035_29314166\"          \n[3955] \"cargo_2035_293167b0\"           \"cargo_2035_29317b43\"          \n[3957] \"cargo_2035_29318abe\"           \"cargo_2035_29319bbd\"          \n[3959] \"cargo_2035_293207ce\"           \"cargo_2035_29321553\"          \n[3961] \"cargo_2035_29323224\"           \"cargo_2035_29324860\"          \n[3963] \"cargo_2035_293254ee\"           \"cargo_2035_29326790\"          \n[3965] \"cargo_2035_293275b6\"           \"cargo_2035_2932897a\"          \n[3967] \"cargo_2035_2933034d\"           \"cargo_2035_29332682\"          \n[3969] \"cargo_2035_29333a00\"           \"cargo_2035_293367aa\"          \n[3971] \"cargo_2035_293376a0\"           \"cargo_2035_29338617\"          \n[3973] \"cargo_2035_29339197\"           \"cargo_2035_2934019a\"          \n[3975] \"cargo_2035_29342277\"           \"cargo_2035_293437f4\"          \n[3977] \"cargo_2035_29344fc5\"           \"cargo_2035_293459ec\"          \n[3979] \"cargo_2035_2934789a\"           \"cargo_2035_293484af\"          \n[3981] \"cargo_2035_29349db8\"           \"cargo_2035_29350a33\"          \n[3983] \"cargo_2035_2935168d\"           \"cargo_2035_293604e6\"          \n[3985] \"cargo_2035_29361fed\"           \"cargo_2035_29362122\"          \n[3987] \"cargo_2035_29363906\"           \"cargo_2035_29364bba\"          \n[3989] \"cargo_2035_29365506\"           \"cargo_2035_293664fd\"          \n[3991] \"cargo_2035_293671b9\"           \"cargo_2035_29368c12\"          \n[3993] \"cargo_2035_29369e58\"           \"cargo_2035_29371b64\"          \n[3995] \"cargo_2035_2937220e\"           \"cargo_2035_29373648\"          \n[3997] \"cargo_2035_29374be7\"           \"cargo_2035_29375f86\"          \n[3999] \"cargo_2035_29376731\"           \"cargo_2035_29377e04\"          \n[4001] \"cargo_2035_293784e2\"           \"cargo_2035_2937914c\"          \n[4003] \"cargo_2035_29380f08\"           \"cargo_2035_293820ba\"          \n[4005] \"cargo_2035_293839d1\"           \"cargo_2035_29384348\"          \n[4007] \"cargo_2035_29385819\"           \"cargo_2035_2938669e\"          \n[4009] \"cargo_2035_29387eb6\"           \"cargo_2035_293881ea\"          \n[4011] \"cargo_2035_2938995c\"           \"cargo_2035_2939020b\"          \n[4013] \"cargo_2035_29391d21\"           \"cargo_2035_29393e69\"          \n[4015] \"cargo_2035_293944bd\"           \"cargo_2035_29395e50\"          \n[4017] \"cargo_2035_293965f1\"           \"cargo_2035_29397d1c\"          \n[4019] \"cargo_2035_29398e31\"           \"cargo_2035_293999ef\"          \n[4021] \"cargo_2035_29400e1b\"           \"cargo_2035_29401bff\"          \n[4023] \"cargo_2035_294020eb\"           \"cargo_2035_294043c3\"          \n[4025] \"cargo_2035_294052ec\"           \"cargo_2035_294064a6\"          \n[4027] \"cargo_2035_294124db\"           \"cargo_2035_29413d7f\"          \n[4029] \"cargo_2035_2941583e\"           \"cargo_2035_29416264\"          \n[4031] \"cargo_2035_29417d8f\"           \"cargo_2035_294184e4\"          \n[4033] \"cargo_2035_29419a3f\"           \"cargo_2035_29420e39\"          \n[4035] \"cargo_2035_294215cb\"           \"cargo_2035_29423ea1\"          \n[4037] \"cargo_2035_29424596\"           \"cargo_2035_29425a9c\"          \n[4039] \"cargo_2035_29426993\"           \"cargo_2035_2942738f\"          \n[4041] \"cargo_2035_29428145\"           \"cargo_2035_2942912e\"          \n[4043] \"cargo_2035_294301b8\"           \"cargo_2035_29431632\"          \n[4045] \"cargo_2035_2943274e\"           \"cargo_2035_29434ae5\"          \n[4047] \"cargo_2035_294355d6\"           \"cargo_2035_29436a50\"          \n[4049] \"cargo_2035_294379c8\"           \"cargo_2035_29438ec0\"          \n[4051] \"cargo_2035_294391a3\"           \"cargo_2035_29440c93\"          \n[4053] \"cargo_2035_29441e3f\"           \"cargo_2035_294428b8\"          \n[4055] \"cargo_2035_29443e33\"           \"cargo_2035_29445c6a\"          \n[4057] \"cargo_2035_29446d47\"           \"cargo_2035_29450716\"          \n[4059] \"cargo_2035_294511d6\"           \"cargo_2035_294527c7\"          \n[4061] \"cargo_2035_29456fbe\"           \"cargo_2035_294573cd\"          \n[4063] \"cargo_2035_29459cb5\"           \"cargo_2035_29460d75\"          \n[4065] \"cargo_2035_2946144a\"           \"cargo_2035_29462313\"          \n[4067] \"cargo_2035_294635f2\"           \"cargo_2035_29464ab1\"          \n[4069] \"cargo_2035_29465881\"           \"cargo_2035_29466d64\"          \n[4071] \"cargo_2035_29467400\"           \"cargo_2035_2946841a\"          \n[4073] \"cargo_2035_29469d40\"           \"cargo_2035_29470421\"          \n[4075] \"cargo_2035_29471c3c\"           \"cargo_2035_29472ee7\"          \n[4077] \"cargo_2035_2947357d\"           \"cargo_2035_29474995\"          \n[4079] \"cargo_2035_29475ea6\"           \"cargo_2035_29476027\"          \n[4081] \"cargo_2035_29478d1a\"           \"cargo_2035_29479d60\"          \n[4083] \"cargo_2035_29481145\"           \"cargo_2035_29482af8\"          \n[4085] \"cargo_2035_29483fb5\"           \"cargo_2035_294856a8\"          \n[4087] \"cargo_2035_2948675d\"           \"cargo_2035_2948814f\"          \n[4089] \"cargo_2035_29489769\"           \"cargo_2035_29494175\"          \n[4091] \"cargo_2035_29495e62\"           \"cargo_2035_29496198\"          \n[4093] \"cargo_2035_2949763c\"           \"cargo_2035_294980f2\"          \n[4095] \"cargo_2035_29499ac4\"           \"cargo_2035_2950014b\"          \n[4097] \"cargo_2035_29501b13\"           \"cargo_2035_295026e5\"          \n[4099] \"cargo_2035_2950370c\"           \"cargo_2035_295054bf\"          \n[4101] \"cargo_2035_29506247\"           \"cargo_2035_29507a68\"          \n[4103] \"cargo_2035_295087f4\"           \"cargo_2035_2950956c\"          \n[4105] \"cargo_2035_29517afb\"           \"cargo_2035_2951802a\"          \n[4107] \"cargo_2035_295193b5\"           \"cargo_2035_29520008\"          \n[4109] \"cargo_2035_29521a22\"           \"cargo_2035_29522007\"          \n[4111] \"cargo_2035_29523cae\"           \"cargo_2035_2952454b\"          \n[4113] \"cargo_2035_295257da\"           \"cargo_2035_29526fa2\"          \n[4115] \"cargo_2035_29527a36\"           \"cargo_2035_295287df\"          \n[4117] \"cargo_2035_29529cf6\"           \"cargo_2035_295301fc\"          \n[4119] \"cargo_2035_29531c67\"           \"cargo_2035_29532ee9\"          \n[4121] \"cargo_2035_29533c68\"           \"cargo_2035_29534dc6\"          \n[4123] \"cargo_2035_2953570e\"           \"cargo_2035_29536c79\"          \n[4125] \"cargo_2035_29537604\"           \"cargo_2035_29538cf9\"          \n[4127] \"cargo_2035_2953917e\"           \"cargo_2035_295407c8\"          \n[4129] \"cargo_2035_29541590\"           \"cargo_2035_2954235b\"          \n[4131] \"cargo_2035_2954341c\"           \"cargo_2035_295441ed\"          \n[4133] \"cargo_2035_295458e3\"           \"cargo_2035_29546952\"          \n[4135] \"cargo_2035_29547e5a\"           \"cargo_2035_29548f48\"          \n[4137] \"cargo_2035_29549fce\"           \"cargo_2035_295502ba\"          \n[4139] \"cargo_2035_29551e3b\"           \"cargo_2035_295529ea\"          \n[4141] \"cargo_2035_295530bf\"           \"cargo_2035_2955453b\"          \n[4143] \"cargo_2035_29555cd8\"           \"cargo_2035_29556a00\"          \n[4145] \"cargo_2035_29557a54\"           \"cargo_2035_2955871d\"          \n[4147] \"cargo_2035_29559f10\"           \"cargo_2035_2956047c\"          \n[4149] \"cargo_2035_295617a2\"           \"cargo_2035_2956231b\"          \n[4151] \"cargo_2035_29563229\"           \"cargo_2035_2956418d\"          \n[4153] \"cargo_2035_29565069\"           \"cargo_2035_295669f0\"          \n[4155] \"cargo_2035_29567bef\"           \"cargo_2035_2956847e\"          \n[4157] \"cargo_2035_2956946a\"           \"cargo_2035_29570c6c\"          \n[4159] \"cargo_2035_29571903\"           \"cargo_2035_2957261e\"          \n[4161] \"cargo_2035_295735c3\"           \"cargo_2035_2957417d\"          \n[4163] \"cargo_2035_29575ce1\"           \"cargo_2035_29576332\"          \n[4165] \"cargo_2035_29577c34\"           \"cargo_2035_29578c30\"          \n[4167] \"cargo_2035_2957954d\"           \"cargo_2035_29583bc4\"          \n[4169] \"cargo_2035_2959173c\"           \"cargo_2035_29592319\"          \n[4171] \"cargo_2035_295946f5\"           \"cargo_2035_29595e82\"          \n[4173] \"cargo_2035_295969f6\"           \"cargo_2035_29597134\"          \n[4175] \"cargo_2035_295983d1\"           \"cargo_2035_29599b73\"          \n[4177] \"cargo_2035_29600337\"           \"cargo_2035_296012f2\"          \n[4179] \"cargo_2035_296028b0\"           \"cargo_2035_2960318a\"          \n[4181] \"cargo_2035_29605e39\"           \"cargo_2035_2960695b\"          \n[4183] \"cargo_2035_29607a5f\"           \"cargo_2035_296084b2\"          \n[4185] \"cargo_2035_29609375\"           \"cargo_2035_29610b05\"          \n[4187] \"cargo_2035_296129e8\"           \"cargo_2035_2961347e\"          \n[4189] \"cargo_2035_29614c5a\"           \"cargo_2035_296165e2\"          \n[4191] \"cargo_2035_29617162\"           \"cargo_2035_2961838e\"          \n[4193] \"cargo_2035_2961994f\"           \"cargo_2035_29620fcc\"          \n[4195] \"cargo_2035_29621aac\"           \"cargo_2035_2962221c\"          \n[4197] \"cargo_2035_29623f7d\"           \"cargo_2035_29624926\"          \n[4199] \"cargo_2035_29625ba9\"           \"cargo_2035_29627bb0\"          \n[4201] \"cargo_2035_2962829a\"           \"cargo_2035_296294a5\"          \n[4203] \"cargo_2035_296304d9\"           \"cargo_2035_29631c1f\"          \n[4205] \"cargo_2035_29637568\"           \"cargo_2035_29638b61\"          \n[4207] \"cargo_2035_296403b9\"           \"cargo_2035_296416b8\"          \n[4209] \"cargo_2035_29642536\"           \"cargo_2035_29644e84\"          \n[4211] \"cargo_2035_2964583e\"           \"cargo_2035_29646776\"          \n[4213] \"cargo_2035_29647b76\"           \"cargo_2035_29648bfd\"          \n[4215] \"cargo_2035_29649b9b\"           \"cargo_2035_29650857\"          \n[4217] \"cargo_2035_296518ab\"           \"cargo_2035_29652167\"          \n[4219] \"cargo_2035_296552f6\"           \"cargo_2035_296566fb\"          \n[4221] \"cargo_2035_296575a4\"           \"cargo_2035_29658685\"          \n[4223] \"cargo_2035_296596b8\"           \"cargo_2035_29661a29\"          \n[4225] \"cargo_2035_29663203\"           \"cargo_2035_2966414c\"          \n[4227] \"cargo_2035_29666fa0\"           \"cargo_2035_29667ac9\"          \n[4229] \"cargo_2035_296690f0\"           \"cargo_2035_29670e28\"          \n[4231] \"cargo_2035_29671c72\"           \"cargo_2035_29682554\"          \n[4233] \"cargo_2035_296832d5\"           \"cargo_2035_2968466f\"          \n[4235] \"cargo_2035_2968597c\"           \"cargo_2035_2968668a\"          \n[4237] \"cargo_2035_29687240\"           \"cargo_2035_2968814c\"          \n[4239] \"cargo_2035_29689907\"           \"cargo_2035_29690285\"          \n[4241] \"cargo_2035_29691f7a\"           \"cargo_2035_296925fd\"          \n[4243] \"cargo_2035_29693fd8\"           \"cargo_2035_296949a1\"          \n[4245] \"cargo_2035_29695f58\"           \"cargo_2035_29696623\"          \n[4247] \"cargo_2035_29697d75\"           \"cargo_2035_296982ce\"          \n[4249] \"cargo_2035_296997a9\"           \"cargo_2035_297006dc\"          \n[4251] \"cargo_2035_29701a1e\"           \"cargo_2035_297032af\"          \n[4253] \"cargo_2035_29705c51\"           \"cargo_2035_29708fc6\"          \n[4255] \"cargo_2035_2970903d\"           \"cargo_2035_29710daf\"          \n[4257] \"cargo_2035_29712696\"           \"cargo_2035_297151ee\"          \n[4259] \"cargo_2035_29716bb8\"           \"cargo_2035_29717ac4\"          \n[4261] \"cargo_2035_29720a0b\"           \"cargo_2035_29721474\"          \n[4263] \"cargo_2035_29723c08\"           \"cargo_2035_2972647f\"          \n[4265] \"cargo_2035_29727213\"           \"cargo_2035_29728efd\"          \n[4267] \"cargo_2035_297372f5\"           \"cargo_2035_29740623\"          \n[4269] \"cargo_2035_297418ee\"           \"cargo_2035_29742603\"          \n[4271] \"cargo_2035_29743bb5\"           \"cargo_2035_29744489\"          \n[4273] \"cargo_2035_29745484\"           \"cargo_2035_297480c2\"          \n[4275] \"cargo_2035_297499bc\"           \"cargo_2035_29750053\"          \n[4277] \"cargo_2035_2975170a\"           \"cargo_2035_29752b8a\"          \n[4279] \"cargo_2035_29753968\"           \"cargo_2035_297553f5\"          \n[4281] \"cargo_2035_29757f75\"           \"cargo_2035_297592c3\"          \n[4283] \"cargo_2035_29760071\"           \"cargo_2035_29761789\"          \n[4285] \"cargo_2035_29762660\"           \"cargo_2035_2976318f\"          \n[4287] \"cargo_2035_29764981\"           \"cargo_2035_29765f65\"          \n[4289] \"cargo_2035_29773128\"           \"cargo_2035_297778e2\"          \n[4291] \"cargo_2035_2977952d\"           \"cargo_2035_297811c3\"          \n[4293] \"cargo_2035_29782f1b\"           \"cargo_2035_29783d47\"          \n[4295] \"cargo_2035_29784f94\"           \"cargo_2035_297855d8\"          \n[4297] \"cargo_2035_29787ff3\"           \"cargo_2035_29788e27\"          \n[4299] \"cargo_2035_29789bcc\"           \"cargo_2035_2979023a\"          \n[4301] \"cargo_2035_2979113e\"           \"cargo_2035_29792224\"          \n[4303] \"cargo_2035_29793543\"           \"cargo_2035_29794f15\"          \n[4305] \"cargo_2035_2979556f\"           \"cargo_2035_29801dc4\"          \n[4307] \"cargo_2035_29802431\"           \"cargo_2035_29803316\"          \n[4309] \"cargo_2035_29804fca\"           \"cargo_2035_298050f6\"          \n[4311] \"cargo_2035_2980600e\"           \"cargo_2035_29807a3e\"          \n[4313] \"cargo_2035_298082be\"           \"cargo_2035_29809ea4\"          \n[4315] \"cargo_2035_298105b4\"           \"cargo_2035_29812927\"          \n[4317] \"cargo_2035_29813085\"           \"cargo_2035_29814b2c\"          \n[4319] \"cargo_2035_298156ae\"           \"cargo_2035_29816b56\"          \n[4321] \"cargo_2035_29817c27\"           \"cargo_2035_298251fc\"          \n[4323] \"cargo_2035_2982688d\"           \"cargo_2035_298271b4\"          \n[4325] \"cargo_2035_29828c84\"           \"cargo_2035_29829ab7\"          \n[4327] \"cargo_2035_29830fa5\"           \"cargo_2035_29831d3f\"          \n[4329] \"cargo_2035_2983203f\"           \"cargo_2035_29833b0f\"          \n[4331] \"cargo_2035_29834845\"           \"cargo_2035_29835f38\"          \n[4333] \"cargo_2035_2983604c\"           \"cargo_2035_29837958\"          \n[4335] \"cargo_2035_29838885\"           \"cargo_2035_29839f6b\"          \n[4337] \"cargo_2035_29840c1a\"           \"cargo_2035_298412e7\"          \n[4339] \"cargo_2035_2984278d\"           \"cargo_2035_2984394c\"          \n[4341] \"cargo_2035_29848a88\"           \"cargo_2035_2985567c\"          \n[4343] \"cargo_2035_29856d89\"           \"cargo_2035_2985743f\"          \n[4345] \"cargo_2035_29858978\"           \"cargo_2035_298597fb\"          \n[4347] \"cargo_2035_29860b82\"           \"cargo_2035_29861f6e\"          \n[4349] \"cargo_2035_2986287d\"           \"cargo_2035_29863dcd\"          \n[4351] \"cargo_2035_29864f7e\"           \"cargo_2035_2986599e\"          \n[4353] \"cargo_2035_29866f8c\"           \"cargo_2035_2986763f\"          \n[4355] \"cargo_2035_29868372\"           \"cargo_2035_29869d8e\"          \n[4357] \"cargo_2035_29870b31\"           \"cargo_2035_29871155\"          \n[4359] \"cargo_2035_298739bf\"           \"cargo_2035_29874c8b\"          \n[4361] \"cargo_2035_29876c6c\"           \"cargo_2035_29877749\"          \n[4363] \"cargo_2035_29878db7\"           \"cargo_2035_29879783\"          \n[4365] \"cargo_2035_29881f7b\"           \"cargo_2035_29882219\"          \n[4367] \"cargo_2035_2988461b\"           \"cargo_2035_29885501\"          \n[4369] \"cargo_2035_29886428\"           \"cargo_2035_29887b26\"          \n[4371] \"cargo_2035_29894038\"           \"cargo_2035_298954bc\"          \n[4373] \"cargo_2035_29898851\"           \"cargo_2035_2989901d\"          \n[4375] \"cargo_2035_2990009d\"           \"cargo_2035_299029f2\"          \n[4377] \"cargo_2035_29903e40\"           \"cargo_2035_29904460\"          \n[4379] \"cargo_2035_299051bd\"           \"cargo_2035_29907088\"          \n[4381] \"cargo_2035_29909952\"           \"cargo_2035_299100cc\"          \n[4383] \"cargo_2035_29912f7a\"           \"cargo_2035_29913cd4\"          \n[4385] \"cargo_2035_29914f17\"           \"cargo_2035_29915a6c\"          \n[4387] \"cargo_2035_29916df1\"           \"cargo_2035_29917f7e\"          \n[4389] \"cargo_2035_29918a58\"           \"cargo_2035_2992047b\"          \n[4391] \"cargo_2035_29922a67\"           \"cargo_2035_29923315\"          \n[4393] \"cargo_2035_299267e2\"           \"cargo_2035_29929cf4\"          \n[4395] \"cargo_2035_29937dea\"           \"cargo_2035_2993838b\"          \n[4397] \"cargo_2035_29939451\"           \"cargo_2035_29940d1e\"          \n[4399] \"cargo_2035_299416ae\"           \"cargo_2035_29942f58\"          \n[4401] \"cargo_2035_2994380c\"           \"cargo_2035_29944e3b\"          \n[4403] \"cargo_2035_299454c0\"           \"cargo_2035_29946cbb\"          \n[4405] \"cargo_2035_29950719\"           \"cargo_2035_2995196e\"          \n[4407] \"cargo_2035_29952c94\"           \"cargo_2035_2995324c\"          \n[4409] \"cargo_2035_29954aa6\"           \"cargo_2035_29955ea9\"          \n[4411] \"cargo_2035_299560f8\"           \"cargo_2035_29957ae2\"          \n[4413] \"cargo_2035_29959023\"           \"cargo_2035_299602c9\"          \n[4415] \"cargo_2035_29961ae9\"           \"cargo_2035_29962710\"          \n[4417] \"cargo_2035_29963de3\"           \"cargo_2035_2997353d\"          \n[4419] \"cargo_2035_29974951\"           \"cargo_2035_2997575e\"          \n[4421] \"cargo_2035_29976f72\"           \"cargo_2035_29977fb8\"          \n[4423] \"cargo_2035_299784da\"           \"cargo_2035_299798d3\"          \n[4425] \"cargo_2035_2998072a\"           \"cargo_2035_29981859\"          \n[4427] \"cargo_2035_29984ffa\"           \"cargo_2035_2998663e\"          \n[4429] \"cargo_2035_299872aa\"           \"cargo_2035_2998825e\"          \n[4431] \"cargo_2035_29989282\"           \"cargo_2035_29994ca4\"          \n[4433] \"cargo_2035_29995c4e\"           \"cargo_2035_29997681\"          \n[4435] \"cargo_2035_29998336\"           \"cargo_2035_299993f8\"          \n[4437] \"cargo_2035_30000207\"           \"cargo_2035_300012b7\"          \n[4439] \"cargo_2035_300022ec\"           \"cargo_2035_300031b2\"          \n[4441] \"cargo_2035_300043df\"           \"cargo_2035_30008349\"          \n[4443] \"cargo_2035_300120af\"           \"cargo_2035_30013631\"          \n[4445] \"cargo_2035_3001480a\"           \"cargo_2035_30015428\"          \n[4447] \"cargo_2035_300163b6\"           \"cargo_2035_300178eb\"          \n[4449] \"cargo_2035_3001893d\"           \"cargo_2035_30019793\"          \n[4451] \"cargo_2035_3002057d\"           \"cargo_2035_30021d35\"          \n[4453] \"cargo_2035_3002241c\"           \"cargo_2035_3002397e\"          \n[4455] \"cargo_2035_30024917\"           \"cargo_2035_30025175\"          \n[4457] \"cargo_2035_300260a9\"           \"cargo_2035_3002772e\"          \n[4459] \"cargo_2035_3002807b\"           \"cargo_2035_30029c52\"          \n[4461] \"cargo_2035_30030863\"           \"cargo_2035_30031b94\"          \n[4463] \"cargo_2035_3003289d\"           \"cargo_2035_30033354\"          \n[4465] \"cargo_2035_30034fcb\"           \"cargo_2035_30035b54\"          \n[4467] \"cargo_2035_30037b14\"           \"cargo_2035_3003855b\"          \n[4469] \"cargo_2035_30039d5a\"           \"cargo_2035_30040ec7\"          \n[4471] \"cargo_2035_30041fbb\"           \"cargo_2035_30042f02\"          \n[4473] \"cargo_2035_30043c3d\"           \"cargo_2035_30044ebd\"          \n[4475] \"cargo_2035_30045f45\"           \"cargo_2035_300559dc\"          \n[4477] \"cargo_2035_30058c6c\"           \"cargo_2035_30059ce0\"          \n[4479] \"cargo_2035_3006062b\"           \"cargo_2035_30061643\"          \n[4481] \"cargo_2035_300629c9\"           \"cargo_2035_300636b1\"          \n[4483] \"cargo_2035_30064693\"           \"cargo_2035_30066ec9\"          \n[4485] \"cargo_2035_30068b22\"           \"cargo_2035_300695cb\"          \n[4487] \"cargo_2035_30070e25\"           \"cargo_2035_30071b2a\"          \n[4489] \"cargo_2035_30072067\"           \"cargo_2035_30073953\"          \n[4491] \"cargo_2035_30074147\"           \"cargo_2035_3007598a\"          \n[4493] \"cargo_2035_30078617\"           \"cargo_2035_300796bf\"          \n[4495] \"cargo_2035_300801ff\"           \"cargo_2035_300826bd\"          \n[4497] \"cargo_2035_300830e7\"           \"cargo_2035_30084063\"          \n[4499] \"cargo_2035_30086838\"           \"cargo_2035_30088fde\"          \n[4501] \"cargo_2035_300899bf\"           \"cargo_2035_30090425\"          \n[4503] \"cargo_2035_30091058\"           \"cargo_2035_3009245f\"          \n[4505] \"cargo_2035_30093db6\"           \"cargo_2035_300948ad\"          \n[4507] \"cargo_2035_30095425\"           \"cargo_2035_30096130\"          \n[4509] \"cargo_2035_30097e83\"           \"cargo_2035_30100a8f\"          \n[4511] \"cargo_2035_30101206\"           \"cargo_2035_30102afd\"          \n[4513] \"cargo_2035_30103c5f\"           \"cargo_2035_301042d8\"          \n[4515] \"cargo_2035_3010513f\"           \"cargo_2035_30106d3b\"          \n[4517] \"cargo_2035_30123357\"           \"cargo_2035_30124e81\"          \n[4519] \"cargo_2035_30125b3c\"           \"cargo_2035_3012623b\"          \n[4521] \"cargo_2035_30127d42\"           \"cargo_2035_30129c95\"          \n[4523] \"cargo_2035_30130cc1\"           \"cargo_2035_301315a9\"          \n[4525] \"cargo_2035_301324be\"           \"cargo_2035_30134eb2\"          \n[4527] \"cargo_2035_301354fe\"           \"cargo_2035_301366ed\"          \n[4529] \"cargo_2035_30137503\"           \"cargo_2035_30138cb4\"          \n[4531] \"cargo_2035_301396b8\"           \"cargo_2035_3014726c\"          \n[4533] \"cargo_2035_30148b7b\"           \"cargo_2035_30149550\"          \n[4535] \"cargo_2035_30150dcc\"           \"cargo_2035_30151578\"          \n[4537] \"cargo_2035_3015300c\"           \"cargo_2035_30154103\"          \n[4539] \"cargo_2035_3015569e\"           \"cargo_2035_30156210\"          \n[4541] \"cargo_2035_3015895b\"           \"cargo_2035_301594eb\"          \n[4543] \"cargo_2035_30160fdd\"           \"cargo_2035_30169e6e\"          \n[4545] \"cargo_2035_30170a9f\"           \"cargo_2035_3017173f\"          \n[4547] \"cargo_2035_301728c4\"           \"cargo_2035_301731e6\"          \n[4549] \"cargo_2035_301749e3\"           \"cargo_2035_301750ad\"          \n[4551] \"cargo_2035_301764d8\"           \"cargo_2035_301772a2\"          \n[4553] \"cargo_2035_301785a9\"           \"cargo_2035_30180de9\"          \n[4555] \"cargo_2035_30181bb3\"           \"cargo_2035_30182a44\"          \n[4557] \"cargo_2035_30183ae6\"           \"cargo_2035_30184f37\"          \n[4559] \"cargo_2035_3018660b\"           \"cargo_2035_3018758c\"          \n[4561] \"cargo_2035_3018810c\"           \"cargo_2035_30189d21\"          \n[4563] \"cargo_2035_30191324\"           \"cargo_2035_30199635\"          \n[4565] \"cargo_2035_30200d30\"           \"cargo_2035_30201c95\"          \n[4567] \"cargo_2035_30203441\"           \"cargo_2035_302046ea\"          \n[4569] \"cargo_2035_302059fc\"           \"cargo_2035_30206ebe\"          \n[4571] \"cargo_2035_30207536\"           \"cargo_2035_30208fbf\"          \n[4573] \"cargo_2035_302112d3\"           \"cargo_2035_302120cc\"          \n[4575] \"cargo_2035_302134a9\"           \"cargo_2035_30223407\"          \n[4577] \"cargo_2035_30224dfe\"           \"cargo_2035_3022581b\"          \n[4579] \"cargo_2035_30226817\"           \"cargo_2035_30227230\"          \n[4581] \"cargo_2035_302288f9\"           \"cargo_2035_30229204\"          \n[4583] \"cargo_2035_30230137\"           \"cargo_2035_30231f3f\"          \n[4585] \"cargo_2035_30232b8e\"           \"cargo_2035_30233d13\"          \n[4587] \"cargo_2035_30234fbb\"           \"cargo_2035_30235517\"          \n[4589] \"cargo_2035_302360cd\"           \"cargo_2035_30237bcb\"          \n[4591] \"cargo_2035_30238ddd\"           \"cargo_2035_30239f04\"          \n[4593] \"cargo_2035_302406cd\"           \"cargo_2035_3024190c\"          \n[4595] \"cargo_2035_30242a00\"           \"cargo_2035_302439a9\"          \n[4597] \"cargo_2035_302446f7\"           \"cargo_2035_30245bf4\"          \n[4599] \"cargo_2035_30246083\"           \"cargo_2035_302473e1\"          \n[4601] \"cargo_2035_30248744\"           \"cargo_2035_30249c66\"          \n[4603] \"cargo_2035_30250919\"           \"cargo_2035_30251c63\"          \n[4605] \"cargo_2035_30252a42\"           \"cargo_2035_30253518\"          \n[4607] \"cargo_2035_30254ce1\"           \"cargo_2035_3025500c\"          \n[4609] \"cargo_2035_30256573\"           \"cargo_2035_30257de4\"          \n[4611] \"cargo_2035_30258620\"           \"cargo_2035_3025997f\"          \n[4613] \"cargo_2035_30260350\"           \"cargo_2035_30261f0b\"          \n[4615] \"cargo_2035_302621cf\"           \"cargo_2035_30263e22\"          \n[4617] \"cargo_2035_30264231\"           \"cargo_2035_30265b44\"          \n[4619] \"cargo_2035_30266ac0\"           \"cargo_2035_30267a36\"          \n[4621] \"cargo_2035_3026839c\"           \"cargo_2035_30269e2b\"          \n[4623] \"cargo_2035_3027079e\"           \"cargo_2035_3027143c\"          \n[4625] \"cargo_2035_302722fc\"           \"cargo_2035_302733ff\"          \n[4627] \"cargo_2035_3027437a\"           \"cargo_2035_30275487\"          \n[4629] \"cargo_2035_302761f0\"           \"cargo_2035_30277d07\"          \n[4631] \"cargo_2035_3027877d\"           \"cargo_2035_302797bb\"          \n[4633] \"cargo_2035_30280a1e\"           \"cargo_2035_302813a9\"          \n[4635] \"cargo_2035_30282a37\"           \"cargo_2035_30283bb5\"          \n[4637] \"cargo_2035_30284b81\"           \"cargo_2035_30285a50\"          \n[4639] \"cargo_2035_30286bc9\"           \"cargo_2035_30287ee8\"          \n[4641] \"cargo_2035_302882a4\"           \"cargo_2035_3028912f\"          \n[4643] \"cargo_2035_30290bfe\"           \"cargo_2035_30291b57\"          \n[4645] \"cargo_2035_302927d2\"           \"cargo_2035_3029376e\"          \n[4647] \"cargo_2035_302940c8\"           \"cargo_2035_30295d47\"          \n[4649] \"cargo_2035_30296869\"           \"cargo_2035_30297b64\"          \n[4651] \"cargo_2035_30298048\"           \"cargo_2035_30299577\"          \n[4653] \"cargo_2035_30300343\"           \"cargo_2035_30301071\"          \n[4655] \"cargo_2035_3030231d\"           \"cargo_2035_303035eb\"          \n[4657] \"cargo_2035_30304a6c\"           \"cargo_2035_303051d4\"          \n[4659] \"cargo_2035_30306105\"           \"cargo_2035_30311568\"          \n[4661] \"cargo_2035_30318bbf\"           \"cargo_2035_30319583\"          \n[4663] \"cargo_2035_30320c86\"           \"cargo_2035_3032335e\"          \n[4665] \"cargo_2035_30324068\"           \"cargo_2035_30325e6f\"          \n[4667] \"cargo_2035_30326dcd\"           \"cargo_2035_30327dbc\"          \n[4669] \"cargo_2035_30329e0b\"           \"cargo_2035_303311f0\"          \n[4671] \"cargo_2035_30332424\"           \"cargo_2035_303342b5\"          \n[4673] \"cargo_2035_30343157\"           \"cargo_2035_30346df6\"          \n[4675] \"cargo_2035_30349477\"           \"cargo_2035_30350c6c\"          \n[4677] \"cargo_2035_30351c8f\"           \"cargo_2035_30354340\"          \n[4679] \"cargo_2035_30359570\"           \"cargo_2035_3036119a\"          \n[4681] \"cargo_2035_303621df\"           \"cargo_2035_30364fda\"          \n[4683] \"cargo_2035_3036555a\"           \"cargo_2035_30366564\"          \n[4685] \"cargo_2035_30367d19\"           \"cargo_2035_30376286\"          \n[4687] \"cargo_2035_303772d3\"           \"cargo_2035_30378594\"          \n[4689] \"cargo_2035_3037936c\"           \"cargo_2035_30380f54\"          \n[4691] \"cargo_2035_3038132f\"           \"cargo_2035_30382ec6\"          \n[4693] \"cargo_2035_3038348f\"           \"cargo_2035_30384456\"          \n[4695] \"cargo_2035_30385e81\"           \"cargo_2035_30386cd5\"          \n[4697] \"cargo_2035_303874a2\"           \"cargo_2035_303885d1\"          \n[4699] \"cargo_2035_30389d17\"           \"cargo_2035_30390aaf\"          \n[4701] \"cargo_2035_30391c82\"           \"cargo_2035_303924ee\"          \n[4703] \"cargo_2035_30393df9\"           \"cargo_2035_30394d9b\"          \n[4705] \"cargo_2035_30395196\"           \"cargo_2035_30396791\"          \n[4707] \"cargo_2035_30397fc7\"           \"cargo_2035_30398aa7\"          \n[4709] \"cargo_2035_303991bf\"           \"cargo_2035_304009e7\"          \n[4711] \"cargo_2035_304011fc\"           \"cargo_2035_3040263b\"          \n[4713] \"cargo_2035_304038a7\"           \"cargo_2035_304048d2\"          \n[4715] \"cargo_2035_3040535a\"           \"cargo_2035_30406ccb\"          \n[4717] \"cargo_2035_30407061\"           \"cargo_2035_30410dbd\"          \n[4719] \"cargo_2035_3041118d\"           \"cargo_2035_30412ea1\"          \n[4721] \"cargo_2035_30413936\"           \"cargo_2035_30414724\"          \n[4723] \"cargo_2035_304150fc\"           \"cargo_2035_30416fb5\"          \n[4725] \"cargo_2035_304171fb\"           \"cargo_2035_30418451\"          \n[4727] \"cargo_2035_30419f6a\"           \"cargo_2035_3042163c\"          \n[4729] \"cargo_2035_304228a1\"           \"cargo_2035_30423a5d\"          \n[4731] \"cargo_2035_304248b1\"           \"cargo_2035_304255a8\"          \n[4733] \"cargo_2035_30426770\"           \"cargo_2035_304356ce\"          \n[4735] \"cargo_2035_3043656c\"           \"cargo_2035_30437832\"          \n[4737] \"cargo_2035_30438bc3\"           \"cargo_2035_3043943d\"          \n[4739] \"cargo_2035_30440fb3\"           \"cargo_2035_30441e69\"          \n[4741] \"cargo_2035_304426f1\"           \"cargo_2035_30443dd2\"          \n[4743] \"cargo_2035_3044473d\"           \"cargo_2035_30445c4d\"          \n[4745] \"cargo_2035_30446083\"           \"cargo_2035_3044768e\"          \n[4747] \"cargo_2035_30448837\"           \"cargo_2035_30449092\"          \n[4749] \"cargo_2035_30450009\"           \"cargo_2035_30451ce5\"          \n[4751] \"cargo_2035_304526bb\"           \"cargo_2035_30453ba9\"          \n[4753] \"cargo_2035_30454d74\"           \"cargo_2035_3045572a\"          \n[4755] \"cargo_2035_30456213\"           \"cargo_2035_3045764a\"          \n[4757] \"cargo_2035_304589dc\"           \"cargo_2035_30459683\"          \n[4759] \"cargo_2035_3046053c\"           \"cargo_2035_30461db1\"          \n[4761] \"cargo_2035_30462072\"           \"cargo_2035_30463253\"          \n[4763] \"cargo_2035_3046426d\"           \"cargo_2035_3046594a\"          \n[4765] \"cargo_2035_304664aa\"           \"cargo_2035_3046743a\"          \n[4767] \"cargo_2035_30468f63\"           \"cargo_2035_30469ad7\"          \n[4769] \"cargo_2035_30470e7f\"           \"cargo_2035_30471e77\"          \n[4771] \"cargo_2035_304725ef\"           \"cargo_2035_30473cd2\"          \n[4773] \"cargo_2035_30474038\"           \"cargo_2035_304751a1\"          \n[4775] \"cargo_2035_304760cc\"           \"cargo_2035_304770c9\"          \n[4777] \"cargo_2035_30478819\"           \"cargo_2035_30479b43\"          \n[4779] \"cargo_2035_30490926\"           \"cargo_2035_3049746e\"          \n[4781] \"cargo_2035_30498d83\"           \"cargo_2035_30499991\"          \n[4783] \"cargo_2035_30501778\"           \"cargo_2035_305022d4\"          \n[4785] \"cargo_2035_305032c7\"           \"cargo_2035_30504feb\"          \n[4787] \"cargo_2035_305057ea\"           \"cargo_2035_30506221\"          \n[4789] \"cargo_2035_30508015\"           \"cargo_2035_30509b7e\"          \n[4791] \"cargo_2035_30510543\"           \"cargo_2035_30512a46\"          \n[4793] \"cargo_2035_30513aa6\"           \"cargo_2035_30514eb7\"          \n[4795] \"cargo_2035_30515de2\"           \"cargo_2035_30516e56\"          \n[4797] \"cargo_2035_30517597\"           \"cargo_2035_30518cdb\"          \n[4799] \"cargo_2035_3051925a\"           \"cargo_2035_305200c4\"          \n[4801] \"cargo_2035_3052181f\"           \"cargo_2035_30523c2b\"          \n[4803] \"cargo_2035_30524b23\"           \"cargo_2035_30525224\"          \n[4805] \"cargo_2035_3052669a\"           \"cargo_2035_30527791\"          \n[4807] \"cargo_2035_305281f3\"           \"cargo_2035_30529e66\"          \n[4809] \"cargo_2035_30530a5a\"           \"cargo_2035_30536eb6\"          \n[4811] \"cargo_2035_3053771c\"           \"cargo_2035_30538eb4\"          \n[4813] \"cargo_2035_305390b2\"           \"cargo_2035_30540706\"          \n[4815] \"cargo_2035_305416be\"           \"cargo_2035_305429c3\"          \n[4817] \"cargo_2035_30543bf8\"           \"cargo_2035_30544dae\"          \n[4819] \"cargo_2035_30545119\"           \"cargo_2035_305464b1\"          \n[4821] \"cargo_2035_3054745a\"           \"cargo_2035_30548bdf\"          \n[4823] \"cargo_2035_30549dae\"           \"cargo_2035_305503db\"          \n[4825] \"cargo_2035_3055178e\"           \"cargo_2035_305522ac\"          \n[4827] \"cargo_2035_305538c2\"           \"cargo_2035_30554f50\"          \n[4829] \"cargo_2035_305552bd\"           \"cargo_2035_30556020\"          \n[4831] \"cargo_2035_3055766e\"           \"cargo_2035_30558bb9\"          \n[4833] \"cargo_2035_305596dd\"           \"cargo_2035_30560d6b\"          \n[4835] \"cargo_2035_30561eba\"           \"cargo_2035_30562081\"          \n[4837] \"cargo_2035_3056326c\"           \"cargo_2035_30564fc0\"          \n[4839] \"cargo_2035_30565f32\"           \"cargo_2035_30566b7f\"          \n[4841] \"cargo_2035_30567289\"           \"cargo_2035_30568fd9\"          \n[4843] \"cargo_2035_305698a2\"           \"cargo_2035_30570d47\"          \n[4845] \"cargo_2035_305713ed\"           \"cargo_2035_30572f9e\"          \n[4847] \"cargo_2035_30573866\"           \"cargo_2035_30574851\"          \n[4849] \"cargo_2035_30575b08\"           \"cargo_2035_30576666\"          \n[4851] \"cargo_2035_305775cb\"           \"cargo_2035_30578cdb\"          \n[4853] \"cargo_2035_30579407\"           \"cargo_2035_3058093b\"          \n[4855] \"cargo_2035_30581013\"           \"cargo_2035_3058204f\"          \n[4857] \"cargo_2035_3058398b\"           \"cargo_2035_30584e50\"          \n[4859] \"cargo_2035_30586a0d\"           \"cargo_2035_305923dc\"          \n[4861] \"cargo_2035_305936cf\"           \"cargo_2035_30594fc6\"          \n[4863] \"cargo_2035_3059672e\"           \"cargo_2035_305977f2\"          \n[4865] \"cargo_2035_30598d85\"           \"cargo_2035_30599d46\"          \n[4867] \"cargo_2035_30600c5c\"           \"cargo_2035_30602a7c\"          \n[4869] \"cargo_2035_30603eae\"           \"cargo_2035_30604d4d\"          \n[4871] \"cargo_2035_306050d4\"           \"cargo_2035_306073eb\"          \n[4873] \"cargo_2035_30608c5b\"           \"cargo_2035_30609362\"          \n[4875] \"cargo_2035_3061099f\"           \"cargo_2035_30611e58\"          \n[4877] \"cargo_2035_306121c8\"           \"cargo_2035_30613613\"          \n[4879] \"cargo_2035_30614cc6\"           \"cargo_2035_30615a5f\"          \n[4881] \"cargo_2035_30616c80\"           \"cargo_2035_30618a20\"          \n[4883] \"cargo_2035_30619620\"           \"cargo_2035_306209aa\"          \n[4885] \"cargo_2035_30621ebd\"           \"cargo_2035_306229ef\"          \n[4887] \"cargo_2035_30623c77\"           \"cargo_2035_306249e8\"          \n[4889] \"cargo_2035_3062517d\"           \"cargo_2035_30632b33\"          \n[4891] \"cargo_2035_3064198a\"           \"cargo_2035_30642e8d\"          \n[4893] \"cargo_2035_30643ebf\"           \"cargo_2035_306447c1\"          \n[4895] \"cargo_2035_30645f1a\"           \"cargo_2035_3064686c\"          \n[4897] \"cargo_2035_30647e06\"           \"cargo_2035_30648b71\"          \n[4899] \"cargo_2035_306499b4\"           \"cargo_2035_306506f3\"          \n[4901] \"cargo_2035_30651f30\"           \"cargo_2035_30652c13\"          \n[4903] \"cargo_2035_30653d3a\"           \"cargo_2035_30654996\"          \n[4905] \"cargo_2035_3065574b\"           \"cargo_2035_306564ee\"          \n[4907] \"cargo_2035_306576f5\"           \"cargo_2035_30658c2d\"          \n[4909] \"cargo_2035_306592b5\"           \"cargo_2035_306606c7\"          \n[4911] \"cargo_2035_30661d48\"           \"cargo_2035_306628ab\"          \n[4913] \"cargo_2035_30663318\"           \"cargo_2035_3066427e\"          \n[4915] \"cargo_2035_30665466\"           \"cargo_2035_306664cd\"          \n[4917] \"cargo_2035_30667047\"           \"cargo_2035_306687af\"          \n[4919] \"cargo_2035_30670fc1\"           \"cargo_2035_30671c81\"          \n[4921] \"cargo_2035_30673e13\"           \"cargo_2035_3067488c\"          \n[4923] \"cargo_2035_3067552c\"           \"cargo_2035_30676cd7\"          \n[4925] \"cargo_2035_306771d1\"           \"cargo_2035_30678b81\"          \n[4927] \"cargo_2035_3067986a\"           \"cargo_2035_30680c1a\"          \n[4929] \"cargo_2035_306811dd\"           \"cargo_2035_30682647\"          \n[4931] \"cargo_2035_3068317d\"           \"cargo_2035_30684b3c\"          \n[4933] \"cargo_2035_3068585e\"           \"cargo_2035_306867b8\"          \n[4935] \"cargo_2035_306879ac\"           \"cargo_2035_30688284\"          \n[4937] \"cargo_2035_30689de6\"           \"cargo_2035_306906eb\"          \n[4939] \"cargo_2035_30691be0\"           \"cargo_2035_30695596\"          \n[4941] \"cargo_2035_30702ff0\"           \"cargo_2035_30703c19\"          \n[4943] \"cargo_2035_30704d88\"           \"cargo_2035_30705138\"          \n[4945] \"cargo_2035_30706a64\"           \"cargo_2035_307074f9\"          \n[4947] \"cargo_2035_30712fed\"           \"cargo_2035_30713d84\"          \n[4949] \"cargo_2035_3071496d\"           \"cargo_2035_307150a5\"          \n[4951] \"cargo_2035_3071603b\"           \"cargo_2035_30717901\"          \n[4953] \"cargo_2035_30718061\"           \"cargo_2035_307200df\"          \n[4955] \"cargo_2035_30721d2e\"           \"cargo_2035_3072258f\"          \n[4957] \"cargo_2035_30723715\"           \"cargo_2035_30724c68\"          \n[4959] \"cargo_2035_307253e8\"           \"cargo_2035_3072632b\"          \n[4961] \"cargo_2035_30727de6\"           \"cargo_2035_3072860a\"          \n[4963] \"cargo_2035_30739a22\"           \"cargo_2035_30740390\"          \n[4965] \"cargo_2035_30741521\"           \"cargo_2035_30742a1d\"          \n[4967] \"cargo_2035_30743a2d\"           \"cargo_2035_3074485b\"          \n[4969] \"cargo_2035_307454dc\"           \"cargo_2035_307463a5\"          \n[4971] \"cargo_2035_307479d8\"           \"cargo_2035_307485d2\"          \n[4973] \"cargo_2035_30750b67\"           \"cargo_2035_3075152b\"          \n[4975] \"cargo_2035_30752552\"           \"cargo_2035_30753949\"          \n[4977] \"cargo_2035_30754541\"           \"cargo_2035_3075590a\"          \n[4979] \"cargo_2035_30758cf7\"           \"cargo_2035_307597e4\"          \n[4981] \"cargo_2035_30761fc6\"           \"cargo_2035_30762ac7\"          \n[4983] \"cargo_2035_30763033\"           \"cargo_2035_30764d70\"          \n[4985] \"cargo_2035_30765a72\"           \"cargo_2035_307674ed\"          \n[4987] \"cargo_2035_307692d4\"           \"cargo_2035_30773848\"          \n[4989] \"cargo_2035_30774ed6\"           \"cargo_2035_30776c88\"          \n[4991] \"cargo_2035_307778a2\"           \"cargo_2035_30778b86\"          \n[4993] \"cargo_2035_3077983a\"           \"cargo_2035_30780f4e\"          \n[4995] \"cargo_2035_307817f9\"           \"cargo_2035_30783f4c\"          \n[4997] \"cargo_2035_30784bce\"           \"cargo_2035_30785cbb\"          \n[4999] \"cargo_2035_307867bd\"           \"cargo_2035_307878c6\"          \n[5001] \"cargo_2035_3078821a\"           \"cargo_2035_30789188\"          \n[5003] \"cargo_2035_30790f09\"           \"cargo_2035_3079182e\"          \n[5005] \"cargo_2035_307923f8\"           \"cargo_2035_3079515f\"          \n[5007] \"cargo_2035_3079657a\"           \"cargo_2035_307973ab\"          \n[5009] \"cargo_2035_307988bf\"           \"cargo_2035_30799c1b\"          \n[5011] \"cargo_2035_30800b66\"           \"cargo_2035_30801530\"          \n[5013] \"cargo_2035_308023fd\"           \"cargo_2035_30803011\"          \n[5015] \"cargo_2035_30804be7\"           \"cargo_2035_30805cfd\"          \n[5017] \"cargo_2035_308061a1\"           \"cargo_2035_308071a3\"          \n[5019] \"cargo_2035_3080809d\"           \"cargo_2035_30809b31\"          \n[5021] \"cargo_2035_308105ef\"           \"cargo_2035_30811cd2\"          \n[5023] \"cargo_2035_3081214c\"           \"cargo_2035_3081383e\"          \n[5025] \"cargo_2035_308148ab\"           \"cargo_2035_30815fa3\"          \n[5027] \"cargo_2035_30816b49\"           \"cargo_2035_30817c5a\"          \n[5029] \"cargo_2035_30818a31\"           \"cargo_2035_3081966f\"          \n[5031] \"cargo_2035_308206c8\"           \"cargo_2035_30821ffc\"          \n[5033] \"cargo_2035_30822e94\"           \"cargo_2035_30823571\"          \n[5035] \"cargo_2035_30830a38\"           \"cargo_2035_30834899\"          \n[5037] \"cargo_2035_30835473\"           \"cargo_2035_30836a2e\"          \n[5039] \"cargo_2035_308379bb\"           \"cargo_2035_3083806a\"          \n[5041] \"cargo_2035_308405ca\"           \"cargo_2035_30841778\"          \n[5043] \"cargo_2035_308421f2\"           \"cargo_2035_30843d4f\"          \n[5045] \"cargo_2035_308448a8\"           \"cargo_2035_30845f90\"          \n[5047] \"cargo_2035_3084607d\"           \"cargo_2035_3084708e\"          \n[5049] \"cargo_2035_30848126\"           \"cargo_2035_30849fbd\"          \n[5051] \"cargo_2035_308516a2\"           \"cargo_2035_308529c9\"          \n[5053] \"cargo_2035_30854fc7\"           \"cargo_2035_30855af5\"          \n[5055] \"cargo_2035_30856a1d\"           \"cargo_2035_30866514\"          \n[5057] \"cargo_2035_308675c3\"           \"cargo_2035_30868a7a\"          \n[5059] \"cargo_2035_30869e77\"           \"cargo_2035_30870365\"          \n[5061] \"cargo_2035_3087102f\"           \"cargo_2035_30872552\"          \n[5063] \"cargo_2035_308735fc\"           \"cargo_2035_30874d9f\"          \n[5065] \"cargo_2035_30875d13\"           \"cargo_2035_30877215\"          \n[5067] \"cargo_2035_30885f28\"           \"cargo_2035_308861d0\"          \n[5069] \"cargo_2035_30887f7e\"           \"cargo_2035_308881d9\"          \n[5071] \"cargo_2035_30889c75\"           \"cargo_2035_30890ee1\"          \n[5073] \"cargo_2035_308916cf\"           \"cargo_2035_30896070\"          \n[5075] \"cargo_2035_30902c40\"           \"cargo_2035_30903e68\"          \n[5077] \"cargo_2035_30905572\"           \"cargo_2035_309063bf\"          \n[5079] \"cargo_2035_30907673\"           \"cargo_2035_309086e5\"          \n[5081] \"cargo_2035_309095f5\"           \"cargo_2035_30910b82\"          \n[5083] \"cargo_2035_30911c34\"           \"cargo_2035_30912130\"          \n[5085] \"cargo_2035_309133cc\"           \"cargo_2035_3091485d\"          \n[5087] \"cargo_2035_309159a7\"           \"cargo_2035_30916888\"          \n[5089] \"cargo_2035_30917ed4\"           \"cargo_2035_30918c5c\"          \n[5091] \"cargo_2035_309191b8\"           \"cargo_2035_30920826\"          \n[5093] \"cargo_2035_309215fc\"           \"cargo_2035_30922a13\"          \n[5095] \"cargo_2035_30923b59\"           \"cargo_2035_30924fc8\"          \n[5097] \"cargo_2035_309251ce\"           \"cargo_2035_30926af9\"          \n[5099] \"cargo_2035_30927391\"           \"cargo_2035_30928e53\"          \n[5101] \"cargo_2035_30929e8b\"           \"cargo_2035_30930746\"          \n[5103] \"cargo_2035_309317ae\"           \"cargo_2035_30932ebf\"          \n[5105] \"cargo_2035_309332c9\"           \"cargo_2035_30934758\"          \n[5107] \"cargo_2035_309359c8\"           \"cargo_2035_30936853\"          \n[5109] \"cargo_2035_3093725a\"           \"cargo_2035_30938db5\"          \n[5111] \"cargo_2035_309397d3\"           \"cargo_2035_3094056e\"          \n[5113] \"cargo_2035_30941569\"           \"cargo_2035_309426ac\"          \n[5115] \"cargo_2035_30943975\"           \"cargo_2035_3094460c\"          \n[5117] \"cargo_2035_30945438\"           \"cargo_2035_30946e1b\"          \n[5119] \"cargo_2035_30947435\"           \"cargo_2035_30948989\"          \n[5121] \"cargo_2035_3094919a\"           \"cargo_2035_30950599\"          \n[5123] \"cargo_2035_30951e9c\"           \"cargo_2035_30952cdb\"          \n[5125] \"cargo_2035_30953045\"           \"cargo_2035_30955bf1\"          \n[5127] \"cargo_2035_309569de\"           \"cargo_2035_30957898\"          \n[5129] \"cargo_2035_30958c6b\"           \"cargo_2035_30959c64\"          \n[5131] \"cargo_2035_30960cb1\"           \"cargo_2035_30971f08\"          \n[5133] \"cargo_2035_30972007\"           \"cargo_2035_3097581d\"          \n[5135] \"cargo_2035_309766bd\"           \"cargo_2035_3097757c\"          \n[5137] \"cargo_2035_30978765\"           \"cargo_2035_30979513\"          \n[5139] \"cargo_2035_30980e29\"           \"cargo_2035_3098264f\"          \n[5141] \"cargo_2035_30983d6f\"           \"cargo_2035_30985367\"          \n[5143] \"cargo_2035_30986585\"           \"cargo_2035_30987fc7\"          \n[5145] \"cargo_2035_30994953\"           \"cargo_2035_30995884\"          \n[5147] \"cargo_2035_30996f0d\"           \"cargo_2035_30997d7e\"          \n[5149] \"cargo_2035_309981eb\"           \"cargo_2035_3100879b\"          \n[5151] \"cargo_2035_3101914e\"           \"cargo_2035_31020778\"          \n[5153] \"cargo_2035_31021bff\"           \"cargo_2035_31022179\"          \n[5155] \"cargo_2035_310232ba\"           \"cargo_2035_310248b8\"          \n[5157] \"cargo_2035_31025385\"           \"cargo_2035_31026d41\"          \n[5159] \"cargo_2035_31027a06\"           \"cargo_2035_31028978\"          \n[5161] \"cargo_2035_310297de\"           \"cargo_2035_31030cb2\"          \n[5163] \"cargo_2035_31031585\"           \"cargo_2035_3103288d\"          \n[5165] \"cargo_2035_31033cc7\"           \"cargo_2035_31034f25\"          \n[5167] \"cargo_2035_310354b0\"           \"cargo_2035_31036a94\"          \n[5169] \"cargo_2035_310370ab\"           \"cargo_2035_310389d2\"          \n[5171] \"cargo_2035_31039a47\"           \"cargo_2035_310408c2\"          \n[5173] \"cargo_2035_310413a4\"           \"cargo_2035_310428b5\"          \n[5175] \"cargo_2035_31043083\"           \"cargo_2035_31044b06\"          \n[5177] \"cargo_2035_31045175\"           \"cargo_2035_31046133\"          \n[5179] \"cargo_2035_31047956\"           \"cargo_2035_31048be2\"          \n[5181] \"cargo_2035_31049f79\"           \"cargo_2035_310508e0\"          \n[5183] \"cargo_2035_31051dd0\"           \"cargo_2035_3105225e\"          \n[5185] \"cargo_2035_31053df7\"           \"cargo_2035_31054481\"          \n[5187] \"cargo_2035_31055ddb\"           \"cargo_2035_31056a34\"          \n[5189] \"cargo_2035_31057dce\"           \"cargo_2035_31058d76\"          \n[5191] \"cargo_2035_310598ab\"           \"cargo_2035_31060614\"          \n[5193] \"cargo_2035_310613a3\"           \"cargo_2035_31062215\"          \n[5195] \"cargo_2035_31063fbe\"           \"cargo_2035_31064a2a\"          \n[5197] \"cargo_2035_31065cce\"           \"cargo_2035_31066a7c\"          \n[5199] \"cargo_2035_31067f54\"           \"cargo_2035_31068235\"          \n[5201] \"cargo_2035_310699b3\"           \"cargo_2035_31070bbb\"          \n[5203] \"cargo_2035_3107191d\"           \"cargo_2035_31072d52\"          \n[5205] \"cargo_2035_310739f8\"           \"cargo_2035_310742de\"          \n[5207] \"cargo_2035_31075478\"           \"cargo_2035_31076def\"          \n[5209] \"cargo_2035_3107737f\"           \"cargo_2035_31078970\"          \n[5211] \"cargo_2035_31079c7f\"           \"cargo_2035_31080c9e\"          \n[5213] \"cargo_2035_31081ef9\"           \"cargo_2035_31082498\"          \n[5215] \"cargo_2035_3108323d\"           \"cargo_2035_310846aa\"          \n[5217] \"cargo_2035_31085392\"           \"cargo_2035_31086049\"          \n[5219] \"cargo_2035_3108726c\"           \"cargo_2035_31088084\"          \n[5221] \"cargo_2035_3108971c\"           \"cargo_2035_31090b5f\"          \n[5223] \"cargo_2035_31091ed9\"           \"cargo_2035_310926f0\"          \n[5225] \"cargo_2035_310938e9\"           \"cargo_2035_310944c5\"          \n[5227] \"cargo_2035_31095ee3\"           \"cargo_2035_310961da\"          \n[5229] \"cargo_2035_310975e4\"           \"cargo_2035_31098e2b\"          \n[5231] \"cargo_2035_3109983b\"           \"cargo_2035_31100fa8\"          \n[5233] \"cargo_2035_31101a05\"           \"cargo_2035_3110239d\"          \n[5235] \"cargo_2035_3110356d\"           \"cargo_2035_31104424\"          \n[5237] \"cargo_2035_311053bb\"           \"cargo_2035_311066e6\"          \n[5239] \"cargo_2035_3110783e\"           \"cargo_2035_31108bc0\"          \n[5241] \"cargo_2035_31109fa8\"           \"cargo_2035_31110ab7\"          \n[5243] \"cargo_2035_31111793\"           \"cargo_2035_3111290e\"          \n[5245] \"cargo_2035_31113cd7\"           \"cargo_2035_31114b72\"          \n[5247] \"cargo_2035_31116776\"           \"cargo_2035_31117e26\"          \n[5249] \"cargo_2035_311180e9\"           \"cargo_2035_31119aa3\"          \n[5251] \"cargo_2035_31120920\"           \"cargo_2035_31121366\"          \n[5253] \"cargo_2035_311221a0\"           \"cargo_2035_31123808\"          \n[5255] \"cargo_2035_311245dd\"           \"cargo_2035_31125ff0\"          \n[5257] \"cargo_2035_31127e0f\"           \"cargo_2035_31128225\"          \n[5259] \"cargo_2035_3112923f\"           \"cargo_2035_31130f80\"          \n[5261] \"cargo_2035_3113160d\"           \"cargo_2035_3113227e\"          \n[5263] \"cargo_2035_31133103\"           \"cargo_2035_3113485f\"          \n[5265] \"cargo_2035_3113505b\"           \"cargo_2035_311367b9\"          \n[5267] \"cargo_2035_31138b98\"           \"cargo_2035_3113943e\"          \n[5269] \"cargo_2035_3114013f\"           \"cargo_2035_31141efd\"          \n[5271] \"cargo_2035_31142cb2\"           \"cargo_2035_31143154\"          \n[5273] \"cargo_2035_3114447b\"           \"cargo_2035_311451b5\"          \n[5275] \"cargo_2035_31146b3e\"           \"cargo_2035_311470e5\"          \n[5277] \"cargo_2035_31149290\"           \"cargo_2035_31156e4e\"          \n[5279] \"cargo_2035_31157f2a\"           \"cargo_2035_311580af\"          \n[5281] \"cargo_2035_31159a6e\"           \"cargo_2035_31160a12\"          \n[5283] \"cargo_2035_311618c7\"           \"cargo_2035_31162023\"          \n[5285] \"cargo_2035_31163f79\"           \"cargo_2035_311646d8\"          \n[5287] \"cargo_2035_31165896\"           \"cargo_2035_3116751f\"          \n[5289] \"cargo_2035_31168128\"           \"cargo_2035_311693d8\"          \n[5291] \"cargo_2035_31170515\"           \"cargo_2035_31171e1b\"          \n[5293] \"cargo_2035_3117306a\"           \"cargo_2035_31174e0f\"          \n[5295] \"cargo_2035_311757d0\"           \"cargo_2035_31176568\"          \n[5297] \"cargo_2035_311788c3\"           \"cargo_2035_3117920f\"          \n[5299] \"cargo_2035_31180d28\"           \"cargo_2035_3118141a\"          \n[5301] \"cargo_2035_3118220f\"           \"cargo_2035_31183e46\"          \n[5303] \"cargo_2035_31184b29\"           \"cargo_2035_311854e6\"          \n[5305] \"cargo_2035_31186ea8\"           \"cargo_2035_31187527\"          \n[5307] \"cargo_2035_31189bb6\"           \"cargo_2035_3119010f\"          \n[5309] \"cargo_2035_3119118e\"           \"cargo_2035_3119237c\"          \n[5311] \"cargo_2035_311936c4\"           \"cargo_2035_31194d62\"          \n[5313] \"wavewranglerc2d\"               \"yellowfintunataker08b\"        \n[5315] \"webigailba7\"                   \"arcticgraylingangler094\"      \n[5317] \"anchovyassaulterb1c\"           \"oceanreaper44a\"               \n[5319] \"herringharpooner843\"           \"halibuthunterd84\"             \n[5321] \"brooktroutbuccaneerc0b\"        \"venerable89c\"                 \n[5323] \"groupergrabber60d\"             \"welscatfishwrangler6ae\"       \n[5325] \"skipjacktunatakerf85\"          \"seawaysavvy9847\"              \n[5327] \"pacificcodcapturer81c\"         \"bluefishbandit8ec\"            \n[5329] \"maritimemaelstromc5d\"          \"europeanperchpirated9b\"       \n[5331] \"whitefishwrangler7df\"          \"sturdyd7f\"                    \n[5333] \"longfintunalooterf32\"          \"plaicepirate8c6\"              \n[5335] \"pikeplunderer0ca\"              \"albacoreangler47d\"            \n[5337] \"pikepirate89a\"                 \"flatheadcatfishfindera51\"     \n[5339] \"burbotbandit7bf\"               \"clamclaimer13d\"               \n[5341] \"neptunesnete8c\"                \"shrimpshooter91c\"             \n[5343] \"aquaticangler5c3\"              \"blackbullheadbandit801\"       \n[5345] \"turbottakerd86\"                \"seaswindler255\"               \n[5347] \"atlanticbluemarlinmarauder0b4\" \"laketroutlooter534\"           \n[5349] \"dolphindasher004\"              \"oceanicoracle9da\"             \n[5351] \"stout369\"                      \"tidetamerbe1\"                 \n[5353] \"mackerelmarauder2d4\"           \"grasspickerelgangster7d1\"     \n[5355] \"harborharmonyfc9\"              \"barracudabaiter8b3\"           \n[5357] \"nauticalnomada36\"              \"wavewarrior5d7\"               \n[5359] \"cargocatalyst39a7\"             \"bluemarlinbandit292\"          \n[5361] \"longnosesuckerseeker6ab\"       \"halibuthero9b9\"               \n[5363] \"marinemarauder8c9\"             \"yellowperchpiratec59\"         \n[5365] \"inquisitive8c0\"                \"pompanoplunderere5d\"          \n[5367] \"herringhunter30b\"              \"musselmaster8d8\"              \n[5369] \"speckledtroutsaboteur509\"      \"swordfishswindler37b\"         \n[5371] \"sharkshooterd66\"               \"marlinmaster8ab\"              \n[5373] \"mackerelmariner70c\"            \"pollockpirate212\"             \n[5375] \"perchpursuer982\"               \"rainbowtroutraider4d0\"        \n[5377] \"vesselvertexa2e\"               \"skipjacktunaseeker76c\"        \n[5379] \"haddockhawkb7c\"                \"catchcruisera94\"              \n[5381] \"bigeyetunabuccaneera16\"        \"codfather685\"                 \n[5383] \"cohosalmoncapturera7b\"         \"largemouthbasslooterf95\"      \n[5385] \"snappersnatcher7be\"            \"malta8cc\"                     \n[5387] \"hooklinesinkera2d\"             \"redfinpickerelraider744\"      \n[5389] \"tigermuskellungemaster012\"     \"sockeyesalmonseekerb95\"       \n[5391] \"trouttracker43b\"               \"atlanticcodcatcherca6\"        \n[5393] \"fishtracker03e\"                \"flukefinder28d\"               \n[5395] \"chumsalmoncatcher41e\"          \"saltyskippera9e\"              \n[5397] \"perchplundererbc0\"             \"stripedbassseeker80c\"         \n[5399] \"gurnardgrabberd9a\"             \"dewie961\"                     \n[5401] \"swordfishsaboteur22f\"          \"whitingwrangler842\"           \n[5403] \"vesselventuredfa\"              \"City of Port Grove\"           \n[5405] \"carpcatcher3f4\"                \"himarkroyal032\"               \n[5407] \"mrray9c4\"                      \"whelkwrangler9ac\"             \n[5409] \"manatee17ea\"                   \"hewey2ef\"                     \n[5411] \"tenchtaker595\"                 \"pinksalmonpirate2a3\"          \n[5413] \"seasentinel1c4b\"               \"maritimematrix7755\"           \n[5415] \"maritimemajesticeb7\"           \"bluecatfishcatcher468\"        \n[5417] \"carpcapturer993\"               \"goldfishgrabber270\"           \n[5419] \"soleseeker47a\"                 \"whitefishwhisperer6df\"        \n[5421] \"cutthroattroutcatchere2b\"      \"haddockhunter1a7\"             \n[5423] \"seawaysavvy102\"                \"brinebuccaneer9fd\"            \n[5425] \"redfishraider677\"              \"roachraider7ce\"               \n[5427] \"europeaneelenthusiastf9f\"      \"chainpickerelplunderer039\"    \n[5429] \"marinersmate8ee\"               \"snooksnatcherbdb\"             \n[5431] \"squidsquad7fd\"                 \"baitedbreath538\"              \n[5433] \"blueharbor2c1\"                 \"goldentroutgrabber7f6\"        \n[5435] \"yellowbullheadbuccaneer968\"    \"tunatrawlerafd\"               \n[5437] \"cargocentric4d0\"               \"ladyfishlooter7ea\"            \n[5439] \"deepseadrifter9f2\"             \"seahunter56b\"                 \n[5441] \"freightfrontiers1bc\"           \"honorablea6e\"                 \n[5443] \"bluegillbandita5f\"             \"eelenthusiast8c6\"             \n[5445] \"costasmeraldaac7\"              \"clownfishe3d\"                 \n[5447] \"maritimemomentumfab\"           \"seaserpent4b4\"                \n[5449] \"walleyewranglerda0\"            \"louietheii3e0\"                \n[5451] \"eelensnarerd3a\"                \"harborhelios585\"              \n[5453] \"bigeyetunabanditb73\"           \"lobsterlooterd41\"             \n[5455] \"shipmatrix9b4\"                 \"oysteropener442\"              \n[5457] \"cargocatalystb02\"              \"channelcatfishcapturer175\"    \n[5459] \"trawlertriumph31f\"             \"spanishmackerelmaster037\"     \n[5461] \"bonefishbaiter565\"             \"kingfisher87d\"                \n[5463] \"tunataker80c\"                  \"tarpontaker6cd\"               \n[5465] \"fishfinderb9d\"                 \"kingfishcapturerbe7\"          \n[5467] \"wahoowrangler016\"              \"zanderzealotb23\"              \n[5469] \"mackerelmaster0a5\"             \"ruddraiderced\"                \n[5471] \"sailfishseeker8d5\"             \"transatlantic77d\"             \n[5473] \"bluefintunabandit177\"          \"respectable717\"               \n[5475] \"seabassbandit9ad\"              \"spiritofoceanus404\"           \n[5477] \"barracudabandit836\"            \"codcatcher04c\"                \n[5479] \"europeanseabassbuccaneer777\"   \"squidsquasherda9\"             \n[5481] \"bassbandit0d5\"                 \"cobiacapturere5e\"             \n[5483] \"flounderfinderd64\"             \"salmonseeker630\"              \n[5485] \"northernpikepirated97\"         \"sailfishswindlerb4f\"          \n[5487] \"muskellungemastere7c\"          \"seasirenf43\"                  \n[5489] \"steelheadstalkera87\"           \"clamcatcherfb3\"               \n[5491] \"brillbandit0a1\"                \"huron1b3\"                     \n[5493] \"fishflingere29\"                \"muskellungemarauder78c\"       \n[5495] \"crappiecapturer875\"            \"freightfrequency5f65\"         \n[5497] \"plaiceplundererba1\"            \"albacoreassaulter482\"         \n[5499] \"seabreamseekerd8b\"             \"wahoowarriord42\"              \n[5501] \"musselmaraudere9b\"             \"americaneelenthusiastcfa\"     \n[5503] \"mahimahimaster04f\"             \"brownbullheadbriganded2\"      \n[5505] \"bassbaiterb9f\"                 \"sardineseeker62e\"             \n[5507] \"blackdrumbanditc5b\"            \"graylinggrabber802\"           \n[5509] \"browntroutbandite67\"           \"kingsalmonking5b4\"            \n[5511] \"salmonsnatcher19d\"             \"amberjackassaulterd52\"        \n[5513] \"breambanditc85\"                \"oceanoracle1d0\"               \n[5515] \"whitesuckerwrangler0b3\"        \"swimmingsafely92d\"            \n[5517] \"vesselvictory3738\"             \"oceanicoasis15f6\"             \n[5519] \"harborhalo9dd6\"                \"transpacificed8\"              \n[5521] \"freightfirm27f\"                \"catfishcapturer7a8\"           \n[5523] \"opheliacac\"                    \"aquaticpursuitf31\"            \n[5525] \"whitemarlinwranglerbac\"        \"tautogtaker867\"               \n[5527] \"seawayspectra490\"              \"cargocircuit26cc\"             \n[5529] \"crabcatcher1aa\"                \"louieda4\"                     \n[5531] \"weakfishwranglerd3c\"           \"roachrobberdb6\"               \n[5533] \"oceanicoasisd3f\"               \"posiedonsparadise7e6\"         \n[5535] \"prawnpredator5d7\"              \"seasovereignc6e\"              \n[5537] \"oceanicodyssey11207\"           \"freightfortef0d\"              \n[5539] \"nauticalnetworks865\"           \"whitemarlinmasterfa1\"         \n[5541] \"maritimemiraclef85\"            \"vesselvanguardbf2\"            \n[5543] \"seasystem375\"                  \"seasanctuary505\"              \n[5545] \"seasystem3e22\"                 \"athenad34\"                    \n[5547] \"freightforte6f28\"              \"vesselvistad0c\"               \n[5549] \"nauticalnirvana874\"            \"oceanoptimum9f4\"              \n[5551] \"maritimemomentum8d12\"          \"transpolar2a4\"                \n[5553] \"maritimemover13f\"              \"transoceane48\"                \n[5555] \"maritimemastersd93\"            \"seasphere38e\"                 \n[5557] \"transatlantic47a9\"             \"cargocircuit545\"              \n[5559] \"seawayservicesc71\"             \"harborhalo603\"                \n[5561] \"oceanicodyssey5dd\"             \"nauticalnimbusa99\"            \n[5563] \"harborhavenf91\"                \"maritimematrix51a\"            \n[5565] \"vesselventure46e5\"             \"nauticalnexus1a5d\"            \n[5567] \"freightfrontiers7134\"          \"transglobal266\"               \n[5569] \"seasentry2e28\"                 \"cargocosmoscde\"               \n[5571] \"oceanicline3de\"                \"oceanicoverturec58\"           \n[5573] \"harborhorizon6c6\"              \"transcontinentalcf3\"          \n[5575] \"freightfrequencyfea\"           \"harborholdings797\"            \n[5577] \"seawaysurgeb1c\"                \"harborhorizon10ecb\"           \n[5579] \"cargocrestb7c\"                 \"freightflux254\"               \n[5581] \"nauticalnexus6cc\"              \"oceanicoracle2bf2\"            \n[5583] \"transglobal607c\"               \"vesselventuresc7e\"            \n[5585] \"freightfusion141\"              \"nauticalnucleusc5a\"           \n[5587] \"freightfountaind90\"            \"cargocynosure29d\"             \n[5589] \"vesselvanguard5d06\"            \"cargocentric443e\"             \n[5591] \"vesselvortex355\"               \"vesselvictoryafd\"             \n[5593] \"aquatransit6bc\"                \"harborhelix456\"               \n[5595] \"seasolutions4d5\"               \"seawaysynergybaf\"             \n[5597] \"seawaysynergy8489\"             \"transpacific5ada\"             \n[5599] \"seasentry1d3\"                  \"nauticalnomad11356\"           \n[5601] \"bulkcarriers6cd\"               \"seasentinel24e\"               \n[5603] \"nauticalnavigatorabd\"          \"seawayspectrumca2\"            \n[5605] \"oceanicomnipotenta4a\"          \"heartofoceanusf11\"            \n[5607] \"seawaysage5ce\"                 \"nauticalnucleus107c4\"         \n[5609] \"maritimemagnitude2e9\"          \"Exit West\"                    \n[5611] \"Nav 3\"                         \"Nav D\"                        \n[5613] \"Nav B\"                         \"Nav A\"                        \n[5615] \"Nav C\"                         \"Nav 2\"                        \n[5617] \"Nav 1\"                         \"Exit East\"                    \n[5619] \"Exit South\"                    \"Exit North\"                   \n[5621] \"Nav E\"                         \"Cod Table\"                    \n[5623] \"Ghoti Preserve\"                \"Wrasse Beds\"                  \n[5625] \"Nemo Reef\"                     \"Don Limpet Preserve\"          \n[5627] \"Tuna Shelf\"                   \n\n\n\n# Filter cargo vessels and select specific columns with renaming\ncargo_vessel &lt;- mc2_nodes_cleaned %&gt;%\n  filter(type %in% c(\"Entity.Vessel.CargoVessel\")) %&gt;%\n  select(\n    vessel_type = type,\n    cargo_vessel_id = id,\n    cargo_vessel_name = Name,\n    company\n  )\n\n\nunique(fishing_vessel$company)\n\n [1] \"Roth, Logan and Moreno\"                   \n [2] \"Brown-Haas\"                               \n [3] \"Smith, Davis and Acosta\"                  \n [4] \"Cisneros-Meyer\"                           \n [5] \"FlounderLeska Marine BV\"                  \n [6] \"House Group\"                              \n [7] \"Weaver-Baker\"                             \n [8] \"Stewart, Perkins and Sanchez\"             \n [9] \"ScaniaSeafood Holdings Ltd. Liability Co\" \n[10] \"Mccormick Group\"                          \n[11] \"Parks Ltd\"                                \n[12] \"Taylor-Sawyer\"                            \n[13] \"Nielsen, Valentine and Bell\"              \n[14] \"Jacobson Inc\"                             \n[15] \"Ballard-Bailey\"                           \n[16] \"Steele PLC\"                               \n[17] \"WestRiver Shipping KgaA\"                  \n[18] \"Robinson, Mcmillan and Watson\"            \n[19] \"Lowery-Myers\"                             \n[20] \"Dyer-Campbell\"                            \n[21] \"Adkins LLC\"                               \n[22] \"BaringoAmerica Marine Ges.m.b.H.\"         \n[23] \"Terry, Smith and Lyons\"                   \n[24] \"Schmidt Ltd\"                              \n[25] \"Ritter Ltd\"                               \n[26] \"Decker PLC\"                               \n[27] \"Faulkner, Shaffer and Moyer\"              \n[28] \"Brown-Allen\"                              \n[29] \"Bell, Reynolds and Forbes\"                \n[30] \"French Ltd\"                               \n[31] \"Rivera Group\"                             \n[32] \"Bowers Group\"                             \n[33] \"MonarchCreek Shipping S.p.A.\"             \n[34] \"Mendez-Tyler\"                             \n[35] \"Mooney, Stevenson and Miller\"             \n[36] \"Garcia-Wallace\"                           \n[37] \"Cox-Mason\"                                \n[38] \"Garcia-Sanchez\"                           \n[39] \"Sutton PLC\"                               \n[40] \"Rasmussen, Nelson and King\"               \n[41] \"Brown, Clarke and Martinez\"               \n[42] \"Gomez-Mccormick\"                          \n[43] \"Solis-Lopez\"                              \n[44] \"SouthSeafood Express Corp\"                \n[45] \"Clark, Hall and Cole\"                     \n[46] \"Cox-Donovan\"                              \n[47] \"Solis PLC\"                                \n[48] \"Newton-Meyer\"                             \n[49] \"Mcpherson-Wright\"                         \n[50] \"Cordova, Ritter and Flores\"               \n[51] \"Miller, Smith and Reed\"                   \n[52] \"Barnes and Sons\"                          \n[53] \"Bennett, Jones and Miller\"                \n[54] \"Mercado, French and Graham\"               \n[55] \"Brewer-Massey\"                            \n[56] \"Norman LLC\"                               \n[57] \"Wiley LLC\"                                \n[58] \"Davis, Harris and West\"                   \n[59] \"Goodman LLC\"                              \n[60] \"Reid, Thomas and Gill\"                    \n[61] \"Henry-Alvarez\"                            \n[62] \"Lane Group\"                               \n[63] \"Smith, Collins and Johnson\"               \n[64] \"Franco, Olson and Long\"                   \n[65] \"Dry CreekWorldLogistics Ltd. Liability Co\"\n[66] \"Rodriguez, Henry and Woodard\"             \n[67] \"Thompson-Padilla\"                         \n[68] \"Carter, Mcdonald and Miller\"              \n[69] \"Williams, Horn and Morales\"               \n[70] \"Callahan-Green\"                           \n[71] \"Green, Vincent and Thompson\"              \n[72] \"Lake Malawi  Corp United\"                 \n[73] \"Wolf and Sons\"                            \n[74] \"Hernandez Group\"                          \n[75] \"Horne Group\"                              \n[76] \"Fischer, Graham and Robinson\"             \n[77] \"Chavez and Sons\"                          \n[78] \"Maacama Ocean Worldwide LLC\"              \n[79] \"Jordan and Sons\"                          \n[80] \"Martin-Case\"                              \n[81] \"Murphy and Sons\"                          \n[82] \"Collins, Johnson and Lloyd\"               \n[83] \"Sparmans Marine Carriers Oyj\"             \n[84] \"Mullins-Carrillo\"                         \n[85] \"Riley Inc\"                                \n[86] \"NortheastSeafood Carriers Ltd\"            \n[87] \"Chambers, Hall and Walker\"                \n[88] \"Osborne and Sons\"                         \n[89] \"Conley, Benton and Miller\"                \n[90] \"Saltwater Sisters Company Marine\"         \n[91] \"Costa de Oro Enterprises\"                 \n[92] \"Bailey-Mccullough\"                        \n[93] \"Chase, Long and Anderson\"                 \n[94] \"Vasquez-Gonzalez\"                         \n[95] \"Harper and Sons\"                          \n[96] \"Tainamarine Fishing Co\"                   \n[97] \"Mcdonald-Jones\"                           \n[98] \"George-Brown\"                             \n[99] \"SamakaDredgeTransport OJSC\"               \n\n\n\nOceanusGeography = st_read(\"data/OceanusGeography.geojson\") %&gt;%\n  st_transform(crs = 4326)\n\nReading layer `OceanusGeography' from data source \n  `C:\\aryasiahaan\\ISSS608-VAA\\Take-home_Ex\\Take-home_Ex03\\data\\OceanusGeography.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 29 features and 7 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n\n\n\nclass(OceanusGeography)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\nglimpse(OceanusGeography)\n\nRows: 29\nColumns: 8\n$ Name                 &lt;chr&gt; \"Suna Island\", \"Thalassa Retreat\", \"Makara Shoal\"…\n$ Description          &lt;chr&gt; \"Large island of Oceanus\", \"Smaller island of Oce…\n$ X.note               &lt;chr&gt; \"Suna is 'sand' or 'gritty' in Japanese\", \"Thalas…\n$ type                 &lt;chr&gt; \"Entity.Location.Region\", \"Entity.Location.Region…\n$ X.Kind               &lt;chr&gt; \"Island\", \"Island\", \"Island\", \"Island\", \"Fishing …\n$ Activities           &lt;list&gt; \"Residential\", \"Residential\", \"Recreation\", &lt;\"To…\n$ fish_species_present &lt;list&gt; &lt;&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, &lt;\"Cod/Gadus n.specificatae\", \"Bi…\n$ geometry             &lt;GEOMETRY [°]&gt; MULTIPOLYGON (((-166.0111 3..., MULTIPOL…\n\n\n\nggplot(data = OceanusGeography) +\n  geom_sf()\n\n\n\n\n\n\n\n\n\nwrite_rds(OceanusGeography, \"data/rds/OceanusGeography.rds\")\n\n\nOceanusLocations &lt;- st_read(dsn = \"data/shp\",\n  layer = \"Oceanus Geography\")\n\nReading layer `Oceanus Geography' from data source \n  `C:\\aryasiahaan\\ISSS608-VAA\\Take-home_Ex\\Take-home_Ex03\\data\\shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 27 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n\n\n\nclass(OceanusLocations)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\nglimpse(OceanusLocations)\n\nRows: 27\nColumns: 8\n$ Name       &lt;chr&gt; \"Haacklee\", \"Port Grove\", \"Lomark\", \"Himark\", \"Paackland\", …\n$ Descriptio &lt;chr&gt; NA, NA, NA, NA, NA, \"Adimistrative seat of Oceanus\", NA, NA…\n$ X.note     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ Activities &lt;chr&gt; \"Tourism,Local shipping\", \"Tourism,Research\", \"Deep sea fis…\n$ type       &lt;chr&gt; \"Entity.Location.City\", \"Entity.Location.City\", \"Entity.Loc…\n$ X.Kind     &lt;chr&gt; \"city\", \"city\", \"city\", \"city\", \"city\", \"city\", \"city\", \"bu…\n$ fish_speci &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POINT [°]&gt; POINT (-165.6908 39.03215), POINT (-165.8855 39.10005…\n\n\n\nggplot(data = OceanusLocations) +\n  geom_sf()\n\n\n\n\n\n\n\n\n\nwrite_rds(OceanusLocations, \n  \"data/rds/OceanusLocations.rds\")\n\n\nvessel_movement_data &lt;- mc2_edges %&gt;%\n  filter(event3 == \"TransponderPing\") %&gt;%\n  select(time, dwell, source, target)\n\n\nunique(vessel_movement_data$source)\n\n [1] \"City of Haacklee\"        \"City of Lomark\"         \n [3] \"City of Himark\"          \"City of Paackland\"      \n [5] \"City of South Paackland\" \"City of Port Grove\"     \n [7] \"Exit West\"               \"Nav 3\"                  \n [9] \"Nav D\"                   \"Nav B\"                  \n[11] \"Nav A\"                   \"Nav C\"                  \n[13] \"Nav 2\"                   \"Nav 1\"                  \n[15] \"Exit East\"               \"Exit South\"             \n[17] \"Exit North\"              \"Nav E\"                  \n[19] \"Cod Table\"               \"Ghoti Preserve\"         \n[21] \"Wrasse Beds\"             \"Nemo Reef\"              \n[23] \"Don Limpet Preserve\"     \"Tuna Shelf\"             \n\n\n\nunique(OceanusLocations$Name)\n\n [1] \"Haacklee\"            \"Port Grove\"          \"Lomark\"             \n [4] \"Himark\"              \"Paackland\"           \"Centralia\"          \n [7] \"South Paackland\"     \"Exit West\"           \"Nav 3\"              \n[10] \"Nav D\"               \"Nav B\"               \"Nav A\"              \n[13] \"Nav C\"               \"Nav 2\"               \"Nav 1\"              \n[16] \"Exit East\"           \"Exit South\"          \"Exit North\"         \n[19] \"Nav E\"               \"Don Limpet Preserve\" \"Tuna Shelf\"         \n[22] \"Makara Shoal\"        \"Silent Sanctuary\"    \"Cod Table\"          \n[25] \"Ghoti Preserve\"      \"Wrasse Beds\"         \"Nemo Reef\"          \n\n\n\nvessel_movement_data &lt;- vessel_movement_data %&gt;%\n  mutate(source = gsub(\"^City of\", \"\", source)) %&gt;%\n  mutate(source = gsub(\"^\\\\s+\", \"\", source))\n\n\nunique(vessel_movement_data$source)\n\n [1] \"Haacklee\"            \"Lomark\"              \"Himark\"             \n [4] \"Paackland\"           \"South Paackland\"     \"Port Grove\"         \n [7] \"Exit West\"           \"Nav 3\"               \"Nav D\"              \n[10] \"Nav B\"               \"Nav A\"               \"Nav C\"              \n[13] \"Nav 2\"               \"Nav 1\"               \"Exit East\"          \n[16] \"Exit South\"          \"Exit North\"          \"Nav E\"              \n[19] \"Cod Table\"           \"Ghoti Preserve\"      \"Wrasse Beds\"        \n[22] \"Nemo Reef\"           \"Don Limpet Preserve\" \"Tuna Shelf\"         \n\n\n\ncoords &lt;- st_coordinates(OceanusLocations)\n\n\nOceanusLocations_df &lt;- OceanusLocations %&gt;%\n  st_drop_geometry()\n\n\nOceanusLocations_df$XCOORD &lt;- coords[, \"X\"]\nOceanusLocations_df$YCOORD &lt;- coords[, \"Y\"]\n\n\nclass(OceanusLocations_df)\n\n[1] \"data.frame\"\n\n\n\nOceanusLocations_df &lt;- OceanusLocations_df %&gt;%\n  select(Name, X.Kind, XCOORD, YCOORD) %&gt;%\n  rename(Loc_Type = X.Kind)\n\n\nvessel_movement_data &lt;- vessel_movement_data %&gt;%\n  left_join(OceanusLocations_df,\n            by = c(\"source\" = \"Name\"))\n\n\nwrite_rds(vessel_movement_data, \"data/rds/vessel_movement_data.rds\")\n\n\n\n\n\n\n\n\ntransponderping &lt;- subset(mc2_edges_cleaned, event3 == \"TransponderPing\")\n\nCreates subsets of data for different types of events: transponder pings, transactions, and harbor reports, facilitating focused analysis.\n\ntransponderping &lt;- subset(mc2_edges_cleaned, event3 == \"TransponderPing\")\ntransaction &lt;- subset(mc2_edges_cleaned, event2 == \"Transaction\")\nharbor_report &lt;- subset(mc2_edges_cleaned,  event2 == \"HarborReport\")\n\n\nmc2_nodes_type_counts &lt;- mc2_nodes %&gt;%\n  group_by(type) %&gt;%\n  summarise(count = n())\n\n# Display the result\nprint(mc2_nodes_type_counts)\n\n# A tibble: 12 × 2\n   type                           count\n   &lt;chr&gt;                          &lt;int&gt;\n 1 Entity.Commodity.Fish             10\n 2 Entity.Document.DeliveryReport  5307\n 3 Entity.Location.City               6\n 4 Entity.Location.Point             12\n 5 Entity.Location.Region             6\n 6 Entity.Vessel.CargoVessel        100\n 7 Entity.Vessel.Ferry.Cargo          2\n 8 Entity.Vessel.Ferry.Passenger      3\n 9 Entity.Vessel.FishingVessel      178\n10 Entity.Vessel.Other                5\n11 Entity.Vessel.Research             2\n12 Entity.Vessel.Tour                 6\n\n\n\nmc2_nodes_name_counts &lt;- mc2_nodes %&gt;%\n  group_by(name) %&gt;%\n  summarise(count = n())\n\n# Display the result\nprint(mc2_nodes_name_counts)\n\n# A tibble: 11 × 2\n   name                      count\n   &lt;chr&gt;                     &lt;int&gt;\n 1 Beauvoir/Habeas pisces        1\n 2 Birdseye/Pisces frigus        1\n 3 Cod/Gadus n.specificatae      1\n 4 Harland/Piscis sapidum        1\n 5 Helenaa/Pisces satis          1\n 6 Offidiaa/Piscis osseus        1\n 7 Salmon/Oncorhynchus rosea     1\n 8 Sockfish/Pisces foetida       1\n 9 Tuna/Thunnini n.vera          1\n10 Wrasse/Labridae n.refert      1\n11 &lt;NA&gt;                       5627"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#getting-started",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "For the purpose of this exercise, several R packages will be used to perform the following tasks:\n\nImporting graph data in json file format into R\nExtracting the nodes and edges (also known as links) from imported graph data.\nWrangling text data type.\nImporting geographical data in geojson file format into R,\nImporting geographical data in ESRI shapefile format into R,\nExtracting movement data from the edges table of a knowledge graph,\nDeriving a trajectory data from a movement data, and\nVisualising trajectory data to reveal geo-temporal patterns.\n\nThe following code chunk utilises the p_load() function from the pacman package to ensure that the necessary packages are available in the R environment. If the packages are already installed on the computer, p_load() will load them. If they are not installed, it will first install them and then load them into the R environment.\n\npacman::p_load(tidyverse, jsonlite, DataExplorer,\n               lubridate, ggplot2, tidygraph,\n               ggraph, igraph, sf, skimr) \n\n\n\n\nThe dataset for this exercise is available for download at the Vast Challenge 2024. As I undertake Mini-Challenge 2, I will utilize the dataset provided in the form of a JSON file named mc2.json.\nIn the code chunk below, fromJSON() of jsonlite package is used to import mc2.json file into R and save the output object.\n\nmc2_data &lt;- fromJSON(\"data/mc2.json\")\n\nThe output is called mc2_data. It is a large list R object."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-preparation",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "The code chunk below extracts the links dataframe from mc2_data and saves it as a tibble dataframe called mc2_edges. The distinct() function is used to remove duplicates.\n\n# Wrangling and tidying edges\nmc2_edges &lt;- as_tibble(mc2_data$links) %&gt;% \n  distinct()\n\nNext, glimpse() of dplyr package will be used to reveal the structure of mc2_edges tibble data table\n\nglimpse(mc2_edges)\n\nRows: 271,643\nColumns: 17\n$ type                &lt;chr&gt; \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                &lt;chr&gt; \"2035-09-16T04:06:48.185987\", \"2035-09-20T05:21:33…\n$ dwell               &lt;dbl&gt; 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   &lt;chr&gt; \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       &lt;chr&gt; \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` &lt;chr&gt; \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       &lt;chr&gt; \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        &lt;chr&gt; \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              &lt;chr&gt; \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              &lt;chr&gt; \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ data_author         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\n\n\n\n\n\n\nObservation\n\n\n\nFrom the table above, the following data issues can be identified:\n\nColumns with date and time data type are not in the correct format.\nThe column type also seems to contain three different types of information, namely: ‘Event’, ‘TransportEvent’, ‘TransponderPing’.\n\n\n\n\n\n\nIn the code chunk below, as_datetime() of lubridate package is used to convert fields with character date into POSIXt format.\n\nmc2_edges$time &lt;- as_datetime(mc2_edges$time)\nmc2_edges$\"date\" &lt;- as_datetime(\"mc2_edges$date\")\n\nNext, glimpse() will be used again to confirm if the process have been performed correctly.\n\nglimpse(mc2_edges)\n\nRows: 271,643\nColumns: 17\n$ type                &lt;chr&gt; \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                &lt;dttm&gt; 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               &lt;dbl&gt; 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   &lt;chr&gt; \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       &lt;chr&gt; \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` &lt;chr&gt; \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       &lt;chr&gt; \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        &lt;chr&gt; \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              &lt;chr&gt; \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              &lt;chr&gt; \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\n\n\n\n\n\n\nObservation\n\n\n\nAs we can see now, the time and date columns have been converted to datetime format.\n\n\n\n\n\n\nFrom the table above, we can see that the text in the type column is not tidy. I will tidy the type column by splitting it into three new separate columns called event1, event2, and event3. However, I will only keep the columns containing the values ‘TransportEvent’ and ‘TransponderPing’, which will be event2 and event3.\n\n\n\n\nword_list &lt;- strsplit(mc2_edges$type, \"\\\\.\")\n\n# The code chunk below will be used to find the maximum number of elements in any split\nmax_elements &lt;- max(lengths(word_list)) #to find the maximum number of elements in any split\n\n#The code chunk below will be used to pad shorter splits with NA values to make them all the same length.\nword_list_padded &lt;- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x)))) #to pad shorter splits with NA values to make them all the same length.\nword_df &lt;- do.call(rbind, word_list_padded)\ncolnames(word_df) &lt;- paste0(\"event\", 1:max_elements)\n\n# Since the output above is a matrix, the code chunk below is used to convert word_df into a tibble data.frame.\nword_df &lt;- as_tibble(word_df) %&gt;%\n  select(event2, event3)\n\n\n# The code chunk below appends the extracted columns back to mc2_edges tibble data.frame\nmc2_edges &lt;- mc2_edges %&gt;%\n  cbind(word_df)\n\nThis code splits the type column into multiple components, pads shorter entries with NAs, and integrates them back into the mc2_edges dataframe as new columns.\n\n\n\n\n\n\n\nObservation\n\n\n\nAs we can see here, two new columns, event2 and event3, have been created and appended to the mc2_edges dataframe.\n\n\n\n\n\n\nAfter cleaning and preparing the mc2_edges dataframe, I want to understand how the newly formed structure looks. Let’s make use of the DataExplorer package to visualize it.\nThe code below uses the plot_intro function, which is part of the DataExplorer package. This function provides a high-level summary of the mc2_edges dataframe, offering insights into its structure and content.\n\nThe plotThe code\n\n\n\n\n\n\n\n# Plot introduction of the data\nplot_intro(mc2_edges, title = \"Introduction of mc2_edges Data\")\n\n\n\n\nThe plot_str function below generates a plot that visualizes the structure of mc2_edges dataframe, showing the relationships between different columns and their types.\n\nThe plotThe code\n\n\n\n\n\n\n# Generate and display the data structure plot\nplot_str(mc2_edges)\n\n\n\n\nThe plot_missing function below generates a visualization that helps to identify and understand the distribution of missing values within mc2_edges dataframe.\n\nThe plotThe code\n\n\n\n\n\n\n# Plot missing values\nplot_missing(mc2_edges, title = \"Missing Values in mc2_edges Data\")\n\n\n\n\n\n\n\nAfter the initial EDA, I will remove columns from mc2_edges dataframe that are unnecessary to complete Mini-Challenge 2.\n\n\n\nmc2_edges_cleaned &lt;- mc2_edges %&gt;%\n  select(-c(`type`, `_last_edited_by`, `_date_added`, `_last_edited_date`, `_raw_source`, `_algorithm`, `key`,  `data_author`, `aphorism`, `holiday_greeting`, `wisdom`, `saying of the sea`))\n\nThe code above removes unnecessary columns from mc2_edges that are not needed for analysis, and then assigns the cleaned-up version to a new dataframe called mc2_edges_cleaned.\nNext, let’s use glimpse() to check what mc2_edges_cleaned looks like.\n\nglimpse(mc2_edges_cleaned)\n\nRows: 271,643\nColumns: 7\n$ time   &lt;dttm&gt; 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09-28 04:31:47,…\n$ dwell  &lt;dbl&gt; 115074.79, 412706.32, 286092.88, 327623.95, 243225.35, 109564.2…\n$ source &lt;chr&gt; \"City of Haacklee\", \"City of Haacklee\", \"City of Haacklee\", \"Ci…\n$ target &lt;chr&gt; \"perchplundererbc0\", \"perchplundererbc0\", \"perchplundererbc0\", …\n$ date   &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ event2 &lt;chr&gt; \"TransportEvent\", \"TransportEvent\", \"TransportEvent\", \"Transpor…\n$ event3 &lt;chr&gt; \"TransponderPing\", \"TransponderPing\", \"TransponderPing\", \"Trans…\n\n\nBefore moving to the next task, it would be wise to save the tidied mc2_edges_cleaned dataframe into a physical file for future use. By doing so, repeating the steps above will not be necessary.\nThe code chunk below will be used to save mc2_edges_cleaned into R rds file format.\n\n\n\n\n\n\nWarning\n\n\n\nSince the file will be saved in the rds sub-folder within the data folder, ensure that the rds folder exists. If it does not, it needs to be created first.\n\n\n\nwrite_rds(mc2_edges_cleaned, \"data/rds/mc2_edges_cleaned.rds\")\n\nThis completes the data preparation process for the links dataframe of mc2_data, which is now stored in the mc2_edges_cleaned dataframe and saved as a physical mc2_edges_cleaned.rds file.\nThe next step is to clean and prepare the nodes dataframe of mc2_data.\n\n\n\n\n\n\nThe code chunk below extracts the nodes dataframe from mc2_data, parses it as a tibble dataframe called mc2_nodes, and removes duplicate rows using the distinct() function.\n\nmc2_nodes &lt;- as_tibble(mc2_data$nodes) %&gt;%\n  distinct()\n\nNext, the code chunk below uses the glimpse() function to reveal the data structure of the mc2_nodes tibble dataframe.\n\nglimpse(mc2_nodes)\n\nRows: 5,637\nColumns: 20\n$ type                 &lt;chr&gt; \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    &lt;chr&gt; \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        &lt;chr&gt; \"2033-09-04T00:00:00\", \"2034-01-21T00:00:00\", \"20…\n$ `_last_edited_date`  &lt;chr&gt; \"2035-01-25T00:00:00\", \"2035-01-04T00:00:00\", \"20…\n$ `_raw_source`        &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 &lt;chr&gt; \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   &lt;chr&gt; \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n$ kind                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flag_country         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n\n\n\n\n\n\n\n\nObservation\n\n\n\nFrom the table above, the following data issues can be identified:\n\nThe column date data type is not in the correct format.\nThe values in Activities and fish_species_present fields are in list data type, which will affect the ability to process and to analyse the data.\nAs shown in the screenshot below, some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).\n\n\n\n\n\n\nIn the code chunk below, as_datetime() of lubridate package is used to convert date fields with character date into POSIXt format.\n\nmc2_nodes$date &lt;- as_datetime(mc2_nodes$date)\n\nNext, glimpse() will be used again to confirm if the process have been performed correctly.\n\nglimpse(mc2_nodes)\n\nRows: 5,637\nColumns: 20\n$ type                 &lt;chr&gt; \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    &lt;chr&gt; \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        &lt;chr&gt; \"2033-09-04T00:00:00\", \"2034-01-21T00:00:00\", \"20…\n$ `_last_edited_date`  &lt;chr&gt; \"2035-01-25T00:00:00\", \"2035-01-04T00:00:00\", \"20…\n$ `_raw_source`        &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 &lt;chr&gt; \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   &lt;chr&gt; \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n$ kind                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ flag_country         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, …\n\n\n\n\n\n\n\n\nObservation\n\n\n\nAs we can see now, the time and date columns have been converted to datetime format.\n\n\nThere are two more additional data issues can be observed. They are:\nThe values in Activities and fish_species_present columns are in list data type, which will affect the ability to process and to analyze the data.\nAs shown in the screenshot below, some values in the Activities and fish_species_presentcolumn are not ready to be analyze without further tidying (i.e. removing c(““)).\n\n\n\n\nIn the code chunk below, mutate() from dplyr and gsub() from Base R are used to perform the data tidying task.\nThis cleans up the Activities and fish_species_present columns by removing unnecessary characters.\n\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %&gt;% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %&gt;%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities)) \n\nmc2_nodes &lt;- mc2_nodes %&gt;%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %&gt;% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %&gt;%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n\nAfter executing the code chunk above, we can see from the screenshot below, that the text field in Activities and fish_species_present columns have been tidied.\n\n\n\n\n\nNow, let’s use the DataExplorer package again to visualize the mc2_nodes dataframe in a similar manner as was done above for the mc2_edges dataframe.\n\nThe plotThe code\n\n\n\n\n\n\n\n# Plot introduction of the data\nplot_intro(mc2_nodes, title = \"Introduction of mc2_nodes Data\")\n\n\n\n\nThe plot_str function below generates a plot that visualizes the structure of mc2_nodes dataframe, showing the relationships between different columns and their types.\n\nThe plotThe code\n\n\n\n\n\n\n# Generate and display the data structure plot\nplot_str(mc2_nodes)\n\n\n\n\nThe plot_missing function below generates a visualization that helps to identify and understand the distribution of missing values within mc2_nodes dataframe.\n\nThe plotThe code\n\n\n\n\n\n\n# Plot missing values\nplot_missing(mc2_nodes, title = \"Missing Values in mc2_nodes Data\")\n\n\n\n\n\n\n\nAfter the initial EDA, I will remove columns from mc2_nodes dataframe that are unnecessary to complete Mini-Challenge 2.\n\n\n\nmc2_nodes_cleaned &lt;- mc2_nodes %&gt;%\n  select(-c(`_last_edited_by`, `_date_added`, `_last_edited_date`, `_raw_source`, `_algorithm`, `style`))\n\nThe code above removes unnecessary columns from mc2_nodes that are not needed for analysis, and then assigns the cleaned-up version to a new dataframe called mc2_nodes_cleaned.\nNext, let’s use glimpse() to check what mc2_nodes_cleaned looks like.\n\nglimpse(mc2_nodes_cleaned)\n\nRows: 5,637\nColumns: 14\n$ type                 &lt;chr&gt; \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ name                 &lt;chr&gt; \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   &lt;chr&gt; \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           &lt;chr&gt; \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"…\n$ kind                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ flag_country         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present &lt;chr&gt; \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"…\n\n\nThe tidied mc2_nodes_cleaned dataframe will then be saved into a physical file for future use. By doing so, repeating the steps above will not be necessary.\nThe code chunk below will be used to save mc2_nodes_cleaned into R rds file format.\n\nwrite_rds(mc2_nodes_cleaned, \"data/rds/mc2_nodes_cleaned.rds\")\n\nThis completes the data preparation process for the nodes dataframe of mc2_data, which is now stored in the mc2_nodes_cleaned dataframe and saved as a physical mc2_nodes_cleaned.rds file.\nThe next step is to\nLet’s investigate further on what is in the type column from mc2_nodes_cleaned dataframe.\n\nunique(mc2_nodes_cleaned$type)\n\n [1] \"Entity.Commodity.Fish\"          \"Entity.Location.City\"          \n [3] \"Entity.Document.DeliveryReport\" \"Entity.Vessel.FishingVessel\"   \n [5] \"Entity.Vessel.Other\"            \"Entity.Vessel.Ferry.Passenger\" \n [7] \"Entity.Vessel.CargoVessel\"      \"Entity.Vessel.Ferry.Cargo\"     \n [9] \"Entity.Vessel.Research\"         \"Entity.Vessel.Tour\"            \n[11] \"Entity.Location.Point\"          \"Entity.Location.Region\"        \n\n\n\nvessel_type_counts &lt;- mc2_nodes_cleaned %&gt;%\n  group_by(type) %&gt;%\n  summarise(count = n())\n\n# Display the result\nprint(vessel_type_counts)\n\n# A tibble: 12 × 2\n   type                           count\n   &lt;chr&gt;                          &lt;int&gt;\n 1 Entity.Commodity.Fish             10\n 2 Entity.Document.DeliveryReport  5307\n 3 Entity.Location.City               6\n 4 Entity.Location.Point             12\n 5 Entity.Location.Region             6\n 6 Entity.Vessel.CargoVessel        100\n 7 Entity.Vessel.Ferry.Cargo          2\n 8 Entity.Vessel.Ferry.Passenger      3\n 9 Entity.Vessel.FishingVessel      178\n10 Entity.Vessel.Other                5\n11 Entity.Vessel.Research             2\n12 Entity.Vessel.Tour                 6\n\n\nThis particular column contains variety of different data, some of them seems interesting and useful for analysis, they are:\n\nEntity.Commodity.Fish\nEntity.Document.DeliveryReport\nEntity.Location.City\nEntity.Location.Point\nEntity.Location.Region\nEntity.Vessel.CargoVessel\nEntity.Vessel.FishingVessel\n\nThe others seems unnecessary.\nI will try to make separate dataframe for each of them.\nHere I can see the type of vessel and how many of each are recorded in the dataframe.\nI’m only interested in the fishing vessel and the cargo vessel, and apparently there 178 fishing vessels and 100 cargo vessels, next so I will try to filter all the rows that only contain fishing vessels and cargo vessels\nFilter all the rows containing fishing_vessel\n\n# Filter fishing vessels and rename specific columns while keeping all others\nfishing_vessel &lt;- mc2_nodes_cleaned %&gt;%\n  filter(type %in% c(\"Entity.Vessel.FishingVessel\")) %&gt;%\n  rename(\n    vessel_type = type,\n    fishing_vessel_id = id,\n    fishing_vessel_name = Name\n  )\n\nNow I want to find out all the companies that own these fishing vessels\n\nunique(fishing_vessel$company)\n\n [1] \"Roth, Logan and Moreno\"                   \n [2] \"Brown-Haas\"                               \n [3] \"Smith, Davis and Acosta\"                  \n [4] \"Cisneros-Meyer\"                           \n [5] \"FlounderLeska Marine BV\"                  \n [6] \"House Group\"                              \n [7] \"Weaver-Baker\"                             \n [8] \"Stewart, Perkins and Sanchez\"             \n [9] \"ScaniaSeafood Holdings Ltd. Liability Co\" \n[10] \"Mccormick Group\"                          \n[11] \"Parks Ltd\"                                \n[12] \"Taylor-Sawyer\"                            \n[13] \"Nielsen, Valentine and Bell\"              \n[14] \"Jacobson Inc\"                             \n[15] \"Ballard-Bailey\"                           \n[16] \"Steele PLC\"                               \n[17] \"WestRiver Shipping KgaA\"                  \n[18] \"Robinson, Mcmillan and Watson\"            \n[19] \"Lowery-Myers\"                             \n[20] \"Dyer-Campbell\"                            \n[21] \"Adkins LLC\"                               \n[22] \"BaringoAmerica Marine Ges.m.b.H.\"         \n[23] \"Terry, Smith and Lyons\"                   \n[24] \"Schmidt Ltd\"                              \n[25] \"Ritter Ltd\"                               \n[26] \"Decker PLC\"                               \n[27] \"Faulkner, Shaffer and Moyer\"              \n[28] \"Brown-Allen\"                              \n[29] \"Bell, Reynolds and Forbes\"                \n[30] \"French Ltd\"                               \n[31] \"Rivera Group\"                             \n[32] \"Bowers Group\"                             \n[33] \"MonarchCreek Shipping S.p.A.\"             \n[34] \"Mendez-Tyler\"                             \n[35] \"Mooney, Stevenson and Miller\"             \n[36] \"Garcia-Wallace\"                           \n[37] \"Cox-Mason\"                                \n[38] \"Garcia-Sanchez\"                           \n[39] \"Sutton PLC\"                               \n[40] \"Rasmussen, Nelson and King\"               \n[41] \"Brown, Clarke and Martinez\"               \n[42] \"Gomez-Mccormick\"                          \n[43] \"Solis-Lopez\"                              \n[44] \"SouthSeafood Express Corp\"                \n[45] \"Clark, Hall and Cole\"                     \n[46] \"Cox-Donovan\"                              \n[47] \"Solis PLC\"                                \n[48] \"Newton-Meyer\"                             \n[49] \"Mcpherson-Wright\"                         \n[50] \"Cordova, Ritter and Flores\"               \n[51] \"Miller, Smith and Reed\"                   \n[52] \"Barnes and Sons\"                          \n[53] \"Bennett, Jones and Miller\"                \n[54] \"Mercado, French and Graham\"               \n[55] \"Brewer-Massey\"                            \n[56] \"Norman LLC\"                               \n[57] \"Wiley LLC\"                                \n[58] \"Davis, Harris and West\"                   \n[59] \"Goodman LLC\"                              \n[60] \"Reid, Thomas and Gill\"                    \n[61] \"Henry-Alvarez\"                            \n[62] \"Lane Group\"                               \n[63] \"Smith, Collins and Johnson\"               \n[64] \"Franco, Olson and Long\"                   \n[65] \"Dry CreekWorldLogistics Ltd. Liability Co\"\n[66] \"Rodriguez, Henry and Woodard\"             \n[67] \"Thompson-Padilla\"                         \n[68] \"Carter, Mcdonald and Miller\"              \n[69] \"Williams, Horn and Morales\"               \n[70] \"Callahan-Green\"                           \n[71] \"Green, Vincent and Thompson\"              \n[72] \"Lake Malawi  Corp United\"                 \n[73] \"Wolf and Sons\"                            \n[74] \"Hernandez Group\"                          \n[75] \"Horne Group\"                              \n[76] \"Fischer, Graham and Robinson\"             \n[77] \"Chavez and Sons\"                          \n[78] \"Maacama Ocean Worldwide LLC\"              \n[79] \"Jordan and Sons\"                          \n[80] \"Martin-Case\"                              \n[81] \"Murphy and Sons\"                          \n[82] \"Collins, Johnson and Lloyd\"               \n[83] \"Sparmans Marine Carriers Oyj\"             \n[84] \"Mullins-Carrillo\"                         \n[85] \"Riley Inc\"                                \n[86] \"NortheastSeafood Carriers Ltd\"            \n[87] \"Chambers, Hall and Walker\"                \n[88] \"Osborne and Sons\"                         \n[89] \"Conley, Benton and Miller\"                \n[90] \"Saltwater Sisters Company Marine\"         \n[91] \"Costa de Oro Enterprises\"                 \n[92] \"Bailey-Mccullough\"                        \n[93] \"Chase, Long and Anderson\"                 \n[94] \"Vasquez-Gonzalez\"                         \n[95] \"Harper and Sons\"                          \n[96] \"Tainamarine Fishing Co\"                   \n[97] \"Mcdonald-Jones\"                           \n[98] \"George-Brown\"                             \n[99] \"SamakaDredgeTransport OJSC\"               \n\n\nFrom the result above I see “SouthSeafood Express Corp” is listed, now I want to isolate all the fishing vessels belong to “SouthSeafood Express Corp”.\n\n# Filter fishing vessels owned by \"SouthSeafood Express Corp\"\nsouthseafood_fishing_vessels &lt;- fishing_vessel %&gt;%\n  filter(company == \"SouthSeafood Express Corp\")\nprint(southseafood_fishing_vessels)\n\n# A tibble: 2 × 14\n  vessel_type name  fishing_vessel_id fishing_vessel_name Description Activities\n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;               &lt;chr&gt;       &lt;chr&gt;     \n1 Entity.Ves… &lt;NA&gt;  snappersnatcher7… Snapper Snatcher    &lt;NA&gt;        NULL      \n2 Entity.Ves… &lt;NA&gt;  roachrobberdb6    Roach Robber        &lt;NA&gt;        NULL      \n# ℹ 8 more variables: kind &lt;chr&gt;, qty_tons &lt;dbl&gt;, date &lt;dttm&gt;,\n#   flag_country &lt;chr&gt;, company &lt;chr&gt;, tonnage &lt;int&gt;, length_overall &lt;int&gt;,\n#   fish_species_present &lt;chr&gt;\n\n\nSo the vessels belong to “SouthSeafood Express Corp” are\n\nSnapper Snatcher (snappersnatcher7be)\nRoach Robber (roachrobberdb6)\n\nAfter identifying the name of the fishing vessels belong to “SouthSeafood Express Corp”, I need to check whether this information is also contained in the mc2_edges_cleaned dataframe.\n\n# Check if specific values are in the source column\nvalues_exist &lt;- c(\"snappersnatcher7be\", \"roachrobberdb6\") %in% mc2_edges_cleaned$source\n\n# Print results\nprint(values_exist)\n\n[1] TRUE TRUE\n\n\nThe output [1] TRUE TRUE indicates that both identifiers “snappersnatcher7be” and “roachrobberdb6” are present in the source column of mc2_edges_cleaned dataframe.\nThe next steps will involve deeper analysis and visualization to understand the activities and patterns associated with these vessels.\n\n# Extract relevant data for the specified vessels\nsouthseafood_activities &lt;- mc2_edges_cleaned %&gt;%\n  filter(source %in% c(\"snappersnatcher7be\", \"roachrobberdb6\")) \n\n\nglimpse(southseafood_activities)\n\nRows: 15\nColumns: 7\n$ time   &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA\n$ dwell  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA\n$ source &lt;chr&gt; \"snappersnatcher7be\", \"snappersnatcher7be\", \"snappersnatcher7b…\n$ target &lt;chr&gt; \"City of Lomark\", \"City of Lomark\", \"City of Paackland\", \"City …\n$ date   &lt;dttm&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA\n$ event2 &lt;chr&gt; \"HarborReport\", \"HarborReport\", \"HarborReport\", \"HarborReport\",…\n$ event3 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA\n\n\n\nharbor_report &lt;- mc2_edges_cleaned %&gt;%\n  filter(event2 == \"HarborReport\")\n\n\nunique(mc2_edges_cleaned$source)\n\n   [1] \"City of Haacklee\"              \"City of Lomark\"               \n   [3] \"City of Himark\"                \"City of Paackland\"            \n   [5] \"City of South Paackland\"       \"cargo_2035_2394778c\"          \n   [7] \"cargo_2035_23956ba0\"           \"cargo_2035_23957cfd\"          \n   [9] \"cargo_2035_23958501\"           \"cargo_2035_23959ab6\"          \n  [11] \"cargo_2035_23960fa9\"           \"cargo_2035_23961648\"          \n  [13] \"cargo_2035_23962f3c\"           \"cargo_2035_2396328a\"          \n  [15] \"cargo_2035_23964f68\"           \"cargo_2035_23965a72\"          \n  [17] \"cargo_2035_23966ec6\"           \"cargo_2035_239679db\"          \n  [19] \"cargo_2035_239687f3\"           \"cargo_2035_23969037\"          \n  [21] \"cargo_2035_239703bb\"           \"cargo_2035_239710af\"          \n  [23] \"cargo_2035_239726c0\"           \"cargo_2035_23973732\"          \n  [25] \"cargo_2035_23974ca6\"           \"cargo_2035_23975884\"          \n  [27] \"cargo_2035_23976a08\"           \"cargo_2035_23977a6d\"          \n  [29] \"cargo_2035_23978abd\"           \"cargo_2035_23979493\"          \n  [31] \"cargo_2035_23980ddb\"           \"cargo_2035_23981254\"          \n  [33] \"cargo_2035_23982236\"           \"cargo_2035_239830f2\"          \n  [35] \"cargo_2035_23984c4a\"           \"cargo_2035_23985513\"          \n  [37] \"cargo_2035_23986aa0\"           \"cargo_2035_239889c5\"          \n  [39] \"cargo_2035_2398914c\"           \"cargo_2035_23990788\"          \n  [41] \"cargo_2035_23991fa7\"           \"cargo_2035_23992af5\"          \n  [43] \"cargo_2035_23993070\"           \"cargo_2035_23994469\"          \n  [45] \"cargo_2035_23995a34\"           \"cargo_2035_2399679d\"          \n  [47] \"cargo_2035_23997fac\"           \"cargo_2035_239998e2\"          \n  [49] \"cargo_2035_240006a5\"           \"cargo_2035_24001fb5\"          \n  [51] \"cargo_2035_24002b8d\"           \"cargo_2035_24003bb0\"          \n  [53] \"cargo_2035_24004231\"           \"cargo_2035_24005055\"          \n  [55] \"cargo_2035_24014a5e\"           \"cargo_2035_240152cb\"          \n  [57] \"cargo_2035_24016013\"           \"cargo_2035_240176e7\"          \n  [59] \"cargo_2035_24018829\"           \"cargo_2035_24019ac2\"          \n  [61] \"cargo_2035_240203ce\"           \"cargo_2035_240219d6\"          \n  [63] \"cargo_2035_24024728\"           \"cargo_2035_24029512\"          \n  [65] \"cargo_2035_24030096\"           \"cargo_2035_24031644\"          \n  [67] \"cargo_2035_240329d3\"           \"cargo_2035_24033f5a\"          \n  [69] \"cargo_2035_2403401c\"           \"cargo_2035_24035d6f\"          \n  [71] \"cargo_2035_24036bf2\"           \"cargo_2035_24040d7f\"          \n  [73] \"cargo_2035_240412f8\"           \"cargo_2035_2404289d\"          \n  [75] \"cargo_2035_24043519\"           \"cargo_2035_24044e53\"          \n  [77] \"cargo_2035_24045644\"           \"cargo_2035_2404657f\"          \n  [79] \"cargo_2035_24047415\"           \"cargo_2035_24048be0\"          \n  [81] \"cargo_2035_240491d9\"           \"cargo_2035_240505aa\"          \n  [83] \"cargo_2035_2405123d\"           \"cargo_2035_24052438\"          \n  [85] \"cargo_2035_24056bb2\"           \"cargo_2035_240579f7\"          \n  [87] \"cargo_2035_24058afe\"           \"cargo_2035_24059eec\"          \n  [89] \"cargo_2035_2406078b\"           \"cargo_2035_24061755\"          \n  [91] \"cargo_2035_2406298f\"           \"cargo_2035_2406345e\"          \n  [93] \"cargo_2035_240648fe\"           \"cargo_2035_24065ce6\"          \n  [95] \"cargo_2035_2406617c\"           \"cargo_2035_2406737e\"          \n  [97] \"cargo_2035_24078cf5\"           \"cargo_2035_24079d3d\"          \n  [99] \"cargo_2035_24082aed\"           \"cargo_2035_2408320d\"          \n [101] \"cargo_2035_240849ef\"           \"cargo_2035_2408538f\"          \n [103] \"cargo_2035_24086289\"           \"cargo_2035_24087a28\"          \n [105] \"cargo_2035_240887f6\"           \"cargo_2035_24089e1f\"          \n [107] \"cargo_2035_24090dbb\"           \"cargo_2035_24092ad2\"          \n [109] \"cargo_2035_240932fa\"           \"cargo_2035_24094ab9\"          \n [111] \"cargo_2035_24095b13\"           \"cargo_2035_24096e9c\"          \n [113] \"cargo_2035_24097aa8\"           \"cargo_2035_24098e61\"          \n [115] \"cargo_2035_24099b6f\"           \"cargo_2035_241000fc\"          \n [117] \"cargo_2035_24101869\"           \"cargo_2035_24103c21\"          \n [119] \"cargo_2035_241048fe\"           \"cargo_2035_24105eab\"          \n [121] \"cargo_2035_24106abd\"           \"cargo_2035_24107a93\"          \n [123] \"cargo_2035_24108b6f\"           \"cargo_2035_24110241\"          \n [125] \"cargo_2035_2411145a\"           \"cargo_2035_24112c1c\"          \n [127] \"cargo_2035_241140b0\"           \"cargo_2035_241214f4\"          \n [129] \"cargo_2035_24122981\"           \"cargo_2035_24123306\"          \n [131] \"cargo_2035_24125596\"           \"cargo_2035_241269e5\"          \n [133] \"cargo_2035_24127d30\"           \"cargo_2035_241280ea\"          \n [135] \"cargo_2035_2412976e\"           \"cargo_2035_24130899\"          \n [137] \"cargo_2035_24131cae\"           \"cargo_2035_24132a6a\"          \n [139] \"cargo_2035_24133ef7\"           \"cargo_2035_241344ef\"          \n [141] \"cargo_2035_24136513\"           \"cargo_2035_24143c1c\"          \n [143] \"cargo_2035_24146b8e\"           \"cargo_2035_24147edc\"          \n [145] \"cargo_2035_24149f6f\"           \"cargo_2035_24150215\"          \n [147] \"cargo_2035_241511c0\"           \"cargo_2035_2415252a\"          \n [149] \"cargo_2035_24153944\"           \"cargo_2035_2415421a\"          \n [151] \"cargo_2035_24155978\"           \"cargo_2035_241565dd\"          \n [153] \"cargo_2035_24157265\"           \"cargo_2035_241637d4\"          \n [155] \"cargo_2035_24168c56\"           \"cargo_2035_241693b6\"          \n [157] \"cargo_2035_24170a8e\"           \"cargo_2035_2417132a\"          \n [159] \"cargo_2035_241723f6\"           \"cargo_2035_24173837\"          \n [161] \"cargo_2035_241740cd\"           \"cargo_2035_24175b01\"          \n [163] \"cargo_2035_2417651e\"           \"cargo_2035_24177b78\"          \n [165] \"cargo_2035_24178a77\"           \"cargo_2035_24179925\"          \n [167] \"cargo_2035_24180e71\"           \"cargo_2035_241810e3\"          \n [169] \"cargo_2035_24182ef5\"           \"cargo_2035_24183f03\"          \n [171] \"cargo_2035_241844a4\"           \"cargo_2035_2418652e\"          \n [173] \"cargo_2035_24187721\"           \"cargo_2035_2418866f\"          \n [175] \"cargo_2035_24189cae\"           \"cargo_2035_24190e85\"          \n [177] \"cargo_2035_24191f4b\"           \"cargo_2035_241927a4\"          \n [179] \"cargo_2035_241938f4\"           \"cargo_2035_2419446e\"          \n [181] \"cargo_2035_24195202\"           \"cargo_2035_241976c3\"          \n [183] \"cargo_2035_241980ef\"           \"cargo_2035_24199833\"          \n [185] \"cargo_2035_242006b2\"           \"cargo_2035_242017e9\"          \n [187] \"cargo_2035_24202ea3\"           \"cargo_2035_24203172\"          \n [189] \"cargo_2035_24204b16\"           \"cargo_2035_24205ad5\"          \n [191] \"cargo_2035_24212926\"           \"cargo_2035_242146f7\"          \n [193] \"cargo_2035_242156fa\"           \"cargo_2035_24216888\"          \n [195] \"cargo_2035_24217795\"           \"cargo_2035_24218339\"          \n [197] \"cargo_2035_24219a45\"           \"cargo_2035_2422106f\"          \n [199] \"cargo_2035_24222070\"           \"cargo_2035_24223357\"          \n [201] \"cargo_2035_24225592\"           \"cargo_2035_242266ae\"          \n [203] \"cargo_2035_242287eb\"           \"cargo_2035_2423012c\"          \n [205] \"cargo_2035_24246b56\"           \"cargo_2035_24247763\"          \n [207] \"cargo_2035_24248ede\"           \"cargo_2035_242494c7\"          \n [209] \"cargo_2035_24251270\"           \"cargo_2035_2425272d\"          \n [211] \"cargo_2035_24253dc1\"           \"cargo_2035_2425453a\"          \n [213] \"cargo_2035_242556a3\"           \"cargo_2035_24256d41\"          \n [215] \"cargo_2035_2425718e\"           \"cargo_2035_242660d7\"          \n [217] \"cargo_2035_24267775\"           \"cargo_2035_2426886d\"          \n [219] \"cargo_2035_2426962e\"           \"cargo_2035_242701bc\"          \n [221] \"cargo_2035_242718b8\"           \"cargo_2035_24272b98\"          \n [223] \"cargo_2035_24273e66\"           \"cargo_2035_24274378\"          \n [225] \"cargo_2035_24275b2c\"           \"cargo_2035_24277072\"          \n [227] \"cargo_2035_24278f4c\"           \"cargo_2035_24279b99\"          \n [229] \"cargo_2035_24280a49\"           \"cargo_2035_242819ae\"          \n [231] \"cargo_2035_242827ef\"           \"cargo_2035_24283ebe\"          \n [233] \"cargo_2035_24284e13\"           \"cargo_2035_24285664\"          \n [235] \"cargo_2035_24286830\"           \"cargo_2035_24288930\"          \n [237] \"cargo_2035_24289d1d\"           \"cargo_2035_24290db0\"          \n [239] \"cargo_2035_24291ac7\"           \"cargo_2035_24298085\"          \n [241] \"cargo_2035_2429901f\"           \"cargo_2035_243088f4\"          \n [243] \"cargo_2035_24309db6\"           \"cargo_2035_2431048a\"          \n [245] \"cargo_2035_2431298a\"           \"cargo_2035_24313467\"          \n [247] \"cargo_2035_2431415f\"           \"cargo_2035_24318ce9\"          \n [249] \"cargo_2035_243198c9\"           \"cargo_2035_24320406\"          \n [251] \"cargo_2035_24321f11\"           \"cargo_2035_243226d5\"          \n [253] \"cargo_2035_2432331f\"           \"cargo_2035_24324010\"          \n [255] \"cargo_2035_24325a30\"           \"cargo_2035_24326871\"          \n [257] \"cargo_2035_243278e6\"           \"cargo_2035_2432850c\"          \n [259] \"cargo_2035_24329475\"           \"cargo_2035_24330402\"          \n [261] \"cargo_2035_243318e8\"           \"cargo_2035_243329ea\"          \n [263] \"cargo_2035_243358b3\"           \"cargo_2035_24336d35\"          \n [265] \"cargo_2035_24337a4d\"           \"cargo_2035_24338ac1\"          \n [267] \"cargo_2035_24339294\"           \"cargo_2035_24340e90\"          \n [269] \"cargo_2035_24341472\"           \"cargo_2035_24342cb7\"          \n [271] \"cargo_2035_243432bf\"           \"cargo_2035_243447ce\"          \n [273] \"cargo_2035_2434605b\"           \"cargo_2035_24347ad9\"          \n [275] \"cargo_2035_24348b57\"           \"cargo_2035_24349008\"          \n [277] \"cargo_2035_24350bad\"           \"cargo_2035_243514c8\"          \n [279] \"cargo_2035_2435287b\"           \"cargo_2035_243538de\"          \n [281] \"cargo_2035_243543d4\"           \"cargo_2035_2435598d\"          \n [283] \"cargo_2035_24357c60\"           \"cargo_2035_2435809d\"          \n [285] \"cargo_2035_2435997d\"           \"cargo_2035_24360628\"          \n [287] \"cargo_2035_2436144d\"           \"cargo_2035_243623c9\"          \n [289] \"cargo_2035_2436308a\"           \"cargo_2035_2436427e\"          \n [291] \"cargo_2035_24365501\"           \"cargo_2035_2436666a\"          \n [293] \"cargo_2035_2436859a\"           \"cargo_2035_24369c26\"          \n [295] \"cargo_2035_24370c3b\"           \"cargo_2035_24371185\"          \n [297] \"cargo_2035_2437257d\"           \"cargo_2035_24373741\"          \n [299] \"cargo_2035_243742d4\"           \"cargo_2035_2437580d\"          \n [301] \"cargo_2035_24376512\"           \"cargo_2035_2437731d\"          \n [303] \"cargo_2035_2437902a\"           \"cargo_2035_2438071f\"          \n [305] \"cargo_2035_24381760\"           \"cargo_2035_24382a3b\"          \n [307] \"cargo_2035_24383a57\"           \"cargo_2035_24384bd8\"          \n [309] \"cargo_2035_24385568\"           \"cargo_2035_24386404\"          \n [311] \"cargo_2035_24387006\"           \"cargo_2035_243885e7\"          \n [313] \"cargo_2035_243903ab\"           \"cargo_2035_24391e74\"          \n [315] \"cargo_2035_243928ee\"           \"cargo_2035_243938c2\"          \n [317] \"cargo_2035_24394a30\"           \"cargo_2035_24395939\"          \n [319] \"cargo_2035_2439600e\"           \"cargo_2035_24397c61\"          \n [321] \"cargo_2035_24398db8\"           \"cargo_2035_2439912f\"          \n [323] \"cargo_2035_244035bc\"           \"cargo_2035_2441371f\"          \n [325] \"cargo_2035_24414181\"           \"cargo_2035_24416295\"          \n [327] \"cargo_2035_24417fcb\"           \"cargo_2035_24418bbc\"          \n [329] \"cargo_2035_24419c31\"           \"cargo_2035_24420b4e\"          \n [331] \"cargo_2035_244210fb\"           \"cargo_2035_24430044\"          \n [333] \"cargo_2035_244396bc\"           \"cargo_2035_244400eb\"          \n [335] \"cargo_2035_244412f7\"           \"cargo_2035_2444256d\"          \n [337] \"cargo_2035_24443600\"           \"cargo_2035_24444001\"          \n [339] \"cargo_2035_24445936\"           \"cargo_2035_24446788\"          \n [341] \"cargo_2035_24447a02\"           \"cargo_2035_24448c2a\"          \n [343] \"cargo_2035_24449d57\"           \"cargo_2035_2445006b\"          \n [345] \"cargo_2035_2445184b\"           \"cargo_2035_24452374\"          \n [347] \"cargo_2035_24453e2d\"           \"cargo_2035_24454b6c\"          \n [349] \"cargo_2035_244558d2\"           \"cargo_2035_24456004\"          \n [351] \"cargo_2035_2445723e\"           \"cargo_2035_244583af\"          \n [353] \"cargo_2035_24459fc5\"           \"cargo_2035_2446072f\"          \n [355] \"cargo_2035_244611c8\"           \"cargo_2035_24462dc8\"          \n [357] \"cargo_2035_244652fe\"           \"cargo_2035_244669e8\"          \n [359] \"cargo_2035_24467c13\"           \"cargo_2035_24468105\"          \n [361] \"cargo_2035_24470784\"           \"cargo_2035_24471037\"          \n [363] \"cargo_2035_24472a84\"           \"cargo_2035_24473ffc\"          \n [365] \"cargo_2035_24476151\"           \"cargo_2035_24477419\"          \n [367] \"cargo_2035_244780a7\"           \"cargo_2035_24479ac7\"          \n [369] \"cargo_2035_24480aaf\"           \"cargo_2035_24489cfc\"          \n [371] \"cargo_2035_24490319\"           \"cargo_2035_244912ef\"          \n [373] \"cargo_2035_24492b79\"           \"cargo_2035_24493cb3\"          \n [375] \"cargo_2035_24494587\"           \"cargo_2035_24495f43\"          \n [377] \"cargo_2035_2449627a\"           \"cargo_2035_24497c26\"          \n [379] \"cargo_2035_24498d9d\"           \"cargo_2035_245009bf\"          \n [381] \"cargo_2035_24501b24\"           \"cargo_2035_24502114\"          \n [383] \"cargo_2035_24503d0b\"           \"cargo_2035_24504749\"          \n [385] \"cargo_2035_24505cca\"           \"cargo_2035_24515c89\"          \n [387] \"cargo_2035_24516a72\"           \"cargo_2035_24517490\"          \n [389] \"cargo_2035_24518b54\"           \"cargo_2035_24519a64\"          \n [391] \"cargo_2035_24520425\"           \"cargo_2035_245216c6\"          \n [393] \"cargo_2035_245225f9\"           \"cargo_2035_2452397d\"          \n [395] \"cargo_2035_24532325\"           \"cargo_2035_24533e9d\"          \n [397] \"cargo_2035_24534089\"           \"cargo_2035_24535535\"          \n [399] \"cargo_2035_24536591\"           \"cargo_2035_2453789c\"          \n [401] \"cargo_2035_2453848f\"           \"cargo_2035_24539e5a\"          \n [403] \"cargo_2035_2454042a\"           \"cargo_2035_245417aa\"          \n [405] \"cargo_2035_245426d1\"           \"cargo_2035_245433f5\"          \n [407] \"cargo_2035_24544d1b\"           \"cargo_2035_2454550a\"          \n [409] \"cargo_2035_2454600f\"           \"cargo_2035_24547cba\"          \n [411] \"cargo_2035_24548c4d\"           \"cargo_2035_24549aa1\"          \n [413] \"cargo_2035_2455085d\"           \"cargo_2035_24551570\"          \n [415] \"cargo_2035_24552e52\"           \"cargo_2035_24553cf4\"          \n [417] \"cargo_2035_24554063\"           \"cargo_2035_24555461\"          \n [419] \"cargo_2035_24556d68\"           \"cargo_2035_245573bc\"          \n [421] \"cargo_2035_24558974\"           \"cargo_2035_24559baf\"          \n [423] \"cargo_2035_24560bf0\"           \"cargo_2035_24561379\"          \n [425] \"cargo_2035_24562b52\"           \"cargo_2035_245637e4\"          \n [427] \"cargo_2035_245648fc\"           \"cargo_2035_24565818\"          \n [429] \"cargo_2035_245664b5\"           \"cargo_2035_2456752e\"          \n [431] \"cargo_2035_24568664\"           \"cargo_2035_24569c9b\"          \n [433] \"cargo_2035_24570183\"           \"cargo_2035_245710da\"          \n [435] \"cargo_2035_24572793\"           \"cargo_2035_24573973\"          \n [437] \"cargo_2035_24574eb5\"           \"cargo_2035_24575266\"          \n [439] \"cargo_2035_24576d01\"           \"cargo_2035_2457777f\"          \n [441] \"cargo_2035_24578ae0\"           \"cargo_2035_24579158\"          \n [443] \"cargo_2035_24580b1b\"           \"cargo_2035_24581970\"          \n [445] \"cargo_2035_24582d92\"           \"cargo_2035_24583736\"          \n [447] \"cargo_2035_24584c4b\"           \"cargo_2035_24585d02\"          \n [449] \"cargo_2035_24586366\"           \"cargo_2035_24587d08\"          \n [451] \"cargo_2035_24588b67\"           \"cargo_2035_245891bd\"          \n [453] \"cargo_2035_24590b3e\"           \"cargo_2035_24591b8d\"          \n [455] \"cargo_2035_245923da\"           \"cargo_2035_24593a0e\"          \n [457] \"cargo_2035_24594dc3\"           \"cargo_2035_24595b88\"          \n [459] \"cargo_2035_24596fc0\"           \"cargo_2035_2459771f\"          \n [461] \"cargo_2035_24598596\"           \"cargo_2035_24599c63\"          \n [463] \"cargo_2035_24600e8d\"           \"cargo_2035_2460180d\"          \n [465] \"cargo_2035_24602cbb\"           \"cargo_2035_246033c6\"          \n [467] \"cargo_2035_24604736\"           \"cargo_2035_2460534f\"          \n [469] \"cargo_2035_24606dc8\"           \"cargo_2035_24607886\"          \n [471] \"cargo_2035_246086ea\"           \"cargo_2035_246093f8\"          \n [473] \"cargo_2035_24610616\"           \"cargo_2035_246118a8\"          \n [475] \"cargo_2035_24612a55\"           \"cargo_2035_24613ae8\"          \n [477] \"cargo_2035_24614314\"           \"cargo_2035_246159a6\"          \n [479] \"cargo_2035_24620571\"           \"cargo_2035_24629e1c\"          \n [481] \"cargo_2035_24630ccf\"           \"cargo_2035_24631851\"          \n [483] \"cargo_2035_2463308e\"           \"cargo_2035_2463474f\"          \n [485] \"cargo_2035_2463514c\"           \"cargo_2035_24636403\"          \n [487] \"cargo_2035_24638362\"           \"cargo_2035_24639048\"          \n [489] \"cargo_2035_2464089a\"           \"cargo_2035_24641f89\"          \n [491] \"cargo_2035_24642cab\"           \"cargo_2035_246430d5\"          \n [493] \"cargo_2035_2464435d\"           \"cargo_2035_24645417\"          \n [495] \"cargo_2035_2464627f\"           \"cargo_2035_246470f6\"          \n [497] \"cargo_2035_24649458\"           \"cargo_2035_24650f4f\"          \n [499] \"cargo_2035_246513cf\"           \"cargo_2035_2465232e\"          \n [501] \"cargo_2035_24653e4e\"           \"cargo_2035_24654e34\"          \n [503] \"cargo_2035_24655751\"           \"cargo_2035_246562f8\"          \n [505] \"cargo_2035_24657e60\"           \"cargo_2035_24658c64\"          \n [507] \"cargo_2035_246609f6\"           \"cargo_2035_24667c13\"          \n [509] \"cargo_2035_246683e6\"           \"cargo_2035_246699cd\"          \n [511] \"cargo_2035_246700d7\"           \"cargo_2035_24671903\"          \n [513] \"cargo_2035_2467357f\"           \"cargo_2035_24674476\"          \n [515] \"cargo_2035_24675cfc\"           \"cargo_2035_2467601d\"          \n [517] \"cargo_2035_2467862b\"           \"cargo_2035_246792d0\"          \n [519] \"cargo_2035_24680a0b\"           \"cargo_2035_24681817\"          \n [521] \"cargo_2035_24682b36\"           \"cargo_2035_246833c0\"          \n [523] \"cargo_2035_24684e93\"           \"cargo_2035_24685fde\"          \n [525] \"cargo_2035_24686d17\"           \"cargo_2035_246874e7\"          \n [527] \"cargo_2035_24689667\"           \"cargo_2035_2469025b\"          \n [529] \"cargo_2035_24691107\"           \"cargo_2035_246922a6\"          \n [531] \"cargo_2035_2469383e\"           \"cargo_2035_246940bd\"          \n [533] \"cargo_2035_24695513\"           \"cargo_2035_246967f6\"          \n [535] \"cargo_2035_24703cd9\"           \"cargo_2035_247048ed\"          \n [537] \"cargo_2035_24705a40\"           \"cargo_2035_247064df\"          \n [539] \"cargo_2035_24707a15\"           \"cargo_2035_24708cbd\"          \n [541] \"cargo_2035_24709b09\"           \"cargo_2035_247100fa\"          \n [543] \"cargo_2035_24711d72\"           \"cargo_2035_24712cac\"          \n [545] \"cargo_2035_24713cb6\"           \"cargo_2035_24714139\"          \n [547] \"cargo_2035_24715bf7\"           \"cargo_2035_247160ea\"          \n [549] \"cargo_2035_24717b08\"           \"cargo_2035_24718653\"          \n [551] \"cargo_2035_247199e7\"           \"cargo_2035_24720d71\"          \n [553] \"cargo_2035_24721efa\"           \"cargo_2035_24722bbd\"          \n [555] \"cargo_2035_24723498\"           \"cargo_2035_247240bc\"          \n [557] \"cargo_2035_24725994\"           \"cargo_2035_24726882\"          \n [559] \"cargo_2035_24727bec\"           \"cargo_2035_247286ec\"          \n [561] \"cargo_2035_24729dff\"           \"cargo_2035_24730213\"          \n [563] \"cargo_2035_24731a1b\"           \"cargo_2035_24736c95\"          \n [565] \"cargo_2035_2474683e\"           \"cargo_2035_24747a78\"          \n [567] \"cargo_2035_2474845c\"           \"cargo_2035_24749505\"          \n [569] \"cargo_2035_2475032b\"           \"cargo_2035_24751d63\"          \n [571] \"cargo_2035_24752d8d\"           \"cargo_2035_2475323c\"          \n [573] \"cargo_2035_24754e3d\"           \"cargo_2035_24762824\"          \n [575] \"cargo_2035_2476579c\"           \"cargo_2035_2476692f\"          \n [577] \"cargo_2035_24767b97\"           \"cargo_2035_24768c2b\"          \n [579] \"cargo_2035_24769930\"           \"cargo_2035_24770ef8\"          \n [581] \"cargo_2035_24771740\"           \"cargo_2035_247721f4\"          \n [583] \"cargo_2035_24773431\"           \"cargo_2035_24774936\"          \n [585] \"cargo_2035_24775c13\"           \"cargo_2035_247761a7\"          \n [587] \"cargo_2035_24777367\"           \"cargo_2035_24778cef\"          \n [589] \"cargo_2035_24779f94\"           \"cargo_2035_24780f73\"          \n [591] \"cargo_2035_24781789\"           \"cargo_2035_24782db3\"          \n [593] \"cargo_2035_24783c85\"           \"cargo_2035_2478425c\"          \n [595] \"cargo_2035_24785547\"           \"cargo_2035_24786714\"          \n [597] \"cargo_2035_24787aaf\"           \"cargo_2035_24788b05\"          \n [599] \"cargo_2035_24797827\"           \"cargo_2035_247981aa\"          \n [601] \"cargo_2035_24799533\"           \"cargo_2035_2480008b\"          \n [603] \"cargo_2035_24801096\"           \"cargo_2035_24802f0a\"          \n [605] \"cargo_2035_248031c8\"           \"cargo_2035_2480442e\"          \n [607] \"cargo_2035_24805fa9\"           \"cargo_2035_248067a1\"          \n [609] \"cargo_2035_24807b07\"           \"cargo_2035_248081ba\"          \n [611] \"cargo_2035_2480987a\"           \"cargo_2035_24810539\"          \n [613] \"cargo_2035_248116c2\"           \"cargo_2035_24812d9c\"          \n [615] \"cargo_2035_24813799\"           \"cargo_2035_2481434d\"          \n [617] \"cargo_2035_24815f35\"           \"cargo_2035_248166c8\"          \n [619] \"cargo_2035_24817c04\"           \"cargo_2035_248186f4\"          \n [621] \"cargo_2035_24819223\"           \"cargo_2035_24820b01\"          \n [623] \"cargo_2035_24821249\"           \"cargo_2035_24822f21\"          \n [625] \"cargo_2035_2482365a\"           \"cargo_2035_24824023\"          \n [627] \"cargo_2035_2482594a\"           \"cargo_2035_24826203\"          \n [629] \"cargo_2035_248273c0\"           \"cargo_2035_2482842c\"          \n [631] \"cargo_2035_24830604\"           \"cargo_2035_248315d4\"          \n [633] \"cargo_2035_2483278c\"           \"cargo_2035_2483333c\"          \n [635] \"cargo_2035_248345bd\"           \"cargo_2035_24835f83\"          \n [637] \"cargo_2035_24836909\"           \"cargo_2035_24837fb7\"          \n [639] \"cargo_2035_248380c0\"           \"cargo_2035_248396e1\"          \n [641] \"cargo_2035_24841641\"           \"cargo_2035_24842a80\"          \n [643] \"cargo_2035_24843c93\"           \"cargo_2035_248443c0\"          \n [645] \"cargo_2035_24845d58\"           \"cargo_2035_24846146\"          \n [647] \"cargo_2035_24856b68\"           \"cargo_2035_248601b0\"          \n [649] \"cargo_2035_248615d0\"           \"cargo_2035_248628e8\"          \n [651] \"cargo_2035_24864757\"           \"cargo_2035_24865054\"          \n [653] \"cargo_2035_24867838\"           \"cargo_2035_24869511\"          \n [655] \"cargo_2035_24870e51\"           \"cargo_2035_248719c7\"          \n [657] \"cargo_2035_24873007\"           \"cargo_2035_2488299b\"          \n [659] \"cargo_2035_2488330c\"           \"cargo_2035_24884946\"          \n [661] \"cargo_2035_24885497\"           \"cargo_2035_24886540\"          \n [663] \"cargo_2035_24887f7a\"           \"cargo_2035_248887ca\"          \n [665] \"cargo_2035_2488936f\"           \"cargo_2035_24890253\"          \n [667] \"cargo_2035_24891edd\"           \"cargo_2035_2489229e\"          \n [669] \"cargo_2035_24893301\"           \"cargo_2035_248940fe\"          \n [671] \"cargo_2035_24895628\"           \"cargo_2035_24896735\"          \n [673] \"cargo_2035_24897bc9\"           \"cargo_2035_2489871c\"          \n [675] \"cargo_2035_248994de\"           \"cargo_2035_24900db8\"          \n [677] \"cargo_2035_24901e53\"           \"cargo_2035_249026dc\"          \n [679] \"cargo_2035_24903504\"           \"cargo_2035_249049aa\"          \n [681] \"cargo_2035_249054b0\"           \"cargo_2035_249064db\"          \n [683] \"cargo_2035_24907fba\"           \"cargo_2035_24908db7\"          \n [685] \"cargo_2035_24909e7e\"           \"cargo_2035_24910fe6\"          \n [687] \"cargo_2035_24911413\"           \"cargo_2035_249126e4\"          \n [689] \"cargo_2035_24913699\"           \"cargo_2035_249144c2\"          \n [691] \"cargo_2035_249151e5\"           \"cargo_2035_2491656a\"          \n [693] \"cargo_2035_2491771b\"           \"cargo_2035_24918446\"          \n [695] \"cargo_2035_24919c54\"           \"cargo_2035_24920107\"          \n [697] \"cargo_2035_249211b8\"           \"cargo_2035_249227f8\"          \n [699] \"cargo_2035_24923229\"           \"cargo_2035_24924b2f\"          \n [701] \"cargo_2035_24925592\"           \"cargo_2035_24926945\"          \n [703] \"cargo_2035_249279ed\"           \"cargo_2035_24928c4e\"          \n [705] \"cargo_2035_249376a2\"           \"cargo_2035_24948a7e\"          \n [707] \"cargo_2035_2494981d\"           \"cargo_2035_24950c2b\"          \n [709] \"cargo_2035_24951b0d\"           \"cargo_2035_2495237b\"          \n [711] \"cargo_2035_249530bf\"           \"cargo_2035_249545bd\"          \n [713] \"cargo_2035_2495590b\"           \"cargo_2035_24956173\"          \n [715] \"cargo_2035_2495734c\"           \"cargo_2035_249586eb\"          \n [717] \"cargo_2035_249599d9\"           \"cargo_2035_249600fa\"          \n [719] \"cargo_2035_2496112e\"           \"cargo_2035_24962b83\"          \n [721] \"cargo_2035_24963dcb\"           \"cargo_2035_249644e4\"          \n [723] \"cargo_2035_24965df2\"           \"cargo_2035_24966eac\"          \n [725] \"cargo_2035_24967a51\"           \"cargo_2035_24968b44\"          \n [727] \"cargo_2035_24969979\"           \"cargo_2035_24970172\"          \n [729] \"cargo_2035_249716bb\"           \"cargo_2035_249729d4\"          \n [731] \"cargo_2035_2497357e\"           \"cargo_2035_24974146\"          \n [733] \"cargo_2035_24975494\"           \"cargo_2035_2497699d\"          \n [735] \"cargo_2035_24977d42\"           \"cargo_2035_24978bbb\"          \n [737] \"cargo_2035_249790c7\"           \"cargo_2035_24980adf\"          \n [739] \"cargo_2035_2498109b\"           \"cargo_2035_24982ae9\"          \n [741] \"cargo_2035_24983403\"           \"cargo_2035_249846ef\"          \n [743] \"cargo_2035_24985491\"           \"cargo_2035_2498656c\"          \n [745] \"cargo_2035_24987678\"           \"cargo_2035_249884c2\"          \n [747] \"cargo_2035_24989440\"           \"cargo_2035_24990028\"          \n [749] \"cargo_2035_249913f3\"           \"cargo_2035_24992d21\"          \n [751] \"cargo_2035_2499386c\"           \"cargo_2035_249954f8\"          \n [753] \"cargo_2035_25004e40\"           \"cargo_2035_2500531d\"          \n [755] \"cargo_2035_25006809\"           \"cargo_2035_25007c94\"          \n [757] \"cargo_2035_25008ef4\"           \"cargo_2035_2500969c\"          \n [759] \"cargo_2035_250109ce\"           \"cargo_2035_25011181\"          \n [761] \"cargo_2035_25012e23\"           \"cargo_2035_25013a32\"          \n [763] \"cargo_2035_2501441c\"           \"cargo_2035_250151e9\"          \n [765] \"cargo_2035_25016256\"           \"cargo_2035_25017837\"          \n [767] \"cargo_2035_250181f1\"           \"cargo_2035_250198ca\"          \n [769] \"cargo_2035_25020029\"           \"cargo_2035_25021798\"          \n [771] \"cargo_2035_25022d69\"           \"cargo_2035_25023899\"          \n [773] \"cargo_2035_2502450d\"           \"cargo_2035_2502591f\"          \n [775] \"cargo_2035_25030adb\"           \"cargo_2035_25037eed\"          \n [777] \"cargo_2035_25038750\"           \"cargo_2035_250390fb\"          \n [779] \"cargo_2035_25040146\"           \"cargo_2035_2504146c\"          \n [781] \"cargo_2035_2504288d\"           \"cargo_2035_25043736\"          \n [783] \"cargo_2035_250456a2\"           \"cargo_2035_25046aad\"          \n [785] \"cargo_2035_25047c63\"           \"cargo_2035_2504813e\"          \n [787] \"cargo_2035_25050772\"           \"cargo_2035_2505143d\"          \n [789] \"cargo_2035_25052112\"           \"cargo_2035_2505467c\"          \n [791] \"cargo_2035_25063b2c\"           \"cargo_2035_25064c07\"          \n [793] \"cargo_2035_2506569a\"           \"cargo_2035_250666c1\"          \n [795] \"cargo_2035_25067560\"           \"cargo_2035_25068f83\"          \n [797] \"cargo_2035_2506900e\"           \"cargo_2035_250710f3\"          \n [799] \"cargo_2035_250722fe\"           \"cargo_2035_2507376e\"          \n [801] \"cargo_2035_25074103\"           \"cargo_2035_25075d07\"          \n [803] \"cargo_2035_250765f2\"           \"cargo_2035_25077210\"          \n [805] \"cargo_2035_2507818c\"           \"cargo_2035_25079aad\"          \n [807] \"cargo_2035_25080e52\"           \"cargo_2035_250823be\"          \n [809] \"cargo_2035_25083f17\"           \"cargo_2035_2508454d\"          \n [811] \"cargo_2035_250854ef\"           \"cargo_2035_2508606f\"          \n [813] \"cargo_2035_250876ae\"           \"cargo_2035_250883d0\"          \n [815] \"cargo_2035_250895c5\"           \"cargo_2035_250908ba\"          \n [817] \"cargo_2035_25091711\"           \"cargo_2035_25093b88\"          \n [819] \"cargo_2035_25094cb0\"           \"cargo_2035_25095618\"          \n [821] \"cargo_2035_2509676b\"           \"cargo_2035_25097cf5\"          \n [823] \"cargo_2035_2509822f\"           \"cargo_2035_25099adb\"          \n [825] \"cargo_2035_25100a96\"           \"cargo_2035_251011a8\"          \n [827] \"cargo_2035_25102d34\"           \"cargo_2035_25104023\"          \n [829] \"cargo_2035_25105ed0\"           \"cargo_2035_25106ea3\"          \n [831] \"cargo_2035_25112180\"           \"cargo_2035_25113c59\"          \n [833] \"cargo_2035_25114bf3\"           \"cargo_2035_25115f55\"          \n [835] \"cargo_2035_25116f98\"           \"cargo_2035_251173df\"          \n [837] \"cargo_2035_251187a2\"           \"cargo_2035_2511982a\"          \n [839] \"cargo_2035_2512069c\"           \"cargo_2035_2512126b\"          \n [841] \"cargo_2035_251229a9\"           \"cargo_2035_25123e60\"          \n [843] \"cargo_2035_25124641\"           \"cargo_2035_25125f88\"          \n [845] \"cargo_2035_2512671e\"           \"cargo_2035_251275b8\"          \n [847] \"cargo_2035_25128e01\"           \"cargo_2035_25129f83\"          \n [849] \"cargo_2035_251309fa\"           \"cargo_2035_25131c86\"          \n [851] \"cargo_2035_25132413\"           \"cargo_2035_251339c6\"          \n [853] \"cargo_2035_25134cf2\"           \"cargo_2035_2513589e\"          \n [855] \"cargo_2035_251363f8\"           \"cargo_2035_251376fe\"          \n [857] \"cargo_2035_251387eb\"           \"cargo_2035_251391b6\"          \n [859] \"cargo_2035_251408e6\"           \"cargo_2035_251419c4\"          \n [861] \"cargo_2035_25142d1d\"           \"cargo_2035_25143476\"          \n [863] \"cargo_2035_25144a7f\"           \"cargo_2035_2514549b\"          \n [865] \"cargo_2035_25146e59\"           \"cargo_2035_25147c9f\"          \n [867] \"cargo_2035_251485d1\"           \"cargo_2035_251492bf\"          \n [869] \"cargo_2035_25150c7e\"           \"cargo_2035_25151592\"          \n [871] \"cargo_2035_25152f02\"           \"cargo_2035_251537fc\"          \n [873] \"cargo_2035_2515430e\"           \"cargo_2035_25155243\"          \n [875] \"cargo_2035_251563a4\"           \"cargo_2035_25157a44\"          \n [877] \"cargo_2035_251585b7\"           \"cargo_2035_2515938f\"          \n [879] \"cargo_2035_25160cbd\"           \"cargo_2035_251619d9\"          \n [881] \"cargo_2035_25162c77\"           \"cargo_2035_25163b6b\"          \n [883] \"cargo_2035_25164694\"           \"cargo_2035_25165610\"          \n [885] \"cargo_2035_251667de\"           \"cargo_2035_2516764f\"          \n [887] \"cargo_2035_251684f8\"           \"cargo_2035_251691ce\"          \n [889] \"cargo_2035_25170e0d\"           \"cargo_2035_25171d8f\"          \n [891] \"cargo_2035_251720cb\"           \"cargo_2035_25173ebe\"          \n [893] \"cargo_2035_2517482e\"           \"cargo_2035_25175d52\"          \n [895] \"cargo_2035_251767f5\"           \"cargo_2035_251779bf\"          \n [897] \"cargo_2035_25178b01\"           \"cargo_2035_25179673\"          \n [899] \"cargo_2035_25180a30\"           \"cargo_2035_25181926\"          \n [901] \"cargo_2035_25182f61\"           \"cargo_2035_25183d41\"          \n [903] \"cargo_2035_251848e6\"           \"cargo_2035_2518553e\"          \n [905] \"cargo_2035_251865aa\"           \"cargo_2035_25187836\"          \n [907] \"cargo_2035_251884aa\"           \"cargo_2035_251899b1\"          \n [909] \"cargo_2035_251901b5\"           \"cargo_2035_2519114d\"          \n [911] \"cargo_2035_25192f73\"           \"cargo_2035_25193314\"          \n [913] \"cargo_2035_2519433c\"           \"cargo_2035_25195f6c\"          \n [915] \"cargo_2035_25196584\"           \"cargo_2035_25200753\"          \n [917] \"cargo_2035_25207162\"           \"cargo_2035_25208d8a\"          \n [919] \"cargo_2035_25209607\"           \"cargo_2035_252101d8\"          \n [921] \"cargo_2035_252118d9\"           \"cargo_2035_2521292f\"          \n [923] \"cargo_2035_25213839\"           \"cargo_2035_25214b24\"          \n [925] \"cargo_2035_252159b4\"           \"cargo_2035_25216707\"          \n [927] \"cargo_2035_25217c5e\"           \"cargo_2035_25218b47\"          \n [929] \"cargo_2035_252198b4\"           \"cargo_2035_25220e0f\"          \n [931] \"cargo_2035_25221e81\"           \"cargo_2035_25222c51\"          \n [933] \"cargo_2035_25223ff1\"           \"cargo_2035_25224798\"          \n [935] \"cargo_2035_2522591d\"           \"cargo_2035_2522683a\"          \n [937] \"cargo_2035_252271b1\"           \"cargo_2035_25228b0e\"          \n [939] \"cargo_2035_25229c36\"           \"cargo_2035_25230171\"          \n [941] \"cargo_2035_25231e91\"           \"cargo_2035_2523252d\"          \n [943] \"cargo_2035_2523330f\"           \"cargo_2035_25234034\"          \n [945] \"cargo_2035_25235555\"           \"cargo_2035_25236525\"          \n [947] \"cargo_2035_25237e08\"           \"cargo_2035_252386b5\"          \n [949] \"cargo_2035_252398e0\"           \"cargo_2035_25240f28\"          \n [951] \"cargo_2035_2524172f\"           \"cargo_2035_25242d7d\"          \n [953] \"cargo_2035_25243b5b\"           \"cargo_2035_25244ca0\"          \n [955] \"cargo_2035_252452b7\"           \"cargo_2035_2524689b\"          \n [957] \"cargo_2035_25247eaf\"           \"cargo_2035_25248641\"          \n [959] \"cargo_2035_25249085\"           \"cargo_2035_25250f48\"          \n [961] \"cargo_2035_25251ce8\"           \"cargo_2035_25252198\"          \n [963] \"cargo_2035_25253bfc\"           \"cargo_2035_2525404e\"          \n [965] \"cargo_2035_252624a2\"           \"cargo_2035_252651bf\"          \n [967] \"cargo_2035_2526694d\"           \"cargo_2035_25267308\"          \n [969] \"cargo_2035_252685d8\"           \"cargo_2035_25269aed\"          \n [971] \"cargo_2035_25270e83\"           \"cargo_2035_252717b1\"          \n [973] \"cargo_2035_252729bc\"           \"cargo_2035_25273954\"          \n [975] \"cargo_2035_252749fb\"           \"cargo_2035_25280ece\"          \n [977] \"cargo_2035_25291b11\"           \"cargo_2035_2529486d\"          \n [979] \"cargo_2035_25295a57\"           \"cargo_2035_25296d3c\"          \n [981] \"cargo_2035_252979a2\"           \"cargo_2035_25298b39\"          \n [983] \"cargo_2035_252997d0\"           \"cargo_2035_25300f58\"          \n [985] \"cargo_2035_25301943\"           \"cargo_2035_253027d7\"          \n [987] \"cargo_2035_2530371e\"           \"cargo_2035_25304f66\"          \n [989] \"cargo_2035_25305759\"           \"cargo_2035_25306a04\"          \n [991] \"cargo_2035_25307872\"           \"cargo_2035_25308546\"          \n [993] \"cargo_2035_253097c8\"           \"cargo_2035_253101ac\"          \n [995] \"cargo_2035_2531154d\"           \"cargo_2035_25312985\"          \n [997] \"cargo_2035_25313694\"           \"cargo_2035_25314e13\"          \n [999] \"cargo_2035_253157f8\"           \"cargo_2035_2531697a\"          \n[1001] \"cargo_2035_253179ba\"           \"cargo_2035_25318b67\"          \n[1003] \"cargo_2035_25319e85\"           \"cargo_2035_25320ede\"          \n[1005] \"cargo_2035_25321a14\"           \"cargo_2035_25322deb\"          \n[1007] \"cargo_2035_25323abd\"           \"cargo_2035_25324213\"          \n[1009] \"cargo_2035_25325fbb\"           \"cargo_2035_25326fb5\"          \n[1011] \"cargo_2035_253279d2\"           \"cargo_2035_25328f66\"          \n[1013] \"cargo_2035_25329b7e\"           \"cargo_2035_25330c11\"          \n[1015] \"cargo_2035_25331137\"           \"cargo_2035_253322d9\"          \n[1017] \"cargo_2035_25333fed\"           \"cargo_2035_25334b9e\"          \n[1019] \"cargo_2035_253351f8\"           \"cargo_2035_253367e3\"          \n[1021] \"cargo_2035_25337827\"           \"cargo_2035_25338da8\"          \n[1023] \"cargo_2035_25339394\"           \"cargo_2035_253405d8\"          \n[1025] \"cargo_2035_25341bfe\"           \"cargo_2035_25342c84\"          \n[1027] \"cargo_2035_25343ba4\"           \"cargo_2035_25344657\"          \n[1029] \"cargo_2035_25345a4d\"           \"cargo_2035_253465e2\"          \n[1031] \"cargo_2035_25347cd5\"           \"cargo_2035_25348083\"          \n[1033] \"cargo_2035_253493b5\"           \"cargo_2035_25350145\"          \n[1035] \"cargo_2035_25351d51\"           \"cargo_2035_2535247e\"          \n[1037] \"cargo_2035_25353f2b\"           \"cargo_2035_253545ff\"          \n[1039] \"cargo_2035_25355a9b\"           \"cargo_2035_25356cb8\"          \n[1041] \"cargo_2035_25357642\"           \"cargo_2035_25358b93\"          \n[1043] \"cargo_2035_2535901c\"           \"cargo_2035_25360915\"          \n[1045] \"cargo_2035_2536168c\"           \"cargo_2035_2536256f\"          \n[1047] \"cargo_2035_25363a5a\"           \"cargo_2035_25364f7d\"          \n[1049] \"cargo_2035_25365154\"           \"cargo_2035_25366c72\"          \n[1051] \"cargo_2035_253672f7\"           \"cargo_2035_25368bed\"          \n[1053] \"cargo_2035_25369512\"           \"cargo_2035_25370005\"          \n[1055] \"cargo_2035_25371c1d\"           \"cargo_2035_25372727\"          \n[1057] \"cargo_2035_253730f6\"           \"cargo_2035_25374fdc\"          \n[1059] \"cargo_2035_253754b2\"           \"cargo_2035_25376780\"          \n[1061] \"cargo_2035_253778c7\"           \"cargo_2035_25378b17\"          \n[1063] \"cargo_2035_253797f7\"           \"cargo_2035_253803a8\"          \n[1065] \"cargo_2035_25381199\"           \"cargo_2035_253822af\"          \n[1067] \"cargo_2035_25383f86\"           \"cargo_2035_2538457f\"          \n[1069] \"cargo_2035_25385a5e\"           \"cargo_2035_253865fc\"          \n[1071] \"cargo_2035_25387aec\"           \"cargo_2035_25388926\"          \n[1073] \"cargo_2035_25389203\"           \"cargo_2035_25390349\"          \n[1075] \"cargo_2035_253910aa\"           \"cargo_2035_25392443\"          \n[1077] \"cargo_2035_253931aa\"           \"cargo_2035_25394dd8\"          \n[1079] \"cargo_2035_253951a4\"           \"cargo_2035_253962d4\"          \n[1081] \"cargo_2035_25397c9e\"           \"cargo_2035_25398c54\"          \n[1083] \"cargo_2035_253995c4\"           \"cargo_2035_25400572\"          \n[1085] \"cargo_2035_25401a44\"           \"cargo_2035_25402112\"          \n[1087] \"cargo_2035_25403e01\"           \"cargo_2035_25404e85\"          \n[1089] \"cargo_2035_25405481\"           \"cargo_2035_25406576\"          \n[1091] \"cargo_2035_25407174\"           \"cargo_2035_254080de\"          \n[1093] \"cargo_2035_25409c6b\"           \"cargo_2035_2541043a\"          \n[1095] \"cargo_2035_2541148f\"           \"cargo_2035_2541282d\"          \n[1097] \"cargo_2035_25413456\"           \"cargo_2035_254145f6\"          \n[1099] \"cargo_2035_25415e14\"           \"cargo_2035_25416e22\"          \n[1101] \"cargo_2035_25417114\"           \"cargo_2035_25418293\"          \n[1103] \"cargo_2035_25419db3\"           \"cargo_2035_25420363\"          \n[1105] \"cargo_2035_25421e17\"           \"cargo_2035_25422bfc\"          \n[1107] \"cargo_2035_25423857\"           \"cargo_2035_254246f7\"          \n[1109] \"cargo_2035_25425a03\"           \"cargo_2035_254260cd\"          \n[1111] \"cargo_2035_254275a1\"           \"cargo_2035_254280fa\"          \n[1113] \"cargo_2035_254292df\"           \"cargo_2035_25430b47\"          \n[1115] \"cargo_2035_25431e0e\"           \"cargo_2035_25432ecf\"          \n[1117] \"cargo_2035_25433c7f\"           \"cargo_2035_25434d71\"          \n[1119] \"cargo_2035_25435394\"           \"cargo_2035_25444ba2\"          \n[1121] \"cargo_2035_25447a3b\"           \"cargo_2035_25448822\"          \n[1123] \"cargo_2035_25449647\"           \"cargo_2035_25450484\"          \n[1125] \"cargo_2035_25452681\"           \"cargo_2035_25453831\"          \n[1127] \"cargo_2035_25454111\"           \"cargo_2035_25456e6e\"          \n[1129] \"cargo_2035_25457d1c\"           \"cargo_2035_25458da2\"          \n[1131] \"cargo_2035_254593dc\"           \"cargo_2035_25460af7\"          \n[1133] \"cargo_2035_25461d27\"           \"cargo_2035_254639fb\"          \n[1135] \"cargo_2035_25464169\"           \"cargo_2035_25465012\"          \n[1137] \"cargo_2035_2546613a\"           \"cargo_2035_2547263c\"          \n[1139] \"cargo_2035_25479eba\"           \"cargo_2035_254808c1\"          \n[1141] \"cargo_2035_25481f51\"           \"cargo_2035_25483240\"          \n[1143] \"cargo_2035_25484742\"           \"cargo_2035_2548698c\"          \n[1145] \"cargo_2035_25487a3b\"           \"cargo_2035_25488e7c\"          \n[1147] \"cargo_2035_254890ad\"           \"cargo_2035_25490343\"          \n[1149] \"cargo_2035_254916b4\"           \"cargo_2035_25492057\"          \n[1151] \"cargo_2035_25493588\"           \"cargo_2035_25494e4d\"          \n[1153] \"cargo_2035_25495f9e\"           \"cargo_2035_2549786d\"          \n[1155] \"cargo_2035_25498de0\"           \"cargo_2035_254994ba\"          \n[1157] \"cargo_2035_255008bc\"           \"cargo_2035_2550193d\"          \n[1159] \"cargo_2035_25502143\"           \"cargo_2035_255033bc\"          \n[1161] \"cargo_2035_2550497c\"           \"cargo_2035_25514ecd\"          \n[1163] \"cargo_2035_2551555d\"           \"cargo_2035_25516d73\"          \n[1165] \"cargo_2035_2551704b\"           \"cargo_2035_25519c57\"          \n[1167] \"cargo_2035_25520e56\"           \"cargo_2035_25521a67\"          \n[1169] \"cargo_2035_255223f2\"           \"cargo_2035_2552461d\"          \n[1171] \"cargo_2035_25525a53\"           \"cargo_2035_25527058\"          \n[1173] \"cargo_2035_25528802\"           \"cargo_2035_25536380\"          \n[1175] \"cargo_2035_25537446\"           \"cargo_2035_25539724\"          \n[1177] \"cargo_2035_25540ac0\"           \"cargo_2035_25541209\"          \n[1179] \"cargo_2035_25542857\"           \"cargo_2035_255435e8\"          \n[1181] \"cargo_2035_255457b0\"           \"cargo_2035_25546307\"          \n[1183] \"cargo_2035_2554852c\"           \"cargo_2035_25550e4c\"          \n[1185] \"cargo_2035_2555115c\"           \"cargo_2035_2555214c\"          \n[1187] \"cargo_2035_25553a7e\"           \"cargo_2035_2555509b\"          \n[1189] \"cargo_2035_2555662d\"           \"cargo_2035_25557237\"          \n[1191] \"cargo_2035_25568335\"           \"cargo_2035_255698d7\"          \n[1193] \"cargo_2035_255701ce\"           \"cargo_2035_2557179a\"          \n[1195] \"cargo_2035_25572d67\"           \"cargo_2035_25573cc1\"          \n[1197] \"cargo_2035_25574502\"           \"cargo_2035_25575445\"          \n[1199] \"cargo_2035_25577e26\"           \"cargo_2035_25578e75\"          \n[1201] \"cargo_2035_2557937d\"           \"cargo_2035_25580746\"          \n[1203] \"cargo_2035_25581498\"           \"cargo_2035_25582e91\"          \n[1205] \"cargo_2035_25583184\"           \"cargo_2035_255840ad\"          \n[1207] \"cargo_2035_255858c8\"           \"cargo_2035_25586f4e\"          \n[1209] \"cargo_2035_25588818\"           \"cargo_2035_25589ca9\"          \n[1211] \"cargo_2035_25597273\"           \"cargo_2035_255981d1\"          \n[1213] \"cargo_2035_25599807\"           \"cargo_2035_256002bf\"          \n[1215] \"cargo_2035_2560106b\"           \"cargo_2035_25602c3a\"          \n[1217] \"cargo_2035_2560364c\"           \"cargo_2035_2560405b\"          \n[1219] \"cargo_2035_256058f0\"           \"cargo_2035_25606743\"          \n[1221] \"cargo_2035_256083f1\"           \"cargo_2035_2560959b\"          \n[1223] \"cargo_2035_25610b0f\"           \"cargo_2035_256110f4\"          \n[1225] \"cargo_2035_25612ec3\"           \"cargo_2035_25613bab\"          \n[1227] \"cargo_2035_256144ef\"           \"cargo_2035_25615a5a\"          \n[1229] \"cargo_2035_25616d3d\"           \"cargo_2035_25617d8b\"          \n[1231] \"cargo_2035_2561922c\"           \"cargo_2035_25620fa8\"          \n[1233] \"cargo_2035_2562161d\"           \"cargo_2035_25622998\"          \n[1235] \"cargo_2035_256236db\"           \"cargo_2035_25624930\"          \n[1237] \"cargo_2035_25632fa6\"           \"cargo_2035_2564139d\"          \n[1239] \"cargo_2035_25643a47\"           \"cargo_2035_25644d6f\"          \n[1241] \"cargo_2035_25645f96\"           \"cargo_2035_25646c6a\"          \n[1243] \"cargo_2035_25647158\"           \"cargo_2035_25648081\"          \n[1245] \"cargo_2035_25649fbc\"           \"cargo_2035_2565018d\"          \n[1247] \"cargo_2035_25651899\"           \"cargo_2035_25652355\"          \n[1249] \"cargo_2035_25653f4a\"           \"cargo_2035_2565467f\"          \n[1251] \"cargo_2035_25655326\"           \"cargo_2035_25656b65\"          \n[1253] \"cargo_2035_25659a39\"           \"cargo_2035_25660438\"          \n[1255] \"cargo_2035_256612ab\"           \"cargo_2035_25662733\"          \n[1257] \"cargo_2035_2566354d\"           \"cargo_2035_25664b65\"          \n[1259] \"cargo_2035_25666f7e\"           \"cargo_2035_25667486\"          \n[1261] \"cargo_2035_256688f1\"           \"cargo_2035_25670262\"          \n[1263] \"cargo_2035_25671fe1\"           \"cargo_2035_25672507\"          \n[1265] \"cargo_2035_25673f2b\"           \"cargo_2035_25674e25\"          \n[1267] \"cargo_2035_256835ef\"           \"cargo_2035_2568402a\"          \n[1269] \"cargo_2035_25685545\"           \"cargo_2035_25686e07\"          \n[1271] \"cargo_2035_25687f46\"           \"cargo_2035_25688043\"          \n[1273] \"cargo_2035_25689431\"           \"cargo_2035_256903e9\"          \n[1275] \"cargo_2035_2569195a\"           \"cargo_2035_25692115\"          \n[1277] \"cargo_2035_25694349\"           \"cargo_2035_25695be6\"          \n[1279] \"cargo_2035_25696b7e\"           \"cargo_2035_2569701c\"          \n[1281] \"cargo_2035_2569954a\"           \"cargo_2035_25700195\"          \n[1283] \"cargo_2035_25706ccd\"           \"cargo_2035_2570957c\"          \n[1285] \"cargo_2035_25710a16\"           \"cargo_2035_25711c52\"          \n[1287] \"cargo_2035_25712d9f\"           \"cargo_2035_25713158\"          \n[1289] \"cargo_2035_25714117\"           \"cargo_2035_257150d5\"          \n[1291] \"cargo_2035_2571661c\"           \"cargo_2035_25717a6d\"          \n[1293] \"cargo_2035_2571805c\"           \"cargo_2035_257205f9\"          \n[1295] \"cargo_2035_25721b55\"           \"cargo_2035_25722f31\"          \n[1297] \"cargo_2035_25723937\"           \"cargo_2035_2572416f\"          \n[1299] \"cargo_2035_25725caa\"           \"cargo_2035_25726386\"          \n[1301] \"cargo_2035_25727e41\"           \"cargo_2035_25728f42\"          \n[1303] \"cargo_2035_25729955\"           \"cargo_2035_257318ee\"          \n[1305] \"cargo_2035_257323b3\"           \"cargo_2035_257336c7\"          \n[1307] \"cargo_2035_257344e7\"           \"cargo_2035_25735fbc\"          \n[1309] \"cargo_2035_257360c1\"           \"cargo_2035_25737d67\"          \n[1311] \"cargo_2035_25738e52\"           \"cargo_2035_25739081\"          \n[1313] \"cargo_2035_25740ed2\"           \"cargo_2035_25742017\"          \n[1315] \"cargo_2035_25743efc\"           \"cargo_2035_25744b77\"          \n[1317] \"cargo_2035_25745d4d\"           \"cargo_2035_257460e9\"          \n[1319] \"cargo_2035_2575401e\"           \"cargo_2035_25755207\"          \n[1321] \"cargo_2035_25756033\"           \"cargo_2035_25757bf8\"          \n[1323] \"cargo_2035_25758843\"           \"cargo_2035_25759ce3\"          \n[1325] \"cargo_2035_2576051f\"           \"cargo_2035_25761ae7\"          \n[1327] \"cargo_2035_2576224d\"           \"cargo_2035_2576374a\"          \n[1329] \"cargo_2035_25765830\"           \"cargo_2035_25766383\"          \n[1331] \"cargo_2035_257670e0\"           \"cargo_2035_25768b4f\"          \n[1333] \"cargo_2035_25769b01\"           \"cargo_2035_25770ada\"          \n[1335] \"cargo_2035_25780e0d\"           \"cargo_2035_25781e1e\"          \n[1337] \"cargo_2035_257822d4\"           \"cargo_2035_25783f15\"          \n[1339] \"cargo_2035_257846b4\"           \"cargo_2035_25785665\"          \n[1341] \"cargo_2035_25787307\"           \"cargo_2035_2578886a\"          \n[1343] \"cargo_2035_25790463\"           \"cargo_2035_25792364\"          \n[1345] \"cargo_2035_25793fbf\"           \"cargo_2035_257940f5\"          \n[1347] \"cargo_2035_25795c03\"           \"cargo_2035_2579665c\"          \n[1349] \"cargo_2035_25811c17\"           \"cargo_2035_258127bd\"          \n[1351] \"cargo_2035_25813d36\"           \"cargo_2035_258149f2\"          \n[1353] \"cargo_2035_258162f6\"           \"cargo_2035_25817c54\"          \n[1355] \"cargo_2035_258182ea\"           \"cargo_2035_25819234\"          \n[1357] \"cargo_2035_258200b2\"           \"cargo_2035_258217f3\"          \n[1359] \"cargo_2035_25822a90\"           \"cargo_2035_2582374f\"          \n[1361] \"cargo_2035_25824351\"           \"cargo_2035_258259b1\"          \n[1363] \"cargo_2035_2582761d\"           \"cargo_2035_25828070\"          \n[1365] \"cargo_2035_25829324\"           \"cargo_2035_25830628\"          \n[1367] \"cargo_2035_2583169d\"           \"cargo_2035_25832ea4\"          \n[1369] \"cargo_2035_258334f4\"           \"cargo_2035_2583471d\"          \n[1371] \"cargo_2035_25835f67\"           \"cargo_2035_2583619d\"          \n[1373] \"cargo_2035_2583810a\"           \"cargo_2035_25839afd\"          \n[1375] \"cargo_2035_258408b5\"           \"cargo_2035_25841300\"          \n[1377] \"cargo_2035_25842aa1\"           \"cargo_2035_25843a69\"          \n[1379] \"cargo_2035_2584468a\"           \"cargo_2035_25845b7f\"          \n[1381] \"cargo_2035_258460cd\"           \"cargo_2035_2584736a\"          \n[1383] \"cargo_2035_25855618\"           \"cargo_2035_25856dd4\"          \n[1385] \"cargo_2035_25857b33\"           \"cargo_2035_258586a0\"          \n[1387] \"cargo_2035_25859957\"           \"cargo_2035_258607e2\"          \n[1389] \"cargo_2035_25861071\"           \"cargo_2035_25862dda\"          \n[1391] \"cargo_2035_25863643\"           \"cargo_2035_25864a99\"          \n[1393] \"cargo_2035_2586678b\"           \"cargo_2035_25867a30\"          \n[1395] \"cargo_2035_25868b7f\"           \"cargo_2035_2586987c\"          \n[1397] \"cargo_2035_25870bc4\"           \"cargo_2035_25871c08\"          \n[1399] \"cargo_2035_25872639\"           \"cargo_2035_2587382d\"          \n[1401] \"cargo_2035_25874fb7\"           \"cargo_2035_258758e9\"          \n[1403] \"cargo_2035_25877372\"           \"cargo_2035_25878c72\"          \n[1405] \"cargo_2035_25879cb6\"           \"cargo_2035_25880141\"          \n[1407] \"cargo_2035_25881862\"           \"cargo_2035_258825f7\"          \n[1409] \"cargo_2035_2588356d\"           \"cargo_2035_25884287\"          \n[1411] \"cargo_2035_25885f8e\"           \"cargo_2035_25886c22\"          \n[1413] \"cargo_2035_25888bfc\"           \"cargo_2035_258893cc\"          \n[1415] \"cargo_2035_2589008c\"           \"cargo_2035_25891a58\"          \n[1417] \"cargo_2035_258928ec\"           \"cargo_2035_258987df\"          \n[1419] \"cargo_2035_258998c6\"           \"cargo_2035_2590832d\"          \n[1421] \"cargo_2035_259095fa\"           \"cargo_2035_25910e19\"          \n[1423] \"cargo_2035_2591107f\"           \"cargo_2035_25912fcf\"          \n[1425] \"cargo_2035_25913ebf\"           \"cargo_2035_259147c0\"          \n[1427] \"cargo_2035_25915f58\"           \"cargo_2035_25916ad8\"          \n[1429] \"cargo_2035_25917f03\"           \"cargo_2035_25918982\"          \n[1431] \"cargo_2035_2591945e\"           \"cargo_2035_25920420\"          \n[1433] \"cargo_2035_25921579\"           \"cargo_2035_259227b1\"          \n[1435] \"cargo_2035_259232cc\"           \"cargo_2035_2592487d\"          \n[1437] \"cargo_2035_25925d1c\"           \"cargo_2035_259265b0\"          \n[1439] \"cargo_2035_25927761\"           \"cargo_2035_2592854f\"          \n[1441] \"cargo_2035_2592948a\"           \"cargo_2035_259307dd\"          \n[1443] \"cargo_2035_25931767\"           \"cargo_2035_259328a2\"          \n[1445] \"cargo_2035_259331b7\"           \"cargo_2035_25934959\"          \n[1447] \"cargo_2035_25935949\"           \"cargo_2035_25936c93\"          \n[1449] \"cargo_2035_259375f2\"           \"cargo_2035_25942655\"          \n[1451] \"cargo_2035_259435ad\"           \"cargo_2035_25944814\"          \n[1453] \"cargo_2035_2594512e\"           \"cargo_2035_2594625b\"          \n[1455] \"cargo_2035_25949f4a\"           \"cargo_2035_2595120b\"          \n[1457] \"cargo_2035_2595211e\"           \"cargo_2035_25953808\"          \n[1459] \"cargo_2035_2595437b\"           \"cargo_2035_25955818\"          \n[1461] \"cargo_2035_25956b12\"           \"cargo_2035_25957dfe\"          \n[1463] \"cargo_2035_259584c6\"           \"cargo_2035_25959398\"          \n[1465] \"cargo_2035_25960251\"           \"cargo_2035_25962811\"          \n[1467] \"cargo_2035_259634f4\"           \"cargo_2035_25964e70\"          \n[1469] \"cargo_2035_25965e5f\"           \"cargo_2035_259663b0\"          \n[1471] \"cargo_2035_25967599\"           \"cargo_2035_25968796\"          \n[1473] \"cargo_2035_25969e3c\"           \"cargo_2035_25970a11\"          \n[1475] \"cargo_2035_25971968\"           \"cargo_2035_25973d5b\"          \n[1477] \"cargo_2035_25974a3e\"           \"cargo_2035_259802dc\"          \n[1479] \"cargo_2035_259812ba\"           \"cargo_2035_2598220f\"          \n[1481] \"cargo_2035_25983134\"           \"cargo_2035_2598494d\"          \n[1483] \"cargo_2035_25991370\"           \"cargo_2035_259956bf\"          \n[1485] \"cargo_2035_25996f5f\"           \"cargo_2035_25997ad3\"          \n[1487] \"cargo_2035_25998908\"           \"cargo_2035_25999d1a\"          \n[1489] \"cargo_2035_2600012f\"           \"cargo_2035_26001ec5\"          \n[1491] \"cargo_2035_260026f9\"           \"cargo_2035_260031a8\"          \n[1493] \"cargo_2035_26004836\"           \"cargo_2035_260051e1\"          \n[1495] \"cargo_2035_260068b3\"           \"cargo_2035_26007d29\"          \n[1497] \"cargo_2035_26008fc4\"           \"cargo_2035_26009c37\"          \n[1499] \"cargo_2035_26010d78\"           \"cargo_2035_2601132e\"          \n[1501] \"cargo_2035_260123ec\"           \"cargo_2035_26013ba3\"          \n[1503] \"cargo_2035_26014193\"           \"cargo_2035_26016dce\"          \n[1505] \"cargo_2035_26017d3a\"           \"cargo_2035_26018613\"          \n[1507] \"cargo_2035_2601943f\"           \"cargo_2035_260205b4\"          \n[1509] \"cargo_2035_260216f9\"           \"cargo_2035_2602221a\"          \n[1511] \"cargo_2035_26023d20\"           \"cargo_2035_26024f61\"          \n[1513] \"cargo_2035_260256c6\"           \"cargo_2035_26027a5e\"          \n[1515] \"cargo_2035_260288d3\"           \"cargo_2035_260293df\"          \n[1517] \"cargo_2035_26030044\"           \"cargo_2035_26031b96\"          \n[1519] \"cargo_2035_260321ed\"           \"cargo_2035_26033a75\"          \n[1521] \"cargo_2035_26034968\"           \"cargo_2035_26035cbf\"          \n[1523] \"cargo_2035_260361c4\"           \"cargo_2035_26038f0e\"          \n[1525] \"cargo_2035_26039a94\"           \"cargo_2035_2604045d\"          \n[1527] \"cargo_2035_26041244\"           \"cargo_2035_26048d66\"          \n[1529] \"cargo_2035_260499e6\"           \"cargo_2035_26050585\"          \n[1531] \"cargo_2035_26051a77\"           \"cargo_2035_26052bd5\"          \n[1533] \"cargo_2035_26053ca8\"           \"cargo_2035_26054371\"          \n[1535] \"cargo_2035_260557ec\"           \"cargo_2035_260563cc\"          \n[1537] \"cargo_2035_26057468\"           \"cargo_2035_26058365\"          \n[1539] \"cargo_2035_2605955c\"           \"cargo_2035_260600b3\"          \n[1541] \"cargo_2035_260613e8\"           \"cargo_2035_26062c3f\"          \n[1543] \"cargo_2035_26063f93\"           \"cargo_2035_26064013\"          \n[1545] \"cargo_2035_26065727\"           \"cargo_2035_260664ae\"          \n[1547] \"cargo_2035_260670b8\"           \"cargo_2035_26068bef\"          \n[1549] \"cargo_2035_2606999f\"           \"cargo_2035_260702ef\"          \n[1551] \"cargo_2035_260711e8\"           \"cargo_2035_26072044\"          \n[1553] \"cargo_2035_260731b9\"           \"cargo_2035_260745ad\"          \n[1555] \"cargo_2035_26075fb3\"           \"cargo_2035_2607609d\"          \n[1557] \"cargo_2035_26077710\"           \"cargo_2035_26078732\"          \n[1559] \"cargo_2035_26079865\"           \"cargo_2035_26080adb\"          \n[1561] \"cargo_2035_260812ce\"           \"cargo_2035_26082ae6\"          \n[1563] \"cargo_2035_26083bfc\"           \"cargo_2035_2608403b\"          \n[1565] \"cargo_2035_26085c4b\"           \"cargo_2035_260865e2\"          \n[1567] \"cargo_2035_260872d9\"           \"cargo_2035_26088002\"          \n[1569] \"cargo_2035_26089b05\"           \"cargo_2035_2609033b\"          \n[1571] \"cargo_2035_26091da4\"           \"cargo_2035_26092f5c\"          \n[1573] \"cargo_2035_26093694\"           \"cargo_2035_26094094\"          \n[1575] \"cargo_2035_26103907\"           \"cargo_2035_261140fa\"          \n[1577] \"cargo_2035_261157ef\"           \"cargo_2035_26116233\"          \n[1579] \"cargo_2035_2611836a\"           \"cargo_2035_26119fa8\"          \n[1581] \"cargo_2035_26120d02\"           \"cargo_2035_26121add\"          \n[1583] \"cargo_2035_261229a8\"           \"cargo_2035_26123e49\"          \n[1585] \"cargo_2035_26124625\"           \"cargo_2035_261252bc\"          \n[1587] \"cargo_2035_26126f39\"           \"cargo_2035_2612743d\"          \n[1589] \"cargo_2035_26129e1a\"           \"cargo_2035_26130914\"          \n[1591] \"cargo_2035_26131de2\"           \"cargo_2035_261328fc\"          \n[1593] \"cargo_2035_261335de\"           \"cargo_2035_26144acb\"          \n[1595] \"cargo_2035_26145914\"           \"cargo_2035_261468e1\"          \n[1597] \"cargo_2035_26147a52\"           \"cargo_2035_26148d48\"          \n[1599] \"cargo_2035_26149c03\"           \"cargo_2035_261508ff\"          \n[1601] \"cargo_2035_26151475\"           \"cargo_2035_2615277c\"          \n[1603] \"cargo_2035_261540db\"           \"cargo_2035_26155c19\"          \n[1605] \"cargo_2035_26156c45\"           \"cargo_2035_26157095\"          \n[1607] \"cargo_2035_26160f54\"           \"cargo_2035_26161da5\"          \n[1609] \"cargo_2035_2616336b\"           \"cargo_2035_26165f6e\"          \n[1611] \"cargo_2035_261663a9\"           \"cargo_2035_26168755\"          \n[1613] \"cargo_2035_261691ea\"           \"cargo_2035_261774e1\"          \n[1615] \"cargo_2035_2618647d\"           \"cargo_2035_261876f9\"          \n[1617] \"cargo_2035_26188c73\"           \"cargo_2035_26189b18\"          \n[1619] \"cargo_2035_2619160f\"           \"cargo_2035_26192c9a\"          \n[1621] \"cargo_2035_26193016\"           \"cargo_2035_261957d0\"          \n[1623] \"cargo_2035_26196fcf\"           \"cargo_2035_26197540\"          \n[1625] \"cargo_2035_2619899c\"           \"cargo_2035_26199927\"          \n[1627] \"cargo_2035_26200051\"           \"cargo_2035_26202a6f\"          \n[1629] \"cargo_2035_262042bb\"           \"cargo_2035_262066f7\"          \n[1631] \"cargo_2035_262071c0\"           \"cargo_2035_26208a0c\"          \n[1633] \"cargo_2035_2620946e\"           \"cargo_2035_26210f98\"          \n[1635] \"cargo_2035_26211787\"           \"cargo_2035_262121b0\"          \n[1637] \"cargo_2035_26213379\"           \"cargo_2035_26214004\"          \n[1639] \"cargo_2035_26215757\"           \"cargo_2035_262165d9\"          \n[1641] \"cargo_2035_26217c4e\"           \"cargo_2035_26220299\"          \n[1643] \"cargo_2035_2622180d\"           \"cargo_2035_262224d9\"          \n[1645] \"cargo_2035_26223dfd\"           \"cargo_2035_26224390\"          \n[1647] \"cargo_2035_26225563\"           \"cargo_2035_26226176\"          \n[1649] \"cargo_2035_26227d1e\"           \"cargo_2035_262289cd\"          \n[1651] \"cargo_2035_26229d1c\"           \"cargo_2035_26231141\"          \n[1653] \"cargo_2035_26232d94\"           \"cargo_2035_26233af0\"          \n[1655] \"cargo_2035_26234a55\"           \"cargo_2035_262353a8\"          \n[1657] \"cargo_2035_26236a59\"           \"cargo_2035_262387c9\"          \n[1659] \"cargo_2035_26239af8\"           \"cargo_2035_262407ce\"          \n[1661] \"cargo_2035_2624272c\"           \"cargo_2035_26243d78\"          \n[1663] \"cargo_2035_2624482b\"           \"cargo_2035_262450d4\"          \n[1665] \"cargo_2035_26246ba6\"           \"cargo_2035_26250689\"          \n[1667] \"cargo_2035_26251331\"           \"cargo_2035_26252317\"          \n[1669] \"cargo_2035_26254355\"           \"cargo_2035_26255681\"          \n[1671] \"cargo_2035_26256cbb\"           \"cargo_2035_26257c81\"          \n[1673] \"cargo_2035_26258fa4\"           \"cargo_2035_2625909e\"          \n[1675] \"cargo_2035_26260477\"           \"cargo_2035_2626114c\"          \n[1677] \"cargo_2035_26262559\"           \"cargo_2035_26263703\"          \n[1679] \"cargo_2035_2626593e\"           \"cargo_2035_26266ac0\"          \n[1681] \"cargo_2035_26267e8e\"           \"cargo_2035_26268346\"          \n[1683] \"cargo_2035_262690b4\"           \"cargo_2035_262704be\"          \n[1685] \"cargo_2035_2627117e\"           \"cargo_2035_26272077\"          \n[1687] \"cargo_2035_262732b4\"           \"cargo_2035_26274688\"          \n[1689] \"cargo_2035_26276c26\"           \"cargo_2035_262774da\"          \n[1691] \"cargo_2035_26278bd0\"           \"cargo_2035_26279bd5\"          \n[1693] \"cargo_2035_26280694\"           \"cargo_2035_26281078\"          \n[1695] \"cargo_2035_26289c9c\"           \"cargo_2035_2629074c\"          \n[1697] \"cargo_2035_26291e82\"           \"cargo_2035_262935d5\"          \n[1699] \"cargo_2035_26294398\"           \"cargo_2035_262955e1\"          \n[1701] \"cargo_2035_26297998\"           \"cargo_2035_262984ba\"          \n[1703] \"cargo_2035_263004db\"           \"cargo_2035_26301dd4\"          \n[1705] \"cargo_2035_26302550\"           \"cargo_2035_263031e7\"          \n[1707] \"cargo_2035_263044a1\"           \"cargo_2035_26306022\"          \n[1709] \"cargo_2035_26307516\"           \"cargo_2035_26308d2b\"          \n[1711] \"cargo_2035_26309f47\"           \"cargo_2035_26311684\"          \n[1713] \"cargo_2035_2631286e\"           \"cargo_2035_26313c43\"          \n[1715] \"cargo_2035_26314be8\"           \"cargo_2035_26315159\"          \n[1717] \"cargo_2035_26317274\"           \"cargo_2035_26318dde\"          \n[1719] \"cargo_2035_26319787\"           \"cargo_2035_26322822\"          \n[1721] \"cargo_2035_263237e0\"           \"cargo_2035_26324524\"          \n[1723] \"cargo_2035_263250f7\"           \"cargo_2035_26326509\"          \n[1725] \"cargo_2035_26327ef0\"           \"cargo_2035_26328b54\"          \n[1727] \"cargo_2035_26329637\"           \"cargo_2035_26330213\"          \n[1729] \"cargo_2035_26331f8c\"           \"cargo_2035_263336c5\"          \n[1731] \"cargo_2035_26335ad1\"           \"cargo_2035_2633663b\"          \n[1733] \"cargo_2035_26337063\"           \"cargo_2035_263383dd\"          \n[1735] \"cargo_2035_263393bf\"           \"cargo_2035_26340fe4\"          \n[1737] \"cargo_2035_26341120\"           \"cargo_2035_26342824\"          \n[1739] \"cargo_2035_26344dec\"           \"cargo_2035_26345ac1\"          \n[1741] \"cargo_2035_26346930\"           \"cargo_2035_2634751b\"          \n[1743] \"cargo_2035_26348c58\"           \"cargo_2035_26349618\"          \n[1745] \"cargo_2035_263505ab\"           \"cargo_2035_26351836\"          \n[1747] \"cargo_2035_263525dc\"           \"cargo_2035_2635368b\"          \n[1749] \"cargo_2035_26355a7e\"           \"cargo_2035_2635618b\"          \n[1751] \"cargo_2035_263576c0\"           \"cargo_2035_26358749\"          \n[1753] \"cargo_2035_263597f4\"           \"cargo_2035_26360537\"          \n[1755] \"cargo_2035_26362a1a\"           \"cargo_2035_2636323f\"          \n[1757] \"cargo_2035_263644bc\"           \"cargo_2035_26365bf8\"          \n[1759] \"cargo_2035_26366864\"           \"cargo_2035_26367739\"          \n[1761] \"cargo_2035_26368138\"           \"cargo_2035_2636906f\"          \n[1763] \"cargo_2035_26370ccd\"           \"cargo_2035_26371891\"          \n[1765] \"cargo_2035_26372d91\"           \"cargo_2035_26373463\"          \n[1767] \"cargo_2035_26374690\"           \"cargo_2035_2637575d\"          \n[1769] \"cargo_2035_26376ca7\"           \"cargo_2035_263777ac\"          \n[1771] \"cargo_2035_2637834f\"           \"cargo_2035_26379235\"          \n[1773] \"cargo_2035_263845f1\"           \"cargo_2035_26391468\"          \n[1775] \"cargo_2035_26392bf9\"           \"cargo_2035_26393f36\"          \n[1777] \"cargo_2035_26394084\"           \"cargo_2035_263956ce\"          \n[1779] \"cargo_2035_263969de\"           \"cargo_2035_26397dd6\"          \n[1781] \"cargo_2035_263986f4\"           \"cargo_2035_26399fd2\"          \n[1783] \"cargo_2035_26400b7a\"           \"cargo_2035_2640150a\"          \n[1785] \"cargo_2035_26402cf7\"           \"cargo_2035_26403821\"          \n[1787] \"cargo_2035_264043da\"           \"cargo_2035_26405693\"          \n[1789] \"cargo_2035_26406ea6\"           \"cargo_2035_26407a33\"          \n[1791] \"cargo_2035_26409d4c\"           \"cargo_2035_2641074a\"          \n[1793] \"cargo_2035_264112cb\"           \"cargo_2035_26412cd0\"          \n[1795] \"cargo_2035_264139d6\"           \"cargo_2035_26414e0c\"          \n[1797] \"cargo_2035_26419868\"           \"cargo_2035_264313d5\"          \n[1799] \"cargo_2035_264334c0\"           \"cargo_2035_26434d33\"          \n[1801] \"cargo_2035_264354b4\"           \"cargo_2035_26436cce\"          \n[1803] \"cargo_2035_26437bd1\"           \"cargo_2035_26438fae\"          \n[1805] \"cargo_2035_26439237\"           \"cargo_2035_2644186c\"          \n[1807] \"cargo_2035_264422ec\"           \"cargo_2035_26444022\"          \n[1809] \"cargo_2035_26445c03\"           \"cargo_2035_26446716\"          \n[1811] \"cargo_2035_26447dfe\"           \"cargo_2035_264485e7\"          \n[1813] \"cargo_2035_264559b6\"           \"cargo_2035_26457b48\"          \n[1815] \"cargo_2035_26458bcb\"           \"cargo_2035_26459649\"          \n[1817] \"cargo_2035_26460e62\"           \"cargo_2035_26461c00\"          \n[1819] \"cargo_2035_26462982\"           \"cargo_2035_26463a7e\"          \n[1821] \"cargo_2035_26464f84\"           \"cargo_2035_2646587a\"          \n[1823] \"cargo_2035_2646637b\"           \"cargo_2035_264689cf\"          \n[1825] \"cargo_2035_2646944e\"           \"cargo_2035_26470f54\"          \n[1827] \"cargo_2035_264715c1\"           \"cargo_2035_26472e66\"          \n[1829] \"cargo_2035_264733d1\"           \"cargo_2035_26474214\"          \n[1831] \"cargo_2035_26475bbe\"           \"cargo_2035_26476d14\"          \n[1833] \"cargo_2035_26477d70\"           \"cargo_2035_26479f36\"          \n[1835] \"cargo_2035_26480407\"           \"cargo_2035_2648108f\"          \n[1837] \"cargo_2035_26482a86\"           \"cargo_2035_26483436\"          \n[1839] \"cargo_2035_264844ab\"           \"cargo_2035_264850d0\"          \n[1841] \"cargo_2035_264866df\"           \"cargo_2035_26487d07\"          \n[1843] \"cargo_2035_26488644\"           \"cargo_2035_264947cc\"          \n[1845] \"cargo_2035_264961b4\"           \"cargo_2035_2649833d\"          \n[1847] \"cargo_2035_26499a66\"           \"cargo_2035_265002dd\"          \n[1849] \"cargo_2035_26501425\"           \"cargo_2035_26502a92\"          \n[1851] \"cargo_2035_265032a9\"           \"cargo_2035_265049c2\"          \n[1853] \"cargo_2035_2650583d\"           \"cargo_2035_26507219\"          \n[1855] \"cargo_2035_26508a82\"           \"cargo_2035_26509f1a\"          \n[1857] \"cargo_2035_26510706\"           \"cargo_2035_26511524\"          \n[1859] \"cargo_2035_2651961f\"           \"cargo_2035_26520996\"          \n[1861] \"cargo_2035_265211f9\"           \"cargo_2035_2652287f\"          \n[1863] \"cargo_2035_26523187\"           \"cargo_2035_265243d2\"          \n[1865] \"cargo_2035_26525f18\"           \"cargo_2035_26526c23\"          \n[1867] \"cargo_2035_26527462\"           \"cargo_2035_26528c75\"          \n[1869] \"cargo_2035_26529f80\"           \"cargo_2035_2653076f\"          \n[1871] \"cargo_2035_26531501\"           \"cargo_2035_2653201c\"          \n[1873] \"cargo_2035_265337dc\"           \"cargo_2035_26534830\"          \n[1875] \"cargo_2035_26535180\"           \"cargo_2035_2653673e\"          \n[1877] \"cargo_2035_26541d47\"           \"cargo_2035_26547da1\"          \n[1879] \"cargo_2035_26548206\"           \"cargo_2035_26549b15\"          \n[1881] \"cargo_2035_26550dca\"           \"cargo_2035_26551be4\"          \n[1883] \"cargo_2035_2655231c\"           \"cargo_2035_2655351d\"          \n[1885] \"cargo_2035_26554243\"           \"cargo_2035_26555d73\"          \n[1887] \"cargo_2035_2655634e\"           \"cargo_2035_26558fad\"          \n[1889] \"cargo_2035_26560bcc\"           \"cargo_2035_265626a5\"          \n[1891] \"cargo_2035_2656385f\"           \"cargo_2035_2656444a\"          \n[1893] \"cargo_2035_26565127\"           \"cargo_2035_2656647d\"          \n[1895] \"cargo_2035_2656781e\"           \"cargo_2035_265685fc\"          \n[1897] \"cargo_2035_265798bd\"           \"cargo_2035_26580af5\"          \n[1899] \"cargo_2035_265819d8\"           \"cargo_2035_26582d69\"          \n[1901] \"cargo_2035_26583e8d\"           \"cargo_2035_26586681\"          \n[1903] \"cargo_2035_26587047\"           \"cargo_2035_26588e8f\"          \n[1905] \"cargo_2035_26590374\"           \"cargo_2035_26591afc\"          \n[1907] \"cargo_2035_26592bb8\"           \"cargo_2035_265933c2\"          \n[1909] \"cargo_2035_26594e92\"           \"cargo_2035_265952ed\"          \n[1911] \"cargo_2035_2659848c\"           \"cargo_2035_26599127\"          \n[1913] \"cargo_2035_2660128e\"           \"cargo_2035_26606e07\"          \n[1915] \"cargo_2035_26607807\"           \"cargo_2035_26608f53\"          \n[1917] \"cargo_2035_26609199\"           \"cargo_2035_266209c9\"          \n[1919] \"cargo_2035_26621112\"           \"cargo_2035_266231e2\"          \n[1921] \"cargo_2035_2662470a\"           \"cargo_2035_26627c2d\"          \n[1923] \"cargo_2035_26628b75\"           \"cargo_2035_26629aa8\"          \n[1925] \"cargo_2035_26630594\"           \"cargo_2035_26631e77\"          \n[1927] \"cargo_2035_26634a6f\"           \"cargo_2035_26635666\"          \n[1929] \"cargo_2035_266364a9\"           \"cargo_2035_266466d2\"          \n[1931] \"cargo_2035_26647272\"           \"cargo_2035_266487cd\"          \n[1933] \"cargo_2035_26649c2d\"           \"cargo_2035_26650415\"          \n[1935] \"cargo_2035_26651916\"           \"cargo_2035_26652ccd\"          \n[1937] \"cargo_2035_26653c8b\"           \"cargo_2035_26654865\"          \n[1939] \"cargo_2035_266551be\"           \"cargo_2035_26657127\"          \n[1941] \"cargo_2035_2665850e\"           \"cargo_2035_266599d5\"          \n[1943] \"cargo_2035_26660dcd\"           \"cargo_2035_266612a3\"          \n[1945] \"cargo_2035_2666283f\"           \"cargo_2035_26663623\"          \n[1947] \"cargo_2035_26664abb\"           \"cargo_2035_26665296\"          \n[1949] \"cargo_2035_26666bba\"           \"cargo_2035_26668451\"          \n[1951] \"cargo_2035_26669a27\"           \"cargo_2035_26670d25\"          \n[1953] \"cargo_2035_26671779\"           \"cargo_2035_26672e78\"          \n[1955] \"cargo_2035_26673478\"           \"cargo_2035_26674c75\"          \n[1957] \"cargo_2035_26675802\"           \"cargo_2035_26680697\"          \n[1959] \"cargo_2035_26682f18\"           \"cargo_2035_26683e96\"          \n[1961] \"cargo_2035_2668430f\"           \"cargo_2035_26685d6d\"          \n[1963] \"cargo_2035_266869df\"           \"cargo_2035_26687f9d\"          \n[1965] \"cargo_2035_2669078b\"           \"cargo_2035_26693379\"          \n[1967] \"cargo_2035_26698828\"           \"cargo_2035_26699791\"          \n[1969] \"cargo_2035_26700cb6\"           \"cargo_2035_2670122a\"          \n[1971] \"cargo_2035_26702c8c\"           \"cargo_2035_267033e4\"          \n[1973] \"cargo_2035_26704153\"           \"cargo_2035_2670544a\"          \n[1975] \"cargo_2035_26706236\"           \"cargo_2035_267077e8\"          \n[1977] \"cargo_2035_26708634\"           \"cargo_2035_26709fdb\"          \n[1979] \"cargo_2035_26710159\"           \"cargo_2035_2671125c\"          \n[1981] \"cargo_2035_26712afd\"           \"cargo_2035_267139b2\"          \n[1983] \"cargo_2035_2671490c\"           \"cargo_2035_26715230\"          \n[1985] \"cargo_2035_26716532\"           \"cargo_2035_26717fe1\"          \n[1987] \"cargo_2035_26718a11\"           \"cargo_2035_26719f2f\"          \n[1989] \"cargo_2035_26720a77\"           \"cargo_2035_267212e8\"          \n[1991] \"cargo_2035_26722ae5\"           \"cargo_2035_26723d81\"          \n[1993] \"cargo_2035_26724729\"           \"cargo_2035_267258a3\"          \n[1995] \"cargo_2035_2672666b\"           \"cargo_2035_267276bb\"          \n[1997] \"cargo_2035_267282bf\"           \"cargo_2035_26729393\"          \n[1999] \"cargo_2035_267304f9\"           \"cargo_2035_267318b6\"          \n[2001] \"cargo_2035_26732f9a\"           \"cargo_2035_26733e36\"          \n[2003] \"cargo_2035_267341bb\"           \"cargo_2035_267359f4\"          \n[2005] \"cargo_2035_26736d82\"           \"cargo_2035_2673793f\"          \n[2007] \"cargo_2035_267387ea\"           \"cargo_2035_267398be\"          \n[2009] \"cargo_2035_26740698\"           \"cargo_2035_26741cfd\"          \n[2011] \"cargo_2035_2674260e\"           \"cargo_2035_26743ba6\"          \n[2013] \"cargo_2035_267444f1\"           \"cargo_2035_267458ff\"          \n[2015] \"cargo_2035_26746742\"           \"cargo_2035_267472a9\"          \n[2017] \"cargo_2035_2674853e\"           \"cargo_2035_26749de1\"          \n[2019] \"cargo_2035_2675144d\"           \"cargo_2035_267529ba\"          \n[2021] \"cargo_2035_26753777\"           \"cargo_2035_26754131\"          \n[2023] \"cargo_2035_26755d3e\"           \"cargo_2035_26757fd7\"          \n[2025] \"cargo_2035_26758acb\"           \"cargo_2035_2675916c\"          \n[2027] \"cargo_2035_26760dc4\"           \"cargo_2035_26762015\"          \n[2029] \"cargo_2035_26763f16\"           \"cargo_2035_26764fa8\"          \n[2031] \"cargo_2035_267657c8\"           \"cargo_2035_267667cd\"          \n[2033] \"cargo_2035_26767885\"           \"cargo_2035_26768e3c\"          \n[2035] \"cargo_2035_267690aa\"           \"cargo_2035_26770d2f\"          \n[2037] \"cargo_2035_267711bb\"           \"cargo_2035_26773511\"          \n[2039] \"cargo_2035_267790e5\"           \"cargo_2035_267800ea\"          \n[2041] \"cargo_2035_26781809\"           \"cargo_2035_26782b0f\"          \n[2043] \"cargo_2035_26783e09\"           \"cargo_2035_26784d55\"          \n[2045] \"cargo_2035_267853ee\"           \"cargo_2035_267919c1\"          \n[2047] \"cargo_2035_26796f15\"           \"cargo_2035_26797e7b\"          \n[2049] \"cargo_2035_267984e0\"           \"cargo_2035_26799bee\"          \n[2051] \"cargo_2035_26800b28\"           \"cargo_2035_268012e0\"          \n[2053] \"cargo_2035_26802e89\"           \"cargo_2035_26803f1b\"          \n[2055] \"cargo_2035_268049c1\"           \"cargo_2035_26805c8d\"          \n[2057] \"cargo_2035_268068c1\"           \"cargo_2035_26807be2\"          \n[2059] \"cargo_2035_26808424\"           \"cargo_2035_26809373\"          \n[2061] \"cargo_2035_268100f0\"           \"cargo_2035_26811552\"          \n[2063] \"cargo_2035_26812a5c\"           \"cargo_2035_2681345f\"          \n[2065] \"cargo_2035_26814cb1\"           \"cargo_2035_26815901\"          \n[2067] \"cargo_2035_26819aec\"           \"cargo_2035_268207f7\"          \n[2069] \"cargo_2035_26821344\"           \"cargo_2035_268220e6\"          \n[2071] \"cargo_2035_268249cf\"           \"cargo_2035_26828483\"          \n[2073] \"cargo_2035_268307c6\"           \"cargo_2035_26831735\"          \n[2075] \"cargo_2035_268324cc\"           \"cargo_2035_268330c1\"          \n[2077] \"cargo_2035_2683480a\"           \"cargo_2035_2683518b\"          \n[2079] \"cargo_2035_26836176\"           \"cargo_2035_268370b6\"          \n[2081] \"cargo_2035_2683931b\"           \"cargo_2035_26840eee\"          \n[2083] \"cargo_2035_26845c33\"           \"cargo_2035_268464f8\"          \n[2085] \"cargo_2035_26848d3b\"           \"cargo_2035_2684910e\"          \n[2087] \"cargo_2035_26850d7c\"           \"cargo_2035_26851535\"          \n[2089] \"cargo_2035_26852c33\"           \"cargo_2035_26853536\"          \n[2091] \"cargo_2035_2685480d\"           \"cargo_2035_268555e0\"          \n[2093] \"cargo_2035_26856629\"           \"cargo_2035_26857c0c\"          \n[2095] \"cargo_2035_2685924a\"           \"cargo_2035_2686085b\"          \n[2097] \"cargo_2035_268619aa\"           \"cargo_2035_26862c71\"          \n[2099] \"cargo_2035_26863d75\"           \"cargo_2035_26864880\"          \n[2101] \"cargo_2035_26865b87\"           \"cargo_2035_26866b08\"          \n[2103] \"cargo_2035_268674a6\"           \"cargo_2035_26868eb7\"          \n[2105] \"cargo_2035_26870713\"           \"cargo_2035_26871f29\"          \n[2107] \"cargo_2035_26872fb9\"           \"cargo_2035_268730c4\"          \n[2109] \"cargo_2035_26874322\"           \"cargo_2035_26875676\"          \n[2111] \"cargo_2035_2687691c\"           \"cargo_2035_2687780d\"          \n[2113] \"cargo_2035_26878467\"           \"cargo_2035_2687977f\"          \n[2115] \"cargo_2035_26881b70\"           \"cargo_2035_2688262f\"          \n[2117] \"cargo_2035_26883a06\"           \"cargo_2035_268840d7\"          \n[2119] \"cargo_2035_26885262\"           \"cargo_2035_26886ea0\"          \n[2121] \"cargo_2035_2688798e\"           \"cargo_2035_26888e42\"          \n[2123] \"cargo_2035_2689565f\"           \"cargo_2035_268960c9\"          \n[2125] \"cargo_2035_26897c00\"           \"cargo_2035_26898ada\"          \n[2127] \"cargo_2035_26900375\"           \"cargo_2035_26902a05\"          \n[2129] \"cargo_2035_26904473\"           \"cargo_2035_269054a8\"          \n[2131] \"cargo_2035_26906f37\"           \"cargo_2035_2690704c\"          \n[2133] \"cargo_2035_26908615\"           \"cargo_2035_269096bb\"          \n[2135] \"cargo_2035_26910b88\"           \"cargo_2035_26911f09\"          \n[2137] \"cargo_2035_269247f2\"           \"cargo_2035_269250fd\"          \n[2139] \"cargo_2035_26928cef\"           \"cargo_2035_26929e8d\"          \n[2141] \"cargo_2035_26931386\"           \"cargo_2035_269329eb\"          \n[2143] \"cargo_2035_26933205\"           \"cargo_2035_26934195\"          \n[2145] \"cargo_2035_269353d3\"           \"cargo_2035_26947427\"          \n[2147] \"cargo_2035_26954bff\"           \"cargo_2035_26955320\"          \n[2149] \"cargo_2035_26956b11\"           \"cargo_2035_26957bae\"          \n[2151] \"cargo_2035_269584f3\"           \"cargo_2035_26959cf1\"          \n[2153] \"cargo_2035_26960823\"           \"cargo_2035_2696153e\"          \n[2155] \"cargo_2035_26962ebe\"           \"cargo_2035_2696360b\"          \n[2157] \"cargo_2035_26964613\"           \"cargo_2035_26965a59\"          \n[2159] \"cargo_2035_26966e06\"           \"cargo_2035_26967f6d\"          \n[2161] \"cargo_2035_26968747\"           \"cargo_2035_26969213\"          \n[2163] \"cargo_2035_269707d5\"           \"cargo_2035_26971eec\"          \n[2165] \"cargo_2035_26972393\"           \"cargo_2035_26973b06\"          \n[2167] \"cargo_2035_269748cb\"           \"cargo_2035_269752c6\"          \n[2169] \"cargo_2035_26978bcf\"           \"cargo_2035_26979781\"          \n[2171] \"cargo_2035_26980d34\"           \"cargo_2035_26982160\"          \n[2173] \"cargo_2035_269834c6\"           \"cargo_2035_26984023\"          \n[2175] \"cargo_2035_26985dda\"           \"cargo_2035_26986132\"          \n[2177] \"cargo_2035_26987021\"           \"cargo_2035_2698869f\"          \n[2179] \"cargo_2035_269896dd\"           \"cargo_2035_269906db\"          \n[2181] \"cargo_2035_2699108c\"           \"cargo_2035_26992d5c\"          \n[2183] \"cargo_2035_2699301a\"           \"cargo_2035_26994d63\"          \n[2185] \"cargo_2035_26995df5\"           \"cargo_2035_2699629a\"          \n[2187] \"cargo_2035_269978b8\"           \"cargo_2035_26998c89\"          \n[2189] \"cargo_2035_26999a9c\"           \"cargo_2035_27000096\"          \n[2191] \"cargo_2035_27001fd9\"           \"cargo_2035_27002201\"          \n[2193] \"cargo_2035_27003cd3\"           \"cargo_2035_270047f4\"          \n[2195] \"cargo_2035_27005cba\"           \"cargo_2035_27006851\"          \n[2197] \"cargo_2035_2700770f\"           \"cargo_2035_2700842e\"          \n[2199] \"cargo_2035_27009220\"           \"cargo_2035_27010339\"          \n[2201] \"cargo_2035_27011b37\"           \"cargo_2035_2701256b\"          \n[2203] \"cargo_2035_27013019\"           \"cargo_2035_270142da\"          \n[2205] \"cargo_2035_270153a1\"           \"cargo_2035_2701660a\"          \n[2207] \"cargo_2035_270175ec\"           \"cargo_2035_27018e28\"          \n[2209] \"cargo_2035_2701951c\"           \"cargo_2035_27020f54\"          \n[2211] \"cargo_2035_270216fc\"           \"cargo_2035_2702236e\"          \n[2213] \"cargo_2035_27023cb7\"           \"cargo_2035_27024e87\"          \n[2215] \"cargo_2035_27025135\"           \"cargo_2035_27026ccc\"          \n[2217] \"cargo_2035_270275e0\"           \"cargo_2035_27028ac4\"          \n[2219] \"cargo_2035_270294d8\"           \"cargo_2035_27030e75\"          \n[2221] \"cargo_2035_27031f7f\"           \"cargo_2035_270324c8\"          \n[2223] \"cargo_2035_270334a9\"           \"cargo_2035_27034619\"          \n[2225] \"cargo_2035_270350bb\"           \"cargo_2035_2703667d\"          \n[2227] \"cargo_2035_2703752e\"           \"cargo_2035_27038e62\"          \n[2229] \"cargo_2035_27039903\"           \"cargo_2035_27040656\"          \n[2231] \"cargo_2035_27041e02\"           \"cargo_2035_27042961\"          \n[2233] \"cargo_2035_27043007\"           \"cargo_2035_270446ae\"          \n[2235] \"cargo_2035_27045b8b\"           \"cargo_2035_2704611b\"          \n[2237] \"cargo_2035_27047822\"           \"cargo_2035_27048863\"          \n[2239] \"cargo_2035_27049839\"           \"cargo_2035_27050989\"          \n[2241] \"cargo_2035_270515ec\"           \"cargo_2035_27052574\"          \n[2243] \"cargo_2035_27053527\"           \"cargo_2035_270544e2\"          \n[2245] \"cargo_2035_27057aaf\"           \"cargo_2035_270633eb\"          \n[2247] \"cargo_2035_27064f1d\"           \"cargo_2035_27065105\"          \n[2249] \"cargo_2035_27066076\"           \"cargo_2035_27067848\"          \n[2251] \"cargo_2035_270688a2\"           \"cargo_2035_2706971d\"          \n[2253] \"cargo_2035_27070385\"           \"cargo_2035_27071b81\"          \n[2255] \"cargo_2035_27072f8c\"           \"cargo_2035_2707320e\"          \n[2257] \"cargo_2035_270749d7\"           \"cargo_2035_270753d0\"          \n[2259] \"cargo_2035_27076a95\"           \"cargo_2035_27077f91\"          \n[2261] \"cargo_2035_27078659\"           \"cargo_2035_27079fe8\"          \n[2263] \"cargo_2035_27080b4f\"           \"cargo_2035_27085cdf\"          \n[2265] \"cargo_2035_27091de7\"           \"cargo_2035_27092495\"          \n[2267] \"cargo_2035_2709398c\"           \"cargo_2035_270944f3\"          \n[2269] \"cargo_2035_27095461\"           \"cargo_2035_27096cbb\"          \n[2271] \"cargo_2035_2709769d\"           \"cargo_2035_27098d08\"          \n[2273] \"cargo_2035_27099281\"           \"cargo_2035_271002fa\"          \n[2275] \"cargo_2035_27101746\"           \"cargo_2035_271025fb\"          \n[2277] \"cargo_2035_27103e73\"           \"cargo_2035_271047fc\"          \n[2279] \"cargo_2035_27105f51\"           \"cargo_2035_27107ae5\"          \n[2281] \"cargo_2035_27109bf2\"           \"cargo_2035_2711170e\"          \n[2283] \"cargo_2035_27112e17\"           \"cargo_2035_27113ba5\"          \n[2285] \"cargo_2035_2711442a\"           \"cargo_2035_27115952\"          \n[2287] \"cargo_2035_271160b5\"           \"cargo_2035_271181c0\"          \n[2289] \"cargo_2035_271190c5\"           \"cargo_2035_2712040b\"          \n[2291] \"cargo_2035_27132753\"           \"cargo_2035_2713336b\"          \n[2293] \"cargo_2035_27134dc7\"           \"cargo_2035_27135850\"          \n[2295] \"cargo_2035_27136743\"           \"cargo_2035_27137373\"          \n[2297] \"cargo_2035_27138ada\"           \"cargo_2035_271414fb\"          \n[2299] \"cargo_2035_2714484d\"           \"cargo_2035_27145019\"          \n[2301] \"cargo_2035_2714637e\"           \"cargo_2035_2714742a\"          \n[2303] \"cargo_2035_271481f4\"           \"cargo_2035_27154bd0\"          \n[2305] \"cargo_2035_27156d7f\"           \"cargo_2035_271584f3\"          \n[2307] \"cargo_2035_27159476\"           \"cargo_2035_2716044e\"          \n[2309] \"cargo_2035_271619b3\"           \"cargo_2035_27162a72\"          \n[2311] \"cargo_2035_271635a9\"           \"cargo_2035_271645f8\"          \n[2313] \"cargo_2035_27166b4f\"           \"cargo_2035_27167a4e\"          \n[2315] \"cargo_2035_2716972e\"           \"cargo_2035_27170a6b\"          \n[2317] \"cargo_2035_2717130b\"           \"cargo_2035_27172c1a\"          \n[2319] \"cargo_2035_271736b0\"           \"cargo_2035_27174ca1\"          \n[2321] \"cargo_2035_27175623\"           \"cargo_2035_27176465\"          \n[2323] \"cargo_2035_27177a3d\"           \"cargo_2035_27185855\"          \n[2325] \"cargo_2035_27186030\"           \"cargo_2035_2718772b\"          \n[2327] \"cargo_2035_27188adf\"           \"cargo_2035_271890a9\"          \n[2329] \"cargo_2035_27190a75\"           \"cargo_2035_2719160a\"          \n[2331] \"cargo_2035_27192a4b\"           \"cargo_2035_271937d4\"          \n[2333] \"cargo_2035_27194e83\"           \"cargo_2035_27196c40\"          \n[2335] \"cargo_2035_27207bf9\"           \"cargo_2035_27208c94\"          \n[2337] \"cargo_2035_27209c03\"           \"cargo_2035_272100d7\"          \n[2339] \"cargo_2035_272116eb\"           \"cargo_2035_272121e1\"          \n[2341] \"cargo_2035_272137ca\"           \"cargo_2035_27214364\"          \n[2343] \"cargo_2035_27215887\"           \"cargo_2035_272162a0\"          \n[2345] \"cargo_2035_27217104\"           \"cargo_2035_272188cc\"          \n[2347] \"cargo_2035_2721922a\"           \"cargo_2035_2722068b\"          \n[2349] \"cargo_2035_272210c7\"           \"cargo_2035_27222d62\"          \n[2351] \"cargo_2035_27223098\"           \"cargo_2035_27224e79\"          \n[2353] \"cargo_2035_272250fb\"           \"cargo_2035_272263ef\"          \n[2355] \"cargo_2035_27227813\"           \"cargo_2035_27228a03\"          \n[2357] \"cargo_2035_27229356\"           \"cargo_2035_27234101\"          \n[2359] \"cargo_2035_272459a5\"           \"cargo_2035_27250292\"          \n[2361] \"cargo_2035_27251744\"           \"cargo_2035_27252295\"          \n[2363] \"cargo_2035_2725356a\"           \"cargo_2035_27254eea\"          \n[2365] \"cargo_2035_27255be6\"           \"cargo_2035_27256a4d\"          \n[2367] \"cargo_2035_27257191\"           \"cargo_2035_272589e6\"          \n[2369] \"cargo_2035_27259fbe\"           \"cargo_2035_27260cb3\"          \n[2371] \"cargo_2035_27261600\"           \"cargo_2035_2726272f\"          \n[2373] \"cargo_2035_27263231\"           \"cargo_2035_272641b7\"          \n[2375] \"cargo_2035_272650a0\"           \"cargo_2035_27266d43\"          \n[2377] \"cargo_2035_27267d5b\"           \"cargo_2035_27268a74\"          \n[2379] \"cargo_2035_27269fc6\"           \"cargo_2035_27270447\"          \n[2381] \"cargo_2035_27271c71\"           \"cargo_2035_27272043\"          \n[2383] \"cargo_2035_272735a5\"           \"cargo_2035_27274caa\"          \n[2385] \"cargo_2035_272754f0\"           \"cargo_2035_272765c6\"          \n[2387] \"cargo_2035_27277628\"           \"cargo_2035_272780ff\"          \n[2389] \"cargo_2035_2727994c\"           \"cargo_2035_27280625\"          \n[2391] \"cargo_2035_2728187d\"           \"cargo_2035_27282d6f\"          \n[2393] \"cargo_2035_272830a1\"           \"cargo_2035_272849ac\"          \n[2395] \"cargo_2035_27285603\"           \"cargo_2035_27286c6c\"          \n[2397] \"cargo_2035_27287ca2\"           \"cargo_2035_27288e8b\"          \n[2399] \"cargo_2035_27289b4a\"           \"cargo_2035_27290dcd\"          \n[2401] \"cargo_2035_27291477\"           \"cargo_2035_272927be\"          \n[2403] \"cargo_2035_27293c2c\"           \"cargo_2035_272946d9\"          \n[2405] \"cargo_2035_27295c68\"           \"cargo_2035_27296778\"          \n[2407] \"cargo_2035_272973af\"           \"cargo_2035_27298900\"          \n[2409] \"cargo_2035_2729965c\"           \"cargo_2035_27300143\"          \n[2411] \"cargo_2035_27301f2f\"           \"cargo_2035_27302f29\"          \n[2413] \"cargo_2035_273032d0\"           \"cargo_2035_273049b6\"          \n[2415] \"cargo_2035_27305685\"           \"cargo_2035_27309e82\"          \n[2417] \"cargo_2035_27320b3a\"           \"cargo_2035_27326d2f\"          \n[2419] \"cargo_2035_2732737e\"           \"cargo_2035_2732826c\"          \n[2421] \"cargo_2035_273311f1\"           \"cargo_2035_27332287\"          \n[2423] \"cargo_2035_2733370f\"           \"cargo_2035_27335c02\"          \n[2425] \"cargo_2035_27340edb\"           \"cargo_2035_27346b96\"          \n[2427] \"cargo_2035_27347e06\"           \"cargo_2035_273480fc\"          \n[2429] \"cargo_2035_27349631\"           \"cargo_2035_273507c5\"          \n[2431] \"cargo_2035_27351731\"           \"cargo_2035_27352863\"          \n[2433] \"cargo_2035_27353ffc\"           \"cargo_2035_273540ab\"          \n[2435] \"cargo_2035_27355d69\"           \"cargo_2035_273566d4\"          \n[2437] \"cargo_2035_2735706f\"           \"cargo_2035_2736081e\"          \n[2439] \"cargo_2035_273610e1\"           \"cargo_2035_27362be3\"          \n[2441] \"cargo_2035_27364275\"           \"cargo_2035_2736581e\"          \n[2443] \"cargo_2035_27366912\"           \"cargo_2035_27367bbb\"          \n[2445] \"cargo_2035_273681d8\"           \"cargo_2035_2736949e\"          \n[2447] \"cargo_2035_27370eb6\"           \"cargo_2035_27371ad7\"          \n[2449] \"cargo_2035_27372167\"           \"cargo_2035_27373fc8\"          \n[2451] \"cargo_2035_27374c41\"           \"cargo_2035_27375e72\"          \n[2453] \"cargo_2035_27376018\"           \"cargo_2035_27377035\"          \n[2455] \"cargo_2035_27378ce1\"           \"cargo_2035_273798b3\"          \n[2457] \"cargo_2035_2738003c\"           \"cargo_2035_27381636\"          \n[2459] \"cargo_2035_27382134\"           \"cargo_2035_27383ddd\"          \n[2461] \"cargo_2035_27384289\"           \"cargo_2035_273858c4\"          \n[2463] \"cargo_2035_27386013\"           \"cargo_2035_2738731f\"          \n[2465] \"cargo_2035_27388697\"           \"cargo_2035_27389cfa\"          \n[2467] \"cargo_2035_27390510\"           \"cargo_2035_27391972\"          \n[2469] \"cargo_2035_27392d8b\"           \"cargo_2035_27393af7\"          \n[2471] \"cargo_2035_27394837\"           \"cargo_2035_27395001\"          \n[2473] \"cargo_2035_27396cbb\"           \"cargo_2035_2739773a\"          \n[2475] \"cargo_2035_27398ccb\"           \"cargo_2035_273998db\"          \n[2477] \"cargo_2035_2740052a\"           \"cargo_2035_27401842\"          \n[2479] \"cargo_2035_274020f7\"           \"cargo_2035_27403a5a\"          \n[2481] \"cargo_2035_27404686\"           \"cargo_2035_27405cd8\"          \n[2483] \"cargo_2035_274065d1\"           \"cargo_2035_27407386\"          \n[2485] \"cargo_2035_27408dab\"           \"cargo_2035_27409caa\"          \n[2487] \"cargo_2035_27410dbb\"           \"cargo_2035_2741109c\"          \n[2489] \"cargo_2035_27412b96\"           \"cargo_2035_27413e55\"          \n[2491] \"cargo_2035_27414728\"           \"cargo_2035_27415131\"          \n[2493] \"cargo_2035_27419e0e\"           \"cargo_2035_27424c6b\"          \n[2495] \"cargo_2035_27425936\"           \"cargo_2035_27426b30\"          \n[2497] \"cargo_2035_27427d95\"           \"cargo_2035_27428e6d\"          \n[2499] \"cargo_2035_27429ba1\"           \"cargo_2035_27432c75\"          \n[2501] \"cargo_2035_274334c7\"           \"cargo_2035_27434b24\"          \n[2503] \"cargo_2035_27438297\"           \"cargo_2035_27443ada\"          \n[2505] \"cargo_2035_27444cb0\"           \"cargo_2035_274479d0\"          \n[2507] \"cargo_2035_27448e4a\"           \"cargo_2035_274509d0\"          \n[2509] \"cargo_2035_27451b0f\"           \"cargo_2035_27452dad\"          \n[2511] \"cargo_2035_274530c1\"           \"cargo_2035_27454b61\"          \n[2513] \"cargo_2035_2745588c\"           \"cargo_2035_27456e7c\"          \n[2515] \"cargo_2035_2745721b\"           \"cargo_2035_27458ed6\"          \n[2517] \"cargo_2035_27459289\"           \"cargo_2035_274604b8\"          \n[2519] \"cargo_2035_27461954\"           \"cargo_2035_27462513\"          \n[2521] \"cargo_2035_2746385a\"           \"cargo_2035_27464d5a\"          \n[2523] \"cargo_2035_27465d36\"           \"cargo_2035_27466ccf\"          \n[2525] \"cargo_2035_27467bc3\"           \"cargo_2035_27468581\"          \n[2527] \"cargo_2035_27469a17\"           \"cargo_2035_27470bb1\"          \n[2529] \"cargo_2035_27471938\"           \"cargo_2035_274729db\"          \n[2531] \"cargo_2035_27473b2d\"           \"cargo_2035_274740f1\"          \n[2533] \"cargo_2035_274754f6\"           \"cargo_2035_27476713\"          \n[2535] \"cargo_2035_274772f4\"           \"cargo_2035_2747885b\"          \n[2537] \"cargo_2035_2747971a\"           \"cargo_2035_27480e07\"          \n[2539] \"cargo_2035_274810ef\"           \"cargo_2035_2748239a\"          \n[2541] \"cargo_2035_27483b37\"           \"cargo_2035_274843dc\"          \n[2543] \"cargo_2035_2748502e\"           \"cargo_2035_27486d56\"          \n[2545] \"cargo_2035_274877d1\"           \"cargo_2035_27488a52\"          \n[2547] \"cargo_2035_27489a0c\"           \"cargo_2035_27490c6e\"          \n[2549] \"cargo_2035_27491387\"           \"cargo_2035_274929b8\"          \n[2551] \"cargo_2035_27493b8c\"           \"cargo_2035_27494e07\"          \n[2553] \"cargo_2035_27495634\"           \"cargo_2035_27496aac\"          \n[2555] \"cargo_2035_27497c8c\"           \"cargo_2035_274982b5\"          \n[2557] \"cargo_2035_27499723\"           \"cargo_2035_27500a7f\"          \n[2559] \"cargo_2035_275010f4\"           \"cargo_2035_275028bb\"          \n[2561] \"cargo_2035_27503ba2\"           \"cargo_2035_27504c74\"          \n[2563] \"cargo_2035_275058b8\"           \"cargo_2035_27506c1b\"          \n[2565] \"cargo_2035_27507939\"           \"cargo_2035_27508c43\"          \n[2567] \"cargo_2035_275099e2\"           \"cargo_2035_27510f7a\"          \n[2569] \"cargo_2035_275117eb\"           \"cargo_2035_275122f9\"          \n[2571] \"cargo_2035_27513257\"           \"cargo_2035_27514970\"          \n[2573] \"cargo_2035_27515fae\"           \"cargo_2035_27516bce\"          \n[2575] \"cargo_2035_27517c06\"           \"cargo_2035_27518a5f\"          \n[2577] \"cargo_2035_27528153\"           \"cargo_2035_27529881\"          \n[2579] \"cargo_2035_27532651\"           \"cargo_2035_27533955\"          \n[2581] \"cargo_2035_2753471b\"           \"cargo_2035_275354d7\"          \n[2583] \"cargo_2035_27537a81\"           \"cargo_2035_27541172\"          \n[2585] \"cargo_2035_2754616c\"           \"cargo_2035_27547614\"          \n[2587] \"cargo_2035_27548e3e\"           \"cargo_2035_2754979e\"          \n[2589] \"cargo_2035_27550617\"           \"cargo_2035_2755268e\"          \n[2591] \"cargo_2035_27554b3f\"           \"cargo_2035_2755556c\"          \n[2593] \"cargo_2035_275566f2\"           \"cargo_2035_27557511\"          \n[2595] \"cargo_2035_2755880b\"           \"cargo_2035_27559c28\"          \n[2597] \"cargo_2035_27560f09\"           \"cargo_2035_27561ff4\"          \n[2599] \"cargo_2035_2756251f\"           \"cargo_2035_2756351e\"          \n[2601] \"cargo_2035_27565c33\"           \"cargo_2035_275665e0\"          \n[2603] \"cargo_2035_2756784f\"           \"cargo_2035_27568e5d\"          \n[2605] \"cargo_2035_275696fd\"           \"cargo_2035_2757044a\"          \n[2607] \"cargo_2035_275712ec\"           \"cargo_2035_27572a45\"          \n[2609] \"cargo_2035_275734cc\"           \"cargo_2035_275748a6\"          \n[2611] \"cargo_2035_27576410\"           \"cargo_2035_27577be1\"          \n[2613] \"cargo_2035_27578e87\"           \"cargo_2035_27579c76\"          \n[2615] \"cargo_2035_27580a4a\"           \"cargo_2035_27581f9f\"          \n[2617] \"cargo_2035_27582038\"           \"cargo_2035_27583715\"          \n[2619] \"cargo_2035_27584f66\"           \"cargo_2035_275856f2\"          \n[2621] \"cargo_2035_27587fe5\"           \"cargo_2035_275887ca\"          \n[2623] \"cargo_2035_27589fdc\"           \"cargo_2035_275900e9\"          \n[2625] \"cargo_2035_27591683\"           \"cargo_2035_27592e9e\"          \n[2627] \"cargo_2035_2759395c\"           \"cargo_2035_27594d13\"          \n[2629] \"cargo_2035_27595ed3\"           \"cargo_2035_275967e6\"          \n[2631] \"cargo_2035_275987f2\"           \"cargo_2035_27599f05\"          \n[2633] \"cargo_2035_276001b7\"           \"cargo_2035_27601dca\"          \n[2635] \"cargo_2035_27602f19\"           \"cargo_2035_27603b66\"          \n[2637] \"cargo_2035_27604f33\"           \"cargo_2035_27605520\"          \n[2639] \"cargo_2035_27606f3c\"           \"cargo_2035_276073f3\"          \n[2641] \"cargo_2035_2760926b\"           \"cargo_2035_27610861\"          \n[2643] \"cargo_2035_27611f27\"           \"cargo_2035_27612492\"          \n[2645] \"cargo_2035_27613ee5\"           \"cargo_2035_27614127\"          \n[2647] \"cargo_2035_27615b38\"           \"cargo_2035_27616be5\"          \n[2649] \"cargo_2035_276173c7\"           \"cargo_2035_276187fe\"          \n[2651] \"cargo_2035_27620fc3\"           \"cargo_2035_2762171e\"          \n[2653] \"cargo_2035_27622a63\"           \"cargo_2035_27623ee3\"          \n[2655] \"cargo_2035_2762482e\"           \"cargo_2035_27625b9e\"          \n[2657] \"cargo_2035_27626b7f\"           \"cargo_2035_276278c7\"          \n[2659] \"cargo_2035_27628367\"           \"cargo_2035_27629d4c\"          \n[2661] \"cargo_2035_27631aa1\"           \"cargo_2035_2763212b\"          \n[2663] \"cargo_2035_27633ab1\"           \"cargo_2035_27635493\"          \n[2665] \"cargo_2035_276368a0\"           \"cargo_2035_2763705c\"          \n[2667] \"cargo_2035_27638692\"           \"cargo_2035_2763972f\"          \n[2669] \"cargo_2035_27640d67\"           \"cargo_2035_27641289\"          \n[2671] \"cargo_2035_276426df\"           \"cargo_2035_276437b3\"          \n[2673] \"cargo_2035_27644762\"           \"cargo_2035_27645875\"          \n[2675] \"cargo_2035_27646428\"           \"cargo_2035_27647b6b\"          \n[2677] \"cargo_2035_27648c7b\"           \"cargo_2035_2764918f\"          \n[2679] \"cargo_2035_2765064f\"           \"cargo_2035_27651a0f\"          \n[2681] \"cargo_2035_27652b54\"           \"cargo_2035_27653e3d\"          \n[2683] \"cargo_2035_27654690\"           \"cargo_2035_27655081\"          \n[2685] \"cargo_2035_276566d1\"           \"cargo_2035_27657b6c\"          \n[2687] \"cargo_2035_27658494\"           \"cargo_2035_276599dd\"          \n[2689] \"cargo_2035_27660d39\"           \"cargo_2035_27661966\"          \n[2691] \"cargo_2035_27662a42\"           \"cargo_2035_276630b4\"          \n[2693] \"cargo_2035_2766434f\"           \"cargo_2035_27665b0f\"          \n[2695] \"cargo_2035_276661e4\"           \"cargo_2035_2766785e\"          \n[2697] \"cargo_2035_27668ded\"           \"cargo_2035_27669b28\"          \n[2699] \"cargo_2035_27670033\"           \"cargo_2035_27671ab8\"          \n[2701] \"cargo_2035_27672e33\"           \"cargo_2035_27673078\"          \n[2703] \"cargo_2035_27674b84\"           \"cargo_2035_276754d4\"          \n[2705] \"cargo_2035_276767bb\"           \"cargo_2035_276770f7\"          \n[2707] \"cargo_2035_276783f8\"           \"cargo_2035_276799bc\"          \n[2709] \"cargo_2035_276800eb\"           \"cargo_2035_27681a11\"          \n[2711] \"cargo_2035_27682afc\"           \"cargo_2035_2768329d\"          \n[2713] \"cargo_2035_2768406f\"           \"cargo_2035_276851a1\"          \n[2715] \"cargo_2035_276869b4\"           \"cargo_2035_27687904\"          \n[2717] \"cargo_2035_27688cdf\"           \"cargo_2035_27689295\"          \n[2719] \"cargo_2035_27690ab3\"           \"cargo_2035_2769154b\"          \n[2721] \"cargo_2035_27692095\"           \"cargo_2035_2769311b\"          \n[2723] \"cargo_2035_27694013\"           \"cargo_2035_27695e0a\"          \n[2725] \"cargo_2035_27696962\"           \"cargo_2035_27697d57\"          \n[2727] \"cargo_2035_27698b5c\"           \"cargo_2035_27699b7e\"          \n[2729] \"cargo_2035_27700fac\"           \"cargo_2035_27701110\"          \n[2731] \"cargo_2035_27702cb4\"           \"cargo_2035_27703053\"          \n[2733] \"cargo_2035_27704172\"           \"cargo_2035_27705adb\"          \n[2735] \"cargo_2035_2770686f\"           \"cargo_2035_27707ea0\"          \n[2737] \"cargo_2035_277085d8\"           \"cargo_2035_27709e24\"          \n[2739] \"cargo_2035_277103ab\"           \"cargo_2035_277115c5\"          \n[2741] \"cargo_2035_27712d33\"           \"cargo_2035_27713e43\"          \n[2743] \"cargo_2035_27714827\"           \"cargo_2035_277156cc\"          \n[2745] \"cargo_2035_27716c6c\"           \"cargo_2035_277172c8\"          \n[2747] \"cargo_2035_2771888e\"           \"cargo_2035_27723e32\"          \n[2749] \"cargo_2035_277307fe\"           \"cargo_2035_2773233d\"          \n[2751] \"cargo_2035_2773395b\"           \"cargo_2035_2773423f\"          \n[2753] \"cargo_2035_277352c9\"           \"cargo_2035_27737270\"          \n[2755] \"cargo_2035_27738fec\"           \"cargo_2035_27739bda\"          \n[2757] \"cargo_2035_277417b1\"           \"cargo_2035_27742fda\"          \n[2759] \"cargo_2035_27743b04\"           \"cargo_2035_2774568c\"          \n[2761] \"cargo_2035_27747557\"           \"cargo_2035_277493ad\"          \n[2763] \"cargo_2035_27758c78\"           \"cargo_2035_27759234\"          \n[2765] \"cargo_2035_27760381\"           \"cargo_2035_27761f29\"          \n[2767] \"cargo_2035_277626be\"           \"cargo_2035_277631cd\"          \n[2769] \"cargo_2035_2776497d\"           \"cargo_2035_27765672\"          \n[2771] \"cargo_2035_2776649b\"           \"cargo_2035_27769102\"          \n[2773] \"cargo_2035_27771a6a\"           \"cargo_2035_27773f51\"          \n[2775] \"cargo_2035_27774770\"           \"cargo_2035_27775d9b\"          \n[2777] \"cargo_2035_27776cf7\"           \"cargo_2035_27777176\"          \n[2779] \"cargo_2035_27778be3\"           \"cargo_2035_2778097e\"          \n[2781] \"cargo_2035_27781f41\"           \"cargo_2035_27788ead\"          \n[2783] \"cargo_2035_2778947a\"           \"cargo_2035_27790895\"          \n[2785] \"cargo_2035_2779177f\"           \"cargo_2035_277920ff\"          \n[2787] \"cargo_2035_27793873\"           \"cargo_2035_27794891\"          \n[2789] \"cargo_2035_277951a7\"           \"cargo_2035_27796dec\"          \n[2791] \"cargo_2035_27797f51\"           \"cargo_2035_277984ff\"          \n[2793] \"cargo_2035_27799772\"           \"cargo_2035_27800528\"          \n[2795] \"cargo_2035_27801a5e\"           \"cargo_2035_27802e52\"          \n[2797] \"cargo_2035_27803837\"           \"cargo_2035_27804dc7\"          \n[2799] \"cargo_2035_27805373\"           \"cargo_2035_278065d4\"          \n[2801] \"cargo_2035_278070bc\"           \"cargo_2035_27808a56\"          \n[2803] \"cargo_2035_278097a4\"           \"cargo_2035_27810437\"          \n[2805] \"cargo_2035_27811279\"           \"cargo_2035_27812ae5\"          \n[2807] \"cargo_2035_27813f49\"           \"cargo_2035_27814dbb\"          \n[2809] \"cargo_2035_278158ce\"           \"cargo_2035_27816ab6\"          \n[2811] \"cargo_2035_27817e33\"           \"cargo_2035_278184c3\"          \n[2813] \"cargo_2035_278194c4\"           \"cargo_2035_27820a1a\"          \n[2815] \"cargo_2035_27821b1c\"           \"cargo_2035_27822c33\"          \n[2817] \"cargo_2035_27823265\"           \"cargo_2035_27824da1\"          \n[2819] \"cargo_2035_27825827\"           \"cargo_2035_27826228\"          \n[2821] \"cargo_2035_27827a16\"           \"cargo_2035_27828ffa\"          \n[2823] \"cargo_2035_27829110\"           \"cargo_2035_2783053a\"          \n[2825] \"cargo_2035_27831f8d\"           \"cargo_2035_27832bd7\"          \n[2827] \"cargo_2035_2783309b\"           \"cargo_2035_27834e1b\"          \n[2829] \"cargo_2035_27835938\"           \"cargo_2035_27843d26\"          \n[2831] \"cargo_2035_27846940\"           \"cargo_2035_278479e2\"          \n[2833] \"cargo_2035_27848e77\"           \"cargo_2035_27849bbb\"          \n[2835] \"cargo_2035_2785059e\"           \"cargo_2035_27851415\"          \n[2837] \"cargo_2035_27852e31\"           \"cargo_2035_278534d4\"          \n[2839] \"cargo_2035_27854918\"           \"cargo_2035_278615ec\"          \n[2841] \"cargo_2035_27867bb5\"           \"cargo_2035_27869087\"          \n[2843] \"cargo_2035_27871cb7\"           \"cargo_2035_27873d7d\"          \n[2845] \"cargo_2035_27875365\"           \"cargo_2035_27877bfa\"          \n[2847] \"cargo_2035_27882e60\"           \"cargo_2035_27883c31\"          \n[2849] \"cargo_2035_2788408b\"           \"cargo_2035_27885ed2\"          \n[2851] \"cargo_2035_27886456\"           \"cargo_2035_27887a60\"          \n[2853] \"cargo_2035_278887e9\"           \"cargo_2035_278892bb\"          \n[2855] \"cargo_2035_27890a5f\"           \"cargo_2035_278916d8\"          \n[2857] \"cargo_2035_27893eee\"           \"cargo_2035_278946b7\"          \n[2859] \"cargo_2035_27895231\"           \"cargo_2035_27896f85\"          \n[2861] \"cargo_2035_278978da\"           \"cargo_2035_27898201\"          \n[2863] \"cargo_2035_27906f30\"           \"cargo_2035_27909784\"          \n[2865] \"cargo_2035_27910a64\"           \"cargo_2035_27911e0c\"          \n[2867] \"cargo_2035_27912d20\"           \"cargo_2035_27914c15\"          \n[2869] \"cargo_2035_27915bd2\"           \"cargo_2035_27917ddf\"          \n[2871] \"cargo_2035_27919414\"           \"cargo_2035_279215dc\"          \n[2873] \"cargo_2035_27923e81\"           \"cargo_2035_27924f1f\"          \n[2875] \"cargo_2035_27925e32\"           \"cargo_2035_2792611c\"          \n[2877] \"cargo_2035_27927fed\"           \"cargo_2035_27928019\"          \n[2879] \"cargo_2035_27931dc2\"           \"cargo_2035_279329aa\"          \n[2881] \"cargo_2035_27934a9a\"           \"cargo_2035_279352a3\"          \n[2883] \"cargo_2035_279377dc\"           \"cargo_2035_27938d37\"          \n[2885] \"cargo_2035_279418dc\"           \"cargo_2035_27942002\"          \n[2887] \"cargo_2035_27945cb3\"           \"cargo_2035_27946e6b\"          \n[2889] \"cargo_2035_27948535\"           \"cargo_2035_2795207a\"          \n[2891] \"cargo_2035_27953b64\"           \"cargo_2035_27954309\"          \n[2893] \"cargo_2035_2795555c\"           \"cargo_2035_27956e39\"          \n[2895] \"cargo_2035_27958d1d\"           \"cargo_2035_2795952c\"          \n[2897] \"cargo_2035_27960276\"           \"cargo_2035_2796180b\"          \n[2899] \"cargo_2035_27962f56\"           \"cargo_2035_2796370e\"          \n[2901] \"cargo_2035_279654cc\"           \"cargo_2035_27967431\"          \n[2903] \"cargo_2035_27968e56\"           \"cargo_2035_27969133\"          \n[2905] \"cargo_2035_279708b8\"           \"cargo_2035_279719b7\"          \n[2907] \"cargo_2035_27976280\"           \"cargo_2035_279782b2\"          \n[2909] \"cargo_2035_279793a7\"           \"cargo_2035_279807eb\"          \n[2911] \"cargo_2035_279810c7\"           \"cargo_2035_27982bab\"          \n[2913] \"cargo_2035_27983c11\"           \"cargo_2035_279843af\"          \n[2915] \"cargo_2035_279859e0\"           \"cargo_2035_27986589\"          \n[2917] \"cargo_2035_279873bb\"           \"cargo_2035_279881cc\"          \n[2919] \"cargo_2035_2798901c\"           \"cargo_2035_27990fb1\"          \n[2921] \"cargo_2035_27991e2e\"           \"cargo_2035_27992fd7\"          \n[2923] \"cargo_2035_279937eb\"           \"cargo_2035_27994f4b\"          \n[2925] \"cargo_2035_27995a4b\"           \"cargo_2035_27996833\"          \n[2927] \"cargo_2035_27997b33\"           \"cargo_2035_27998afe\"          \n[2929] \"cargo_2035_279996df\"           \"cargo_2035_28000476\"          \n[2931] \"cargo_2035_280014d5\"           \"cargo_2035_280027f9\"          \n[2933] \"cargo_2035_2800334d\"           \"cargo_2035_280044d9\"          \n[2935] \"cargo_2035_2800569c\"           \"cargo_2035_28006a7d\"          \n[2937] \"cargo_2035_28007a33\"           \"cargo_2035_2800836a\"          \n[2939] \"cargo_2035_28009041\"           \"cargo_2035_280109ee\"          \n[2941] \"cargo_2035_2801156f\"           \"cargo_2035_280121f4\"          \n[2943] \"cargo_2035_28013c9c\"           \"cargo_2035_2801447b\"          \n[2945] \"cargo_2035_28015cf9\"           \"cargo_2035_280160af\"          \n[2947] \"cargo_2035_2801721a\"           \"cargo_2035_28018c74\"          \n[2949] \"cargo_2035_28019053\"           \"cargo_2035_28020d07\"          \n[2951] \"cargo_2035_28021b14\"           \"cargo_2035_28022bfa\"          \n[2953] \"cargo_2035_28023e72\"           \"cargo_2035_280248e7\"          \n[2955] \"cargo_2035_28025623\"           \"cargo_2035_28026892\"          \n[2957] \"cargo_2035_28027463\"           \"cargo_2035_280288df\"          \n[2959] \"cargo_2035_2802936c\"           \"cargo_2035_28030c52\"          \n[2961] \"cargo_2035_28032840\"           \"cargo_2035_28033d6d\"          \n[2963] \"cargo_2035_28034622\"           \"cargo_2035_28035141\"          \n[2965] \"cargo_2035_28036bdd\"           \"cargo_2035_28037a4c\"          \n[2967] \"cargo_2035_28038a0d\"           \"cargo_2035_28039dda\"          \n[2969] \"cargo_2035_28040bb2\"           \"cargo_2035_28044392\"          \n[2971] \"cargo_2035_28045f8a\"           \"cargo_2035_28056c42\"          \n[2973] \"cargo_2035_28065342\"           \"cargo_2035_28066b69\"          \n[2975] \"cargo_2035_28067de6\"           \"cargo_2035_2806869a\"          \n[2977] \"cargo_2035_28069dcc\"           \"cargo_2035_2807091b\"          \n[2979] \"cargo_2035_28071c55\"           \"cargo_2035_28072952\"          \n[2981] \"cargo_2035_28073c8d\"           \"cargo_2035_2807479d\"          \n[2983] \"cargo_2035_28075556\"           \"cargo_2035_28076174\"          \n[2985] \"cargo_2035_2807721c\"           \"cargo_2035_28078681\"          \n[2987] \"cargo_2035_28079623\"           \"cargo_2035_280802ce\"          \n[2989] \"cargo_2035_28081952\"           \"cargo_2035_2808294f\"          \n[2991] \"cargo_2035_28083917\"           \"cargo_2035_2808436d\"          \n[2993] \"cargo_2035_28085edd\"           \"cargo_2035_28086dc7\"          \n[2995] \"cargo_2035_2808741b\"           \"cargo_2035_28088a6e\"          \n[2997] \"cargo_2035_28089e02\"           \"cargo_2035_28090be2\"          \n[2999] \"cargo_2035_28091df5\"           \"cargo_2035_28092930\"          \n[3001] \"cargo_2035_28093f5e\"           \"cargo_2035_28094373\"          \n[3003] \"cargo_2035_2809595e\"           \"cargo_2035_28096431\"          \n[3005] \"cargo_2035_28097bde\"           \"cargo_2035_28098db9\"          \n[3007] \"cargo_2035_28099adf\"           \"cargo_2035_28100e56\"          \n[3009] \"cargo_2035_281018b5\"           \"cargo_2035_281023a1\"          \n[3011] \"cargo_2035_28103c51\"           \"cargo_2035_28104711\"          \n[3013] \"cargo_2035_28105b05\"           \"cargo_2035_28106a99\"          \n[3015] \"cargo_2035_28107862\"           \"cargo_2035_28108922\"          \n[3017] \"cargo_2035_281099ec\"           \"cargo_2035_2811013b\"          \n[3019] \"cargo_2035_281110da\"           \"cargo_2035_281127fd\"          \n[3021] \"cargo_2035_281138c1\"           \"cargo_2035_2811483d\"          \n[3023] \"cargo_2035_281159ae\"           \"cargo_2035_28116aa2\"          \n[3025] \"cargo_2035_2811700d\"           \"cargo_2035_28118d3f\"          \n[3027] \"cargo_2035_28119e25\"           \"cargo_2035_2812071d\"          \n[3029] \"cargo_2035_28121cd6\"           \"cargo_2035_28122897\"          \n[3031] \"cargo_2035_2812332d\"           \"cargo_2035_28124c5b\"          \n[3033] \"cargo_2035_28125352\"           \"cargo_2035_28126af7\"          \n[3035] \"cargo_2035_281277c7\"           \"cargo_2035_2812892d\"          \n[3037] \"cargo_2035_281299ad\"           \"cargo_2035_281306c9\"          \n[3039] \"cargo_2035_2813198d\"           \"cargo_2035_281324f7\"          \n[3041] \"cargo_2035_28133c56\"           \"cargo_2035_281340f0\"          \n[3043] \"cargo_2035_281357e4\"           \"cargo_2035_2813617d\"          \n[3045] \"cargo_2035_28137a66\"           \"cargo_2035_28138762\"          \n[3047] \"cargo_2035_2813937d\"           \"cargo_2035_2814013f\"          \n[3049] \"cargo_2035_28141e9c\"           \"cargo_2035_28142948\"          \n[3051] \"cargo_2035_2814310b\"           \"cargo_2035_28144e02\"          \n[3053] \"cargo_2035_28145c36\"           \"cargo_2035_28146de9\"          \n[3055] \"cargo_2035_2814737b\"           \"cargo_2035_28148c12\"          \n[3057] \"cargo_2035_2814951a\"           \"cargo_2035_28150b10\"          \n[3059] \"cargo_2035_28151c14\"           \"cargo_2035_281529b8\"          \n[3061] \"cargo_2035_28153443\"           \"cargo_2035_281549bf\"          \n[3063] \"cargo_2035_28155e2d\"           \"cargo_2035_28156eb9\"          \n[3065] \"cargo_2035_28157fe2\"           \"cargo_2035_2815837b\"          \n[3067] \"cargo_2035_28159dea\"           \"cargo_2035_2816033b\"          \n[3069] \"cargo_2035_2816107b\"           \"cargo_2035_28170cdc\"          \n[3071] \"cargo_2035_281711e8\"           \"cargo_2035_28172868\"          \n[3073] \"cargo_2035_2817300d\"           \"cargo_2035_281749ae\"          \n[3075] \"cargo_2035_2817598d\"           \"cargo_2035_2817686c\"          \n[3077] \"cargo_2035_281773b7\"           \"cargo_2035_28178163\"          \n[3079] \"cargo_2035_28179f0c\"           \"cargo_2035_28180409\"          \n[3081] \"cargo_2035_28181aca\"           \"cargo_2035_28182442\"          \n[3083] \"cargo_2035_281846dc\"           \"cargo_2035_28185e62\"          \n[3085] \"cargo_2035_2818611e\"           \"cargo_2035_28189331\"          \n[3087] \"cargo_2035_2819034a\"           \"cargo_2035_281911c1\"          \n[3089] \"cargo_2035_28192da8\"           \"cargo_2035_2819361f\"          \n[3091] \"cargo_2035_28194839\"           \"cargo_2035_281950d9\"          \n[3093] \"cargo_2035_2819675f\"           \"cargo_2035_28197cb0\"          \n[3095] \"cargo_2035_28198c49\"           \"cargo_2035_2820006a\"          \n[3097] \"cargo_2035_2820173c\"           \"cargo_2035_2820242d\"          \n[3099] \"cargo_2035_28203854\"           \"cargo_2035_282047bd\"          \n[3101] \"cargo_2035_282057f4\"           \"cargo_2035_2820751f\"          \n[3103] \"cargo_2035_28208d10\"           \"cargo_2035_28209177\"          \n[3105] \"cargo_2035_28211269\"           \"cargo_2035_28212cc3\"          \n[3107] \"cargo_2035_28213a84\"           \"cargo_2035_282149f0\"          \n[3109] \"cargo_2035_28215b44\"           \"cargo_2035_282164f1\"          \n[3111] \"cargo_2035_282179c7\"           \"cargo_2035_282185d4\"          \n[3113] \"cargo_2035_282190c1\"           \"cargo_2035_2822008a\"          \n[3115] \"cargo_2035_28222feb\"           \"cargo_2035_28223080\"          \n[3117] \"cargo_2035_28224554\"           \"cargo_2035_28225dc1\"          \n[3119] \"cargo_2035_28226a35\"           \"cargo_2035_28227148\"          \n[3121] \"cargo_2035_282286c2\"           \"cargo_2035_2823497b\"          \n[3123] \"cargo_2035_28235740\"           \"cargo_2035_28236391\"          \n[3125] \"cargo_2035_2823725b\"           \"cargo_2035_28238364\"          \n[3127] \"cargo_2035_28239aef\"           \"cargo_2035_28240683\"          \n[3129] \"cargo_2035_2824165f\"           \"cargo_2035_28245cc8\"          \n[3131] \"cargo_2035_28250510\"           \"cargo_2035_28251e90\"          \n[3133] \"cargo_2035_282526cf\"           \"cargo_2035_28253551\"          \n[3135] \"cargo_2035_2825490c\"           \"cargo_2035_28255990\"          \n[3137] \"cargo_2035_2825633e\"           \"cargo_2035_28257492\"          \n[3139] \"cargo_2035_282587c0\"           \"cargo_2035_28259ec2\"          \n[3141] \"cargo_2035_28260acb\"           \"cargo_2035_28261173\"          \n[3143] \"cargo_2035_28262978\"           \"cargo_2035_282632c3\"          \n[3145] \"cargo_2035_2826480c\"           \"cargo_2035_282651ed\"          \n[3147] \"cargo_2035_28266815\"           \"cargo_2035_282679c4\"          \n[3149] \"cargo_2035_2826989c\"           \"cargo_2035_2827061f\"          \n[3151] \"cargo_2035_282714e0\"           \"cargo_2035_28272702\"          \n[3153] \"cargo_2035_2827366d\"           \"cargo_2035_282747ea\"          \n[3155] \"cargo_2035_28275be0\"           \"cargo_2035_282765da\"          \n[3157] \"cargo_2035_28277bd0\"           \"cargo_2035_28278c6d\"          \n[3159] \"cargo_2035_2828097c\"           \"cargo_2035_28281c90\"          \n[3161] \"cargo_2035_28282a50\"           \"cargo_2035_28283adb\"          \n[3163] \"cargo_2035_2828446e\"           \"cargo_2035_28285d0d\"          \n[3165] \"cargo_2035_2828633e\"           \"cargo_2035_28287a92\"          \n[3167] \"cargo_2035_28288e49\"           \"cargo_2035_28291134\"          \n[3169] \"cargo_2035_28292e0d\"           \"cargo_2035_28293025\"          \n[3171] \"cargo_2035_28299145\"           \"cargo_2035_28300de1\"          \n[3173] \"cargo_2035_28301f49\"           \"cargo_2035_28302a76\"          \n[3175] \"cargo_2035_28303939\"           \"cargo_2035_2830458c\"          \n[3177] \"cargo_2035_2830577a\"           \"cargo_2035_28306069\"          \n[3179] \"cargo_2035_28307b2f\"           \"cargo_2035_28308a6a\"          \n[3181] \"cargo_2035_28309e4c\"           \"cargo_2035_28310ad6\"          \n[3183] \"cargo_2035_28311194\"           \"cargo_2035_283124d4\"          \n[3185] \"cargo_2035_283134ee\"           \"cargo_2035_283147d7\"          \n[3187] \"cargo_2035_28315b12\"           \"cargo_2035_283160d6\"          \n[3189] \"cargo_2035_28317fd9\"           \"cargo_2035_28322c0e\"          \n[3191] \"cargo_2035_283297a8\"           \"cargo_2035_283303be\"          \n[3193] \"cargo_2035_2833106f\"           \"cargo_2035_28332486\"          \n[3195] \"cargo_2035_28333e64\"           \"cargo_2035_2833446c\"          \n[3197] \"cargo_2035_283356bc\"           \"cargo_2035_283368cf\"          \n[3199] \"cargo_2035_28337739\"           \"cargo_2035_2833806b\"          \n[3201] \"cargo_2035_2833924e\"           \"cargo_2035_28340ef5\"          \n[3203] \"cargo_2035_28341adc\"           \"cargo_2035_28342875\"          \n[3205] \"cargo_2035_28343c5d\"           \"cargo_2035_28344af6\"          \n[3207] \"cargo_2035_28345590\"           \"cargo_2035_28346f9e\"          \n[3209] \"cargo_2035_283479c0\"           \"cargo_2035_28348407\"          \n[3211] \"cargo_2035_28349ab4\"           \"cargo_2035_28350a9b\"          \n[3213] \"cargo_2035_28351841\"           \"cargo_2035_28352518\"          \n[3215] \"cargo_2035_28353eb8\"           \"cargo_2035_283542b0\"          \n[3217] \"cargo_2035_28355240\"           \"cargo_2035_28356749\"          \n[3219] \"cargo_2035_28357c15\"           \"cargo_2035_28358a18\"          \n[3221] \"cargo_2035_28359b69\"           \"cargo_2035_28360e7f\"          \n[3223] \"cargo_2035_28361344\"           \"cargo_2035_28366ed2\"          \n[3225] \"cargo_2035_28372f26\"           \"cargo_2035_283736cd\"          \n[3227] \"cargo_2035_28374b01\"           \"cargo_2035_28375a92\"          \n[3229] \"cargo_2035_28376768\"           \"cargo_2035_28377af4\"          \n[3231] \"cargo_2035_28378cd4\"           \"cargo_2035_283791dd\"          \n[3233] \"cargo_2035_28380511\"           \"cargo_2035_28381a5c\"          \n[3235] \"cargo_2035_28382a65\"           \"cargo_2035_2838330c\"          \n[3237] \"cargo_2035_28384012\"           \"cargo_2035_28385738\"          \n[3239] \"cargo_2035_28386f11\"           \"cargo_2035_28387b06\"          \n[3241] \"cargo_2035_28388d87\"           \"cargo_2035_28389049\"          \n[3243] \"cargo_2035_28390e99\"           \"cargo_2035_28391b4c\"          \n[3245] \"cargo_2035_28392774\"           \"cargo_2035_28393dad\"          \n[3247] \"cargo_2035_28394484\"           \"cargo_2035_28395ddc\"          \n[3249] \"cargo_2035_28396354\"           \"cargo_2035_28397f6c\"          \n[3251] \"cargo_2035_28398d0d\"           \"cargo_2035_28399239\"          \n[3253] \"cargo_2035_2840031c\"           \"cargo_2035_28401e24\"          \n[3255] \"cargo_2035_284025d5\"           \"cargo_2035_28403b14\"          \n[3257] \"cargo_2035_284041c4\"           \"cargo_2035_28405eb1\"          \n[3259] \"cargo_2035_2840690e\"           \"cargo_2035_28407ba4\"          \n[3261] \"cargo_2035_28408fd3\"           \"cargo_2035_28409049\"          \n[3263] \"cargo_2035_2841006e\"           \"cargo_2035_2841160a\"          \n[3265] \"cargo_2035_28412984\"           \"cargo_2035_28413b2b\"          \n[3267] \"cargo_2035_284142bf\"           \"cargo_2035_28415415\"          \n[3269] \"cargo_2035_284169b7\"           \"cargo_2035_28417d7e\"          \n[3271] \"cargo_2035_284185cc\"           \"cargo_2035_284197c9\"          \n[3273] \"cargo_2035_28420500\"           \"cargo_2035_28421130\"          \n[3275] \"cargo_2035_28422587\"           \"cargo_2035_28433dc1\"          \n[3277] \"cargo_2035_284343cb\"           \"cargo_2035_28435477\"          \n[3279] \"cargo_2035_28436303\"           \"cargo_2035_28437317\"          \n[3281] \"cargo_2035_28438e2a\"           \"cargo_2035_2843950c\"          \n[3283] \"cargo_2035_28440120\"           \"cargo_2035_284414b9\"          \n[3285] \"cargo_2035_284427f0\"           \"cargo_2035_284437b9\"          \n[3287] \"cargo_2035_28444ecd\"           \"cargo_2035_284457c7\"          \n[3289] \"cargo_2035_284464f9\"           \"cargo_2035_28447775\"          \n[3291] \"cargo_2035_28448fa7\"           \"cargo_2035_2844962e\"          \n[3293] \"cargo_2035_28450672\"           \"cargo_2035_28451608\"          \n[3295] \"cargo_2035_28452b54\"           \"cargo_2035_28453f8a\"          \n[3297] \"cargo_2035_284544ab\"           \"cargo_2035_28459c0f\"          \n[3299] \"cargo_2035_28465e29\"           \"cargo_2035_28466c1f\"          \n[3301] \"cargo_2035_284678a5\"           \"cargo_2035_2846824e\"          \n[3303] \"cargo_2035_28469704\"           \"cargo_2035_284700fc\"          \n[3305] \"cargo_2035_28472c10\"           \"cargo_2035_284739fe\"          \n[3307] \"cargo_2035_284742cd\"           \"cargo_2035_2847562d\"          \n[3309] \"cargo_2035_28476074\"           \"cargo_2035_2847991b\"          \n[3311] \"cargo_2035_28480eb0\"           \"cargo_2035_28489dfe\"          \n[3313] \"cargo_2035_28490882\"           \"cargo_2035_28491a13\"          \n[3315] \"cargo_2035_28492f55\"           \"cargo_2035_284939f7\"          \n[3317] \"cargo_2035_28494989\"           \"cargo_2035_28495b0c\"          \n[3319] \"cargo_2035_28496ea6\"           \"cargo_2035_284978ac\"          \n[3321] \"cargo_2035_28498dcc\"           \"cargo_2035_28499ed2\"          \n[3323] \"cargo_2035_285009dc\"           \"cargo_2035_28501030\"          \n[3325] \"cargo_2035_285026b1\"           \"cargo_2035_285031e4\"          \n[3327] \"cargo_2035_2850493c\"           \"cargo_2035_28505516\"          \n[3329] \"cargo_2035_28506dd0\"           \"cargo_2035_28507fcb\"          \n[3331] \"cargo_2035_28508390\"           \"cargo_2035_28509ad8\"          \n[3333] \"cargo_2035_2851042d\"           \"cargo_2035_285118ad\"          \n[3335] \"cargo_2035_28512999\"           \"cargo_2035_28513880\"          \n[3337] \"cargo_2035_2851434e\"           \"cargo_2035_2851579b\"          \n[3339] \"cargo_2035_2851637d\"           \"cargo_2035_28517b21\"          \n[3341] \"cargo_2035_285188d6\"           \"cargo_2035_28519919\"          \n[3343] \"cargo_2035_285206ca\"           \"cargo_2035_285216a3\"          \n[3345] \"cargo_2035_28522ee6\"           \"cargo_2035_28523192\"          \n[3347] \"cargo_2035_2852422a\"           \"cargo_2035_28525077\"          \n[3349] \"cargo_2035_28526fa6\"           \"cargo_2035_28527f5a\"          \n[3351] \"cargo_2035_28528bcc\"           \"cargo_2035_285297e3\"          \n[3353] \"cargo_2035_285305c1\"           \"cargo_2035_2853151a\"          \n[3355] \"cargo_2035_2853242d\"           \"cargo_2035_28533899\"          \n[3357] \"cargo_2035_285348cd\"           \"cargo_2035_285358b0\"          \n[3359] \"cargo_2035_28544ad8\"           \"cargo_2035_28547470\"          \n[3361] \"cargo_2035_2854828d\"           \"cargo_2035_2854906a\"          \n[3363] \"cargo_2035_28551b28\"           \"cargo_2035_28552459\"          \n[3365] \"cargo_2035_28553c7b\"           \"cargo_2035_28554029\"          \n[3367] \"cargo_2035_28555cd1\"           \"cargo_2035_285579bf\"          \n[3369] \"cargo_2035_285584e7\"           \"cargo_2035_28559bda\"          \n[3371] \"cargo_2035_28560cf3\"           \"cargo_2035_28562de2\"          \n[3373] \"cargo_2035_28563c2e\"           \"cargo_2035_28564b8d\"          \n[3375] \"cargo_2035_28565bf4\"           \"cargo_2035_285667a0\"          \n[3377] \"cargo_2035_2856701d\"           \"cargo_2035_28568f00\"          \n[3379] \"cargo_2035_28569a20\"           \"cargo_2035_28570aab\"          \n[3381] \"cargo_2035_28571890\"           \"cargo_2035_28573e7d\"          \n[3383] \"cargo_2035_28574c9e\"           \"cargo_2035_28575ac9\"          \n[3385] \"cargo_2035_28576686\"           \"cargo_2035_28577671\"          \n[3387] \"cargo_2035_2857892b\"           \"cargo_2035_28579748\"          \n[3389] \"cargo_2035_28580f64\"           \"cargo_2035_2858132b\"          \n[3391] \"cargo_2035_28583dac\"           \"cargo_2035_28584c14\"          \n[3393] \"cargo_2035_2858548c\"           \"cargo_2035_28586159\"          \n[3395] \"cargo_2035_2858710d\"           \"cargo_2035_28588628\"          \n[3397] \"cargo_2035_285899d2\"           \"cargo_2035_28590de6\"          \n[3399] \"cargo_2035_28591d13\"           \"cargo_2035_285930ac\"          \n[3401] \"cargo_2035_28594ab5\"           \"cargo_2035_28595b3f\"          \n[3403] \"cargo_2035_28596198\"           \"cargo_2035_28597faa\"          \n[3405] \"cargo_2035_28598501\"           \"cargo_2035_285998db\"          \n[3407] \"cargo_2035_28600c4b\"           \"cargo_2035_28602768\"          \n[3409] \"cargo_2035_28606e04\"           \"cargo_2035_28616ab5\"          \n[3411] \"cargo_2035_28617b11\"           \"cargo_2035_286182c4\"          \n[3413] \"cargo_2035_28619cab\"           \"cargo_2035_286208a5\"          \n[3415] \"cargo_2035_286215e1\"           \"cargo_2035_2862260e\"          \n[3417] \"cargo_2035_2862328e\"           \"cargo_2035_28624b3e\"          \n[3419] \"cargo_2035_2862576f\"           \"cargo_2035_28628911\"          \n[3421] \"cargo_2035_28629391\"           \"cargo_2035_28630ac2\"          \n[3423] \"cargo_2035_286318e0\"           \"cargo_2035_28632d51\"          \n[3425] \"cargo_2035_28634694\"           \"cargo_2035_2863581b\"          \n[3427] \"cargo_2035_28636034\"           \"cargo_2035_28637399\"          \n[3429] \"cargo_2035_286392c8\"           \"cargo_2035_28640eae\"          \n[3431] \"cargo_2035_28641b5d\"           \"cargo_2035_2864256f\"          \n[3433] \"cargo_2035_28643282\"           \"cargo_2035_28644c31\"          \n[3435] \"cargo_2035_28645f9d\"           \"cargo_2035_28647e31\"          \n[3437] \"cargo_2035_28648cbc\"           \"cargo_2035_286499eb\"          \n[3439] \"cargo_2035_28650f97\"           \"cargo_2035_28651ab4\"          \n[3441] \"cargo_2035_286520b7\"           \"cargo_2035_286536a4\"          \n[3443] \"cargo_2035_28654b58\"           \"cargo_2035_28655add\"          \n[3445] \"cargo_2035_28656cb8\"           \"cargo_2035_28657686\"          \n[3447] \"cargo_2035_28658af2\"           \"cargo_2035_286594e3\"          \n[3449] \"cargo_2035_2866037f\"           \"cargo_2035_286611aa\"          \n[3451] \"cargo_2035_28662db7\"           \"cargo_2035_286636ad\"          \n[3453] \"cargo_2035_286643b0\"           \"cargo_2035_28665fc1\"          \n[3455] \"cargo_2035_28666f31\"           \"cargo_2035_28667e27\"          \n[3457] \"cargo_2035_286686a3\"           \"cargo_2035_286694a7\"          \n[3459] \"cargo_2035_28670d50\"           \"cargo_2035_2867161c\"          \n[3461] \"cargo_2035_28672bd1\"           \"cargo_2035_28673411\"          \n[3463] \"cargo_2035_28674806\"           \"cargo_2035_2867577c\"          \n[3465] \"cargo_2035_28676ac4\"           \"cargo_2035_286771a1\"          \n[3467] \"cargo_2035_28678dd7\"           \"cargo_2035_286791f6\"          \n[3469] \"cargo_2035_28680d4c\"           \"cargo_2035_28681870\"          \n[3471] \"cargo_2035_28682e4c\"           \"cargo_2035_2868367c\"          \n[3473] \"cargo_2035_28684dc0\"           \"cargo_2035_286857c7\"          \n[3475] \"cargo_2035_28686ce7\"           \"cargo_2035_28687d59\"          \n[3477] \"cargo_2035_28688c13\"           \"cargo_2035_28689082\"          \n[3479] \"cargo_2035_28690714\"           \"cargo_2035_28691976\"          \n[3481] \"cargo_2035_28692fdd\"           \"cargo_2035_2869300d\"          \n[3483] \"cargo_2035_28694036\"           \"cargo_2035_2869555f\"          \n[3485] \"cargo_2035_28696b50\"           \"cargo_2035_28697d72\"          \n[3487] \"cargo_2035_28698f37\"           \"cargo_2035_28699a97\"          \n[3489] \"cargo_2035_28700e86\"           \"cargo_2035_28701732\"          \n[3491] \"cargo_2035_2870276c\"           \"cargo_2035_28703c87\"          \n[3493] \"cargo_2035_28704e2b\"           \"cargo_2035_28705cc9\"          \n[3495] \"cargo_2035_28706be9\"           \"cargo_2035_2870703a\"          \n[3497] \"cargo_2035_28708662\"           \"cargo_2035_287092a2\"          \n[3499] \"cargo_2035_28710f0a\"           \"cargo_2035_28711db6\"          \n[3501] \"cargo_2035_28712877\"           \"cargo_2035_2871369a\"          \n[3503] \"cargo_2035_28714686\"           \"cargo_2035_28715ac1\"          \n[3505] \"cargo_2035_287165aa\"           \"cargo_2035_28717df1\"          \n[3507] \"cargo_2035_2871850f\"           \"cargo_2035_28719e33\"          \n[3509] \"cargo_2035_28720cb7\"           \"cargo_2035_287212cf\"          \n[3511] \"cargo_2035_2872244d\"           \"cargo_2035_2872309a\"          \n[3513] \"cargo_2035_28724ad3\"           \"cargo_2035_28725e9f\"          \n[3515] \"cargo_2035_287264b5\"           \"cargo_2035_28727d5d\"          \n[3517] \"cargo_2035_28728bd7\"           \"cargo_2035_28729306\"          \n[3519] \"cargo_2035_287302ea\"           \"cargo_2035_28735ded\"          \n[3521] \"cargo_2035_28750b60\"           \"cargo_2035_28751860\"          \n[3523] \"cargo_2035_287521e0\"           \"cargo_2035_2875396f\"          \n[3525] \"cargo_2035_28754814\"           \"cargo_2035_287552e1\"          \n[3527] \"cargo_2035_28757f09\"           \"cargo_2035_28758400\"          \n[3529] \"cargo_2035_28759679\"           \"cargo_2035_28761e71\"          \n[3531] \"cargo_2035_28762f2f\"           \"cargo_2035_28763dfd\"          \n[3533] \"cargo_2035_28764fe7\"           \"cargo_2035_287657e8\"          \n[3535] \"cargo_2035_2876626d\"           \"cargo_2035_28767f72\"          \n[3537] \"cargo_2035_28768aa2\"           \"cargo_2035_287696c2\"          \n[3539] \"cargo_2035_287708d6\"           \"cargo_2035_287715ee\"          \n[3541] \"cargo_2035_287720a7\"           \"cargo_2035_28773d79\"          \n[3543] \"cargo_2035_2877517e\"           \"cargo_2035_28776ca4\"          \n[3545] \"cargo_2035_28777cc4\"           \"cargo_2035_2877810c\"          \n[3547] \"cargo_2035_287793e7\"           \"cargo_2035_28780089\"          \n[3549] \"cargo_2035_28782d37\"           \"cargo_2035_28783499\"          \n[3551] \"cargo_2035_28784f9e\"           \"cargo_2035_28785021\"          \n[3553] \"cargo_2035_287866ed\"           \"cargo_2035_28787286\"          \n[3555] \"cargo_2035_28788e42\"           \"cargo_2035_28793346\"          \n[3557] \"cargo_2035_28799499\"           \"cargo_2035_28800607\"          \n[3559] \"cargo_2035_28801c50\"           \"cargo_2035_28802eb0\"          \n[3561] \"cargo_2035_28804ee4\"           \"cargo_2035_28805365\"          \n[3563] \"cargo_2035_28806f3a\"           \"cargo_2035_2880824a\"          \n[3565] \"cargo_2035_28810ebb\"           \"cargo_2035_28811792\"          \n[3567] \"cargo_2035_288121e1\"           \"cargo_2035_288138ab\"          \n[3569] \"cargo_2035_28814d57\"           \"cargo_2035_28815c3c\"          \n[3571] \"cargo_2035_288163f7\"           \"cargo_2035_28817762\"          \n[3573] \"cargo_2035_28818673\"           \"cargo_2035_28819786\"          \n[3575] \"cargo_2035_28820904\"           \"cargo_2035_28821e25\"          \n[3577] \"cargo_2035_28822575\"           \"cargo_2035_28823ab2\"          \n[3579] \"cargo_2035_28824db0\"           \"cargo_2035_28825efc\"          \n[3581] \"cargo_2035_28826389\"           \"cargo_2035_28827a2f\"          \n[3583] \"cargo_2035_2882831f\"           \"cargo_2035_28829543\"          \n[3585] \"cargo_2035_28830df4\"           \"cargo_2035_28831e2b\"          \n[3587] \"cargo_2035_2883238a\"           \"cargo_2035_288333ed\"          \n[3589] \"cargo_2035_28834337\"           \"cargo_2035_28839efb\"          \n[3591] \"cargo_2035_28846cd5\"           \"cargo_2035_28847e4a\"          \n[3593] \"cargo_2035_2884889b\"           \"cargo_2035_288491dd\"          \n[3595] \"cargo_2035_28850d37\"           \"cargo_2035_28851cd5\"          \n[3597] \"cargo_2035_288524c7\"           \"cargo_2035_28853a42\"          \n[3599] \"cargo_2035_28854837\"           \"cargo_2035_288559cd\"          \n[3601] \"cargo_2035_288561e6\"           \"cargo_2035_288578f3\"          \n[3603] \"cargo_2035_288580d3\"           \"cargo_2035_28859587\"          \n[3605] \"cargo_2035_28860e20\"           \"cargo_2035_2886138a\"          \n[3607] \"cargo_2035_2886270f\"           \"cargo_2035_28863a72\"          \n[3609] \"cargo_2035_28864afb\"           \"cargo_2035_28865e79\"          \n[3611] \"cargo_2035_28866286\"           \"cargo_2035_28867f80\"          \n[3613] \"cargo_2035_288681cf\"           \"cargo_2035_28869143\"          \n[3615] \"cargo_2035_28870fa9\"           \"cargo_2035_28871190\"          \n[3617] \"cargo_2035_288726d0\"           \"cargo_2035_28873a60\"          \n[3619] \"cargo_2035_28874684\"           \"cargo_2035_2887544e\"          \n[3621] \"cargo_2035_288763b8\"           \"cargo_2035_288779f1\"          \n[3623] \"cargo_2035_2887805d\"           \"cargo_2035_28879b9d\"          \n[3625] \"cargo_2035_28880463\"           \"cargo_2035_288810ba\"          \n[3627] \"cargo_2035_2888254f\"           \"cargo_2035_28883840\"          \n[3629] \"cargo_2035_28884dfd\"           \"cargo_2035_28885226\"          \n[3631] \"cargo_2035_28886e4d\"           \"cargo_2035_288879fe\"          \n[3633] \"cargo_2035_28888ef4\"           \"cargo_2035_288894e0\"          \n[3635] \"cargo_2035_288902eb\"           \"cargo_2035_28891677\"          \n[3637] \"cargo_2035_28892d68\"           \"cargo_2035_288934b0\"          \n[3639] \"cargo_2035_28894f01\"           \"cargo_2035_28895262\"          \n[3641] \"cargo_2035_2889644f\"           \"cargo_2035_28897646\"          \n[3643] \"cargo_2035_28898249\"           \"cargo_2035_288993c3\"          \n[3645] \"cargo_2035_28900c35\"           \"cargo_2035_28901011\"          \n[3647] \"cargo_2035_2890265e\"           \"cargo_2035_28903337\"          \n[3649] \"cargo_2035_28904f1d\"           \"cargo_2035_289054d3\"          \n[3651] \"cargo_2035_28906d38\"           \"cargo_2035_28907762\"          \n[3653] \"cargo_2035_28908794\"           \"cargo_2035_2890936b\"          \n[3655] \"cargo_2035_28910be2\"           \"cargo_2035_28911839\"          \n[3657] \"cargo_2035_28912d75\"           \"cargo_2035_289130b2\"          \n[3659] \"cargo_2035_289142a8\"           \"cargo_2035_289153eb\"          \n[3661] \"cargo_2035_289166fd\"           \"cargo_2035_28917d03\"          \n[3663] \"cargo_2035_28918c37\"           \"cargo_2035_28919e72\"          \n[3665] \"cargo_2035_2892096e\"           \"cargo_2035_2892178d\"          \n[3667] \"cargo_2035_289220e4\"           \"cargo_2035_28923b0c\"          \n[3669] \"cargo_2035_289246b6\"           \"cargo_2035_28925628\"          \n[3671] \"cargo_2035_28926218\"           \"cargo_2035_289279e2\"          \n[3673] \"cargo_2035_28928667\"           \"cargo_2035_289292f2\"          \n[3675] \"cargo_2035_28930f74\"           \"cargo_2035_28931fd5\"          \n[3677] \"cargo_2035_289411a0\"           \"cargo_2035_28942d3f\"          \n[3679] \"cargo_2035_28943dbc\"           \"cargo_2035_289440af\"          \n[3681] \"cargo_2035_289457dc\"           \"cargo_2035_28946a12\"          \n[3683] \"cargo_2035_2894792b\"           \"cargo_2035_28948cca\"          \n[3685] \"cargo_2035_2894900c\"           \"cargo_2035_2895051d\"          \n[3687] \"cargo_2035_28951e4f\"           \"cargo_2035_28954e64\"          \n[3689] \"cargo_2035_28959397\"           \"cargo_2035_28960de6\"          \n[3691] \"cargo_2035_28961dcc\"           \"cargo_2035_289624b9\"          \n[3693] \"cargo_2035_28963403\"           \"cargo_2035_28964cfc\"          \n[3695] \"cargo_2035_28965828\"           \"cargo_2035_289661e2\"          \n[3697] \"cargo_2035_28967131\"           \"cargo_2035_28968fec\"          \n[3699] \"cargo_2035_28969e6f\"           \"cargo_2035_2897078c\"          \n[3701] \"cargo_2035_28971b18\"           \"cargo_2035_28972b55\"          \n[3703] \"cargo_2035_289740cc\"           \"cargo_2035_289751c3\"          \n[3705] \"cargo_2035_28976077\"           \"cargo_2035_289778ed\"          \n[3707] \"cargo_2035_28978035\"           \"cargo_2035_28980f52\"          \n[3709] \"cargo_2035_289829d5\"           \"cargo_2035_28983493\"          \n[3711] \"cargo_2035_28985350\"           \"cargo_2035_289869a1\"          \n[3713] \"cargo_2035_28988f25\"           \"cargo_2035_28989e68\"          \n[3715] \"cargo_2035_28992184\"           \"cargo_2035_2899383d\"          \n[3717] \"cargo_2035_2899468e\"           \"cargo_2035_28996660\"          \n[3719] \"cargo_2035_28997ace\"           \"cargo_2035_289985d3\"          \n[3721] \"cargo_2035_290004b8\"           \"cargo_2035_290012dd\"          \n[3723] \"cargo_2035_29002d6d\"           \"cargo_2035_29003f89\"          \n[3725] \"cargo_2035_290046e2\"           \"cargo_2035_29005d6e\"          \n[3727] \"cargo_2035_2900782c\"           \"cargo_2035_290087a6\"          \n[3729] \"cargo_2035_29011aab\"           \"cargo_2035_29013df9\"          \n[3731] \"cargo_2035_29015ee7\"           \"cargo_2035_29016834\"          \n[3733] \"cargo_2035_29017850\"           \"cargo_2035_29018e44\"          \n[3735] \"cargo_2035_2901965e\"           \"cargo_2035_29022113\"          \n[3737] \"cargo_2035_29023970\"           \"cargo_2035_290244b4\"          \n[3739] \"cargo_2035_29026b6b\"           \"cargo_2035_29027cd7\"          \n[3741] \"cargo_2035_290282c6\"           \"cargo_2035_29029ab3\"          \n[3743] \"cargo_2035_29030dc5\"           \"cargo_2035_29040244\"          \n[3745] \"cargo_2035_290410d2\"           \"cargo_2035_290426fc\"          \n[3747] \"cargo_2035_2904349a\"           \"cargo_2035_29044784\"          \n[3749] \"cargo_2035_29045ad6\"           \"cargo_2035_290463d9\"          \n[3751] \"cargo_2035_29049393\"           \"cargo_2035_290510ce\"          \n[3753] \"cargo_2035_29052155\"           \"cargo_2035_290536e9\"          \n[3755] \"cargo_2035_290543a2\"           \"cargo_2035_29055cb1\"          \n[3757] \"cargo_2035_29056147\"           \"cargo_2035_29057c56\"          \n[3759] \"cargo_2035_290591ad\"           \"cargo_2035_29060883\"          \n[3761] \"cargo_2035_29062cbb\"           \"cargo_2035_29064064\"          \n[3763] \"cargo_2035_2906513e\"           \"cargo_2035_29066efb\"          \n[3765] \"cargo_2035_29067509\"           \"cargo_2035_29068909\"          \n[3767] \"cargo_2035_2906937e\"           \"cargo_2035_290705ee\"          \n[3769] \"cargo_2035_2907380b\"           \"cargo_2035_29079438\"          \n[3771] \"cargo_2035_29080d9a\"           \"cargo_2035_290812ba\"          \n[3773] \"cargo_2035_29082fde\"           \"cargo_2035_29083dbf\"          \n[3775] \"cargo_2035_29084c59\"           \"cargo_2035_29085fb1\"          \n[3777] \"cargo_2035_29086eca\"           \"cargo_2035_29087425\"          \n[3779] \"cargo_2035_29088a8c\"           \"cargo_2035_290899d3\"          \n[3781] \"cargo_2035_29090f0a\"           \"cargo_2035_2909135a\"          \n[3783] \"cargo_2035_29092d76\"           \"cargo_2035_2909369c\"          \n[3785] \"cargo_2035_29094c98\"           \"cargo_2035_29095c7f\"          \n[3787] \"cargo_2035_29096cf6\"           \"cargo_2035_29097b62\"          \n[3789] \"cargo_2035_29098b12\"           \"cargo_2035_29099faf\"          \n[3791] \"cargo_2035_2910052f\"           \"cargo_2035_29101fc8\"          \n[3793] \"cargo_2035_29102c4e\"           \"cargo_2035_29103fc1\"          \n[3795] \"cargo_2035_291046ac\"           \"cargo_2035_29105e81\"          \n[3797] \"cargo_2035_29106837\"           \"cargo_2035_29107662\"          \n[3799] \"cargo_2035_291085b0\"           \"cargo_2035_29109a9d\"          \n[3801] \"cargo_2035_2911095a\"           \"cargo_2035_2911155d\"          \n[3803] \"cargo_2035_29112e93\"           \"cargo_2035_2911340e\"          \n[3805] \"cargo_2035_291143d7\"           \"cargo_2035_291150e9\"          \n[3807] \"cargo_2035_29116502\"           \"cargo_2035_29117563\"          \n[3809] \"cargo_2035_29118079\"           \"cargo_2035_291193e6\"          \n[3811] \"cargo_2035_29120663\"           \"cargo_2035_291213b0\"          \n[3813] \"cargo_2035_29122bbe\"           \"cargo_2035_29123af6\"          \n[3815] \"cargo_2035_29124403\"           \"cargo_2035_29125452\"          \n[3817] \"cargo_2035_29126103\"           \"cargo_2035_291279ed\"          \n[3819] \"cargo_2035_2912885d\"           \"cargo_2035_29129b7d\"          \n[3821] \"cargo_2035_291309f9\"           \"cargo_2035_29131538\"          \n[3823] \"cargo_2035_29132922\"           \"cargo_2035_291338ca\"          \n[3825] \"cargo_2035_2913407d\"           \"cargo_2035_29135a5e\"          \n[3827] \"cargo_2035_291364df\"           \"cargo_2035_291379e0\"          \n[3829] \"cargo_2035_291388e3\"           \"cargo_2035_29139f57\"          \n[3831] \"cargo_2035_29140f98\"           \"cargo_2035_29141b4f\"          \n[3833] \"cargo_2035_29142cc8\"           \"cargo_2035_291430ad\"          \n[3835] \"cargo_2035_29144fb6\"           \"cargo_2035_291450e6\"          \n[3837] \"cargo_2035_291463fe\"           \"cargo_2035_29147803\"          \n[3839] \"cargo_2035_29148459\"           \"cargo_2035_2914965f\"          \n[3841] \"cargo_2035_2915012f\"           \"cargo_2035_29151cf4\"          \n[3843] \"cargo_2035_29152a8a\"           \"cargo_2035_291533e7\"          \n[3845] \"cargo_2035_291541ba\"           \"cargo_2035_29155b85\"          \n[3847] \"cargo_2035_2915629f\"           \"cargo_2035_291576ed\"          \n[3849] \"cargo_2035_29158708\"           \"cargo_2035_2915970f\"          \n[3851] \"cargo_2035_29160929\"           \"cargo_2035_291676cc\"          \n[3853] \"cargo_2035_29172a4f\"           \"cargo_2035_29173619\"          \n[3855] \"cargo_2035_291745b0\"           \"cargo_2035_29175c12\"          \n[3857] \"cargo_2035_2917602d\"           \"cargo_2035_29177668\"          \n[3859] \"cargo_2035_291780fc\"           \"cargo_2035_291792d9\"          \n[3861] \"cargo_2035_2918047b\"           \"cargo_2035_29181680\"          \n[3863] \"cargo_2035_291836b1\"           \"cargo_2035_29184872\"          \n[3865] \"cargo_2035_2918543e\"           \"cargo_2035_291866db\"          \n[3867] \"cargo_2035_291877d4\"           \"cargo_2035_29189197\"          \n[3869] \"cargo_2035_29190b6f\"           \"cargo_2035_2919150e\"          \n[3871] \"cargo_2035_29192c4a\"           \"cargo_2035_29194d75\"          \n[3873] \"cargo_2035_2919520e\"           \"cargo_2035_29196123\"          \n[3875] \"cargo_2035_29197691\"           \"cargo_2035_29198186\"          \n[3877] \"cargo_2035_29199348\"           \"cargo_2035_292071fb\"          \n[3879] \"cargo_2035_292088fa\"           \"cargo_2035_2920970d\"          \n[3881] \"cargo_2035_29210e39\"           \"cargo_2035_29211799\"          \n[3883] \"cargo_2035_292130a4\"           \"cargo_2035_29214bae\"          \n[3885] \"cargo_2035_2921553f\"           \"cargo_2035_29216b09\"          \n[3887] \"cargo_2035_29218bc7\"           \"cargo_2035_29219965\"          \n[3889] \"cargo_2035_29220802\"           \"cargo_2035_29221f4e\"          \n[3891] \"cargo_2035_292220eb\"           \"cargo_2035_29223e84\"          \n[3893] \"cargo_2035_292241dd\"           \"cargo_2035_29225316\"          \n[3895] \"cargo_2035_29226285\"           \"cargo_2035_29227ea7\"          \n[3897] \"cargo_2035_29229f82\"           \"cargo_2035_29232da3\"          \n[3899] \"cargo_2035_29233c12\"           \"cargo_2035_2923548d\"          \n[3901] \"cargo_2035_292364e2\"           \"cargo_2035_292371a9\"          \n[3903] \"cargo_2035_292382aa\"           \"cargo_2035_29240705\"          \n[3905] \"cargo_2035_29241599\"           \"cargo_2035_29244134\"          \n[3907] \"cargo_2035_2924636c\"           \"cargo_2035_29248646\"          \n[3909] \"cargo_2035_29249bf1\"           \"cargo_2035_292508f9\"          \n[3911] \"cargo_2035_29251730\"           \"cargo_2035_29252437\"          \n[3913] \"cargo_2035_29253538\"           \"cargo_2035_2925494a\"          \n[3915] \"cargo_2035_292552a0\"           \"cargo_2035_29256ec8\"          \n[3917] \"cargo_2035_292578d5\"           \"cargo_2035_29259952\"          \n[3919] \"cargo_2035_29260f62\"           \"cargo_2035_2926152c\"          \n[3921] \"cargo_2035_292625a7\"           \"cargo_2035_2926329b\"          \n[3923] \"cargo_2035_29264a0f\"           \"cargo_2035_2926501f\"          \n[3925] \"cargo_2035_29266f08\"           \"cargo_2035_2926731d\"          \n[3927] \"cargo_2035_29268cf5\"           \"cargo_2035_29270660\"          \n[3929] \"cargo_2035_29271b24\"           \"cargo_2035_29272144\"          \n[3931] \"cargo_2035_29273505\"           \"cargo_2035_29274647\"          \n[3933] \"cargo_2035_29275d67\"           \"cargo_2035_2927637f\"          \n[3935] \"cargo_2035_29277841\"           \"cargo_2035_2927880c\"          \n[3937] \"cargo_2035_2927965e\"           \"cargo_2035_29281c64\"          \n[3939] \"cargo_2035_29282142\"           \"cargo_2035_29283dd0\"          \n[3941] \"cargo_2035_292841fc\"           \"cargo_2035_29285c16\"          \n[3943] \"cargo_2035_292868ac\"           \"cargo_2035_29293f38\"          \n[3945] \"cargo_2035_29303583\"           \"cargo_2035_29305e15\"          \n[3947] \"cargo_2035_29307aa3\"           \"cargo_2035_2930873e\"          \n[3949] \"cargo_2035_293098e0\"           \"cargo_2035_29310e28\"          \n[3951] \"cargo_2035_2931168f\"           \"cargo_2035_293121ae\"          \n[3953] \"cargo_2035_2931357b\"           \"cargo_2035_29314166\"          \n[3955] \"cargo_2035_293167b0\"           \"cargo_2035_29317b43\"          \n[3957] \"cargo_2035_29318abe\"           \"cargo_2035_29319bbd\"          \n[3959] \"cargo_2035_293207ce\"           \"cargo_2035_29321553\"          \n[3961] \"cargo_2035_29323224\"           \"cargo_2035_29324860\"          \n[3963] \"cargo_2035_293254ee\"           \"cargo_2035_29326790\"          \n[3965] \"cargo_2035_293275b6\"           \"cargo_2035_2932897a\"          \n[3967] \"cargo_2035_2933034d\"           \"cargo_2035_29332682\"          \n[3969] \"cargo_2035_29333a00\"           \"cargo_2035_293367aa\"          \n[3971] \"cargo_2035_293376a0\"           \"cargo_2035_29338617\"          \n[3973] \"cargo_2035_29339197\"           \"cargo_2035_2934019a\"          \n[3975] \"cargo_2035_29342277\"           \"cargo_2035_293437f4\"          \n[3977] \"cargo_2035_29344fc5\"           \"cargo_2035_293459ec\"          \n[3979] \"cargo_2035_2934789a\"           \"cargo_2035_293484af\"          \n[3981] \"cargo_2035_29349db8\"           \"cargo_2035_29350a33\"          \n[3983] \"cargo_2035_2935168d\"           \"cargo_2035_293604e6\"          \n[3985] \"cargo_2035_29361fed\"           \"cargo_2035_29362122\"          \n[3987] \"cargo_2035_29363906\"           \"cargo_2035_29364bba\"          \n[3989] \"cargo_2035_29365506\"           \"cargo_2035_293664fd\"          \n[3991] \"cargo_2035_293671b9\"           \"cargo_2035_29368c12\"          \n[3993] \"cargo_2035_29369e58\"           \"cargo_2035_29371b64\"          \n[3995] \"cargo_2035_2937220e\"           \"cargo_2035_29373648\"          \n[3997] \"cargo_2035_29374be7\"           \"cargo_2035_29375f86\"          \n[3999] \"cargo_2035_29376731\"           \"cargo_2035_29377e04\"          \n[4001] \"cargo_2035_293784e2\"           \"cargo_2035_2937914c\"          \n[4003] \"cargo_2035_29380f08\"           \"cargo_2035_293820ba\"          \n[4005] \"cargo_2035_293839d1\"           \"cargo_2035_29384348\"          \n[4007] \"cargo_2035_29385819\"           \"cargo_2035_2938669e\"          \n[4009] \"cargo_2035_29387eb6\"           \"cargo_2035_293881ea\"          \n[4011] \"cargo_2035_2938995c\"           \"cargo_2035_2939020b\"          \n[4013] \"cargo_2035_29391d21\"           \"cargo_2035_29393e69\"          \n[4015] \"cargo_2035_293944bd\"           \"cargo_2035_29395e50\"          \n[4017] \"cargo_2035_293965f1\"           \"cargo_2035_29397d1c\"          \n[4019] \"cargo_2035_29398e31\"           \"cargo_2035_293999ef\"          \n[4021] \"cargo_2035_29400e1b\"           \"cargo_2035_29401bff\"          \n[4023] \"cargo_2035_294020eb\"           \"cargo_2035_294043c3\"          \n[4025] \"cargo_2035_294052ec\"           \"cargo_2035_294064a6\"          \n[4027] \"cargo_2035_294124db\"           \"cargo_2035_29413d7f\"          \n[4029] \"cargo_2035_2941583e\"           \"cargo_2035_29416264\"          \n[4031] \"cargo_2035_29417d8f\"           \"cargo_2035_294184e4\"          \n[4033] \"cargo_2035_29419a3f\"           \"cargo_2035_29420e39\"          \n[4035] \"cargo_2035_294215cb\"           \"cargo_2035_29423ea1\"          \n[4037] \"cargo_2035_29424596\"           \"cargo_2035_29425a9c\"          \n[4039] \"cargo_2035_29426993\"           \"cargo_2035_2942738f\"          \n[4041] \"cargo_2035_29428145\"           \"cargo_2035_2942912e\"          \n[4043] \"cargo_2035_294301b8\"           \"cargo_2035_29431632\"          \n[4045] \"cargo_2035_2943274e\"           \"cargo_2035_29434ae5\"          \n[4047] \"cargo_2035_294355d6\"           \"cargo_2035_29436a50\"          \n[4049] \"cargo_2035_294379c8\"           \"cargo_2035_29438ec0\"          \n[4051] \"cargo_2035_294391a3\"           \"cargo_2035_29440c93\"          \n[4053] \"cargo_2035_29441e3f\"           \"cargo_2035_294428b8\"          \n[4055] \"cargo_2035_29443e33\"           \"cargo_2035_29445c6a\"          \n[4057] \"cargo_2035_29446d47\"           \"cargo_2035_29450716\"          \n[4059] \"cargo_2035_294511d6\"           \"cargo_2035_294527c7\"          \n[4061] \"cargo_2035_29456fbe\"           \"cargo_2035_294573cd\"          \n[4063] \"cargo_2035_29459cb5\"           \"cargo_2035_29460d75\"          \n[4065] \"cargo_2035_2946144a\"           \"cargo_2035_29462313\"          \n[4067] \"cargo_2035_294635f2\"           \"cargo_2035_29464ab1\"          \n[4069] \"cargo_2035_29465881\"           \"cargo_2035_29466d64\"          \n[4071] \"cargo_2035_29467400\"           \"cargo_2035_2946841a\"          \n[4073] \"cargo_2035_29469d40\"           \"cargo_2035_29470421\"          \n[4075] \"cargo_2035_29471c3c\"           \"cargo_2035_29472ee7\"          \n[4077] \"cargo_2035_2947357d\"           \"cargo_2035_29474995\"          \n[4079] \"cargo_2035_29475ea6\"           \"cargo_2035_29476027\"          \n[4081] \"cargo_2035_29478d1a\"           \"cargo_2035_29479d60\"          \n[4083] \"cargo_2035_29481145\"           \"cargo_2035_29482af8\"          \n[4085] \"cargo_2035_29483fb5\"           \"cargo_2035_294856a8\"          \n[4087] \"cargo_2035_2948675d\"           \"cargo_2035_2948814f\"          \n[4089] \"cargo_2035_29489769\"           \"cargo_2035_29494175\"          \n[4091] \"cargo_2035_29495e62\"           \"cargo_2035_29496198\"          \n[4093] \"cargo_2035_2949763c\"           \"cargo_2035_294980f2\"          \n[4095] \"cargo_2035_29499ac4\"           \"cargo_2035_2950014b\"          \n[4097] \"cargo_2035_29501b13\"           \"cargo_2035_295026e5\"          \n[4099] \"cargo_2035_2950370c\"           \"cargo_2035_295054bf\"          \n[4101] \"cargo_2035_29506247\"           \"cargo_2035_29507a68\"          \n[4103] \"cargo_2035_295087f4\"           \"cargo_2035_2950956c\"          \n[4105] \"cargo_2035_29517afb\"           \"cargo_2035_2951802a\"          \n[4107] \"cargo_2035_295193b5\"           \"cargo_2035_29520008\"          \n[4109] \"cargo_2035_29521a22\"           \"cargo_2035_29522007\"          \n[4111] \"cargo_2035_29523cae\"           \"cargo_2035_2952454b\"          \n[4113] \"cargo_2035_295257da\"           \"cargo_2035_29526fa2\"          \n[4115] \"cargo_2035_29527a36\"           \"cargo_2035_295287df\"          \n[4117] \"cargo_2035_29529cf6\"           \"cargo_2035_295301fc\"          \n[4119] \"cargo_2035_29531c67\"           \"cargo_2035_29532ee9\"          \n[4121] \"cargo_2035_29533c68\"           \"cargo_2035_29534dc6\"          \n[4123] \"cargo_2035_2953570e\"           \"cargo_2035_29536c79\"          \n[4125] \"cargo_2035_29537604\"           \"cargo_2035_29538cf9\"          \n[4127] \"cargo_2035_2953917e\"           \"cargo_2035_295407c8\"          \n[4129] \"cargo_2035_29541590\"           \"cargo_2035_2954235b\"          \n[4131] \"cargo_2035_2954341c\"           \"cargo_2035_295441ed\"          \n[4133] \"cargo_2035_295458e3\"           \"cargo_2035_29546952\"          \n[4135] \"cargo_2035_29547e5a\"           \"cargo_2035_29548f48\"          \n[4137] \"cargo_2035_29549fce\"           \"cargo_2035_295502ba\"          \n[4139] \"cargo_2035_29551e3b\"           \"cargo_2035_295529ea\"          \n[4141] \"cargo_2035_295530bf\"           \"cargo_2035_2955453b\"          \n[4143] \"cargo_2035_29555cd8\"           \"cargo_2035_29556a00\"          \n[4145] \"cargo_2035_29557a54\"           \"cargo_2035_2955871d\"          \n[4147] \"cargo_2035_29559f10\"           \"cargo_2035_2956047c\"          \n[4149] \"cargo_2035_295617a2\"           \"cargo_2035_2956231b\"          \n[4151] \"cargo_2035_29563229\"           \"cargo_2035_2956418d\"          \n[4153] \"cargo_2035_29565069\"           \"cargo_2035_295669f0\"          \n[4155] \"cargo_2035_29567bef\"           \"cargo_2035_2956847e\"          \n[4157] \"cargo_2035_2956946a\"           \"cargo_2035_29570c6c\"          \n[4159] \"cargo_2035_29571903\"           \"cargo_2035_2957261e\"          \n[4161] \"cargo_2035_295735c3\"           \"cargo_2035_2957417d\"          \n[4163] \"cargo_2035_29575ce1\"           \"cargo_2035_29576332\"          \n[4165] \"cargo_2035_29577c34\"           \"cargo_2035_29578c30\"          \n[4167] \"cargo_2035_2957954d\"           \"cargo_2035_29583bc4\"          \n[4169] \"cargo_2035_2959173c\"           \"cargo_2035_29592319\"          \n[4171] \"cargo_2035_295946f5\"           \"cargo_2035_29595e82\"          \n[4173] \"cargo_2035_295969f6\"           \"cargo_2035_29597134\"          \n[4175] \"cargo_2035_295983d1\"           \"cargo_2035_29599b73\"          \n[4177] \"cargo_2035_29600337\"           \"cargo_2035_296012f2\"          \n[4179] \"cargo_2035_296028b0\"           \"cargo_2035_2960318a\"          \n[4181] \"cargo_2035_29605e39\"           \"cargo_2035_2960695b\"          \n[4183] \"cargo_2035_29607a5f\"           \"cargo_2035_296084b2\"          \n[4185] \"cargo_2035_29609375\"           \"cargo_2035_29610b05\"          \n[4187] \"cargo_2035_296129e8\"           \"cargo_2035_2961347e\"          \n[4189] \"cargo_2035_29614c5a\"           \"cargo_2035_296165e2\"          \n[4191] \"cargo_2035_29617162\"           \"cargo_2035_2961838e\"          \n[4193] \"cargo_2035_2961994f\"           \"cargo_2035_29620fcc\"          \n[4195] \"cargo_2035_29621aac\"           \"cargo_2035_2962221c\"          \n[4197] \"cargo_2035_29623f7d\"           \"cargo_2035_29624926\"          \n[4199] \"cargo_2035_29625ba9\"           \"cargo_2035_29627bb0\"          \n[4201] \"cargo_2035_2962829a\"           \"cargo_2035_296294a5\"          \n[4203] \"cargo_2035_296304d9\"           \"cargo_2035_29631c1f\"          \n[4205] \"cargo_2035_29637568\"           \"cargo_2035_29638b61\"          \n[4207] \"cargo_2035_296403b9\"           \"cargo_2035_296416b8\"          \n[4209] \"cargo_2035_29642536\"           \"cargo_2035_29644e84\"          \n[4211] \"cargo_2035_2964583e\"           \"cargo_2035_29646776\"          \n[4213] \"cargo_2035_29647b76\"           \"cargo_2035_29648bfd\"          \n[4215] \"cargo_2035_29649b9b\"           \"cargo_2035_29650857\"          \n[4217] \"cargo_2035_296518ab\"           \"cargo_2035_29652167\"          \n[4219] \"cargo_2035_296552f6\"           \"cargo_2035_296566fb\"          \n[4221] \"cargo_2035_296575a4\"           \"cargo_2035_29658685\"          \n[4223] \"cargo_2035_296596b8\"           \"cargo_2035_29661a29\"          \n[4225] \"cargo_2035_29663203\"           \"cargo_2035_2966414c\"          \n[4227] \"cargo_2035_29666fa0\"           \"cargo_2035_29667ac9\"          \n[4229] \"cargo_2035_296690f0\"           \"cargo_2035_29670e28\"          \n[4231] \"cargo_2035_29671c72\"           \"cargo_2035_29682554\"          \n[4233] \"cargo_2035_296832d5\"           \"cargo_2035_2968466f\"          \n[4235] \"cargo_2035_2968597c\"           \"cargo_2035_2968668a\"          \n[4237] \"cargo_2035_29687240\"           \"cargo_2035_2968814c\"          \n[4239] \"cargo_2035_29689907\"           \"cargo_2035_29690285\"          \n[4241] \"cargo_2035_29691f7a\"           \"cargo_2035_296925fd\"          \n[4243] \"cargo_2035_29693fd8\"           \"cargo_2035_296949a1\"          \n[4245] \"cargo_2035_29695f58\"           \"cargo_2035_29696623\"          \n[4247] \"cargo_2035_29697d75\"           \"cargo_2035_296982ce\"          \n[4249] \"cargo_2035_296997a9\"           \"cargo_2035_297006dc\"          \n[4251] \"cargo_2035_29701a1e\"           \"cargo_2035_297032af\"          \n[4253] \"cargo_2035_29705c51\"           \"cargo_2035_29708fc6\"          \n[4255] \"cargo_2035_2970903d\"           \"cargo_2035_29710daf\"          \n[4257] \"cargo_2035_29712696\"           \"cargo_2035_297151ee\"          \n[4259] \"cargo_2035_29716bb8\"           \"cargo_2035_29717ac4\"          \n[4261] \"cargo_2035_29720a0b\"           \"cargo_2035_29721474\"          \n[4263] \"cargo_2035_29723c08\"           \"cargo_2035_2972647f\"          \n[4265] \"cargo_2035_29727213\"           \"cargo_2035_29728efd\"          \n[4267] \"cargo_2035_297372f5\"           \"cargo_2035_29740623\"          \n[4269] \"cargo_2035_297418ee\"           \"cargo_2035_29742603\"          \n[4271] \"cargo_2035_29743bb5\"           \"cargo_2035_29744489\"          \n[4273] \"cargo_2035_29745484\"           \"cargo_2035_297480c2\"          \n[4275] \"cargo_2035_297499bc\"           \"cargo_2035_29750053\"          \n[4277] \"cargo_2035_2975170a\"           \"cargo_2035_29752b8a\"          \n[4279] \"cargo_2035_29753968\"           \"cargo_2035_297553f5\"          \n[4281] \"cargo_2035_29757f75\"           \"cargo_2035_297592c3\"          \n[4283] \"cargo_2035_29760071\"           \"cargo_2035_29761789\"          \n[4285] \"cargo_2035_29762660\"           \"cargo_2035_2976318f\"          \n[4287] \"cargo_2035_29764981\"           \"cargo_2035_29765f65\"          \n[4289] \"cargo_2035_29773128\"           \"cargo_2035_297778e2\"          \n[4291] \"cargo_2035_2977952d\"           \"cargo_2035_297811c3\"          \n[4293] \"cargo_2035_29782f1b\"           \"cargo_2035_29783d47\"          \n[4295] \"cargo_2035_29784f94\"           \"cargo_2035_297855d8\"          \n[4297] \"cargo_2035_29787ff3\"           \"cargo_2035_29788e27\"          \n[4299] \"cargo_2035_29789bcc\"           \"cargo_2035_2979023a\"          \n[4301] \"cargo_2035_2979113e\"           \"cargo_2035_29792224\"          \n[4303] \"cargo_2035_29793543\"           \"cargo_2035_29794f15\"          \n[4305] \"cargo_2035_2979556f\"           \"cargo_2035_29801dc4\"          \n[4307] \"cargo_2035_29802431\"           \"cargo_2035_29803316\"          \n[4309] \"cargo_2035_29804fca\"           \"cargo_2035_298050f6\"          \n[4311] \"cargo_2035_2980600e\"           \"cargo_2035_29807a3e\"          \n[4313] \"cargo_2035_298082be\"           \"cargo_2035_29809ea4\"          \n[4315] \"cargo_2035_298105b4\"           \"cargo_2035_29812927\"          \n[4317] \"cargo_2035_29813085\"           \"cargo_2035_29814b2c\"          \n[4319] \"cargo_2035_298156ae\"           \"cargo_2035_29816b56\"          \n[4321] \"cargo_2035_29817c27\"           \"cargo_2035_298251fc\"          \n[4323] \"cargo_2035_2982688d\"           \"cargo_2035_298271b4\"          \n[4325] \"cargo_2035_29828c84\"           \"cargo_2035_29829ab7\"          \n[4327] \"cargo_2035_29830fa5\"           \"cargo_2035_29831d3f\"          \n[4329] \"cargo_2035_2983203f\"           \"cargo_2035_29833b0f\"          \n[4331] \"cargo_2035_29834845\"           \"cargo_2035_29835f38\"          \n[4333] \"cargo_2035_2983604c\"           \"cargo_2035_29837958\"          \n[4335] \"cargo_2035_29838885\"           \"cargo_2035_29839f6b\"          \n[4337] \"cargo_2035_29840c1a\"           \"cargo_2035_298412e7\"          \n[4339] \"cargo_2035_2984278d\"           \"cargo_2035_2984394c\"          \n[4341] \"cargo_2035_29848a88\"           \"cargo_2035_2985567c\"          \n[4343] \"cargo_2035_29856d89\"           \"cargo_2035_2985743f\"          \n[4345] \"cargo_2035_29858978\"           \"cargo_2035_298597fb\"          \n[4347] \"cargo_2035_29860b82\"           \"cargo_2035_29861f6e\"          \n[4349] \"cargo_2035_2986287d\"           \"cargo_2035_29863dcd\"          \n[4351] \"cargo_2035_29864f7e\"           \"cargo_2035_2986599e\"          \n[4353] \"cargo_2035_29866f8c\"           \"cargo_2035_2986763f\"          \n[4355] \"cargo_2035_29868372\"           \"cargo_2035_29869d8e\"          \n[4357] \"cargo_2035_29870b31\"           \"cargo_2035_29871155\"          \n[4359] \"cargo_2035_298739bf\"           \"cargo_2035_29874c8b\"          \n[4361] \"cargo_2035_29876c6c\"           \"cargo_2035_29877749\"          \n[4363] \"cargo_2035_29878db7\"           \"cargo_2035_29879783\"          \n[4365] \"cargo_2035_29881f7b\"           \"cargo_2035_29882219\"          \n[4367] \"cargo_2035_2988461b\"           \"cargo_2035_29885501\"          \n[4369] \"cargo_2035_29886428\"           \"cargo_2035_29887b26\"          \n[4371] \"cargo_2035_29894038\"           \"cargo_2035_298954bc\"          \n[4373] \"cargo_2035_29898851\"           \"cargo_2035_2989901d\"          \n[4375] \"cargo_2035_2990009d\"           \"cargo_2035_299029f2\"          \n[4377] \"cargo_2035_29903e40\"           \"cargo_2035_29904460\"          \n[4379] \"cargo_2035_299051bd\"           \"cargo_2035_29907088\"          \n[4381] \"cargo_2035_29909952\"           \"cargo_2035_299100cc\"          \n[4383] \"cargo_2035_29912f7a\"           \"cargo_2035_29913cd4\"          \n[4385] \"cargo_2035_29914f17\"           \"cargo_2035_29915a6c\"          \n[4387] \"cargo_2035_29916df1\"           \"cargo_2035_29917f7e\"          \n[4389] \"cargo_2035_29918a58\"           \"cargo_2035_2992047b\"          \n[4391] \"cargo_2035_29922a67\"           \"cargo_2035_29923315\"          \n[4393] \"cargo_2035_299267e2\"           \"cargo_2035_29929cf4\"          \n[4395] \"cargo_2035_29937dea\"           \"cargo_2035_2993838b\"          \n[4397] \"cargo_2035_29939451\"           \"cargo_2035_29940d1e\"          \n[4399] \"cargo_2035_299416ae\"           \"cargo_2035_29942f58\"          \n[4401] \"cargo_2035_2994380c\"           \"cargo_2035_29944e3b\"          \n[4403] \"cargo_2035_299454c0\"           \"cargo_2035_29946cbb\"          \n[4405] \"cargo_2035_29950719\"           \"cargo_2035_2995196e\"          \n[4407] \"cargo_2035_29952c94\"           \"cargo_2035_2995324c\"          \n[4409] \"cargo_2035_29954aa6\"           \"cargo_2035_29955ea9\"          \n[4411] \"cargo_2035_299560f8\"           \"cargo_2035_29957ae2\"          \n[4413] \"cargo_2035_29959023\"           \"cargo_2035_299602c9\"          \n[4415] \"cargo_2035_29961ae9\"           \"cargo_2035_29962710\"          \n[4417] \"cargo_2035_29963de3\"           \"cargo_2035_2997353d\"          \n[4419] \"cargo_2035_29974951\"           \"cargo_2035_2997575e\"          \n[4421] \"cargo_2035_29976f72\"           \"cargo_2035_29977fb8\"          \n[4423] \"cargo_2035_299784da\"           \"cargo_2035_299798d3\"          \n[4425] \"cargo_2035_2998072a\"           \"cargo_2035_29981859\"          \n[4427] \"cargo_2035_29984ffa\"           \"cargo_2035_2998663e\"          \n[4429] \"cargo_2035_299872aa\"           \"cargo_2035_2998825e\"          \n[4431] \"cargo_2035_29989282\"           \"cargo_2035_29994ca4\"          \n[4433] \"cargo_2035_29995c4e\"           \"cargo_2035_29997681\"          \n[4435] \"cargo_2035_29998336\"           \"cargo_2035_299993f8\"          \n[4437] \"cargo_2035_30000207\"           \"cargo_2035_300012b7\"          \n[4439] \"cargo_2035_300022ec\"           \"cargo_2035_300031b2\"          \n[4441] \"cargo_2035_300043df\"           \"cargo_2035_30008349\"          \n[4443] \"cargo_2035_300120af\"           \"cargo_2035_30013631\"          \n[4445] \"cargo_2035_3001480a\"           \"cargo_2035_30015428\"          \n[4447] \"cargo_2035_300163b6\"           \"cargo_2035_300178eb\"          \n[4449] \"cargo_2035_3001893d\"           \"cargo_2035_30019793\"          \n[4451] \"cargo_2035_3002057d\"           \"cargo_2035_30021d35\"          \n[4453] \"cargo_2035_3002241c\"           \"cargo_2035_3002397e\"          \n[4455] \"cargo_2035_30024917\"           \"cargo_2035_30025175\"          \n[4457] \"cargo_2035_300260a9\"           \"cargo_2035_3002772e\"          \n[4459] \"cargo_2035_3002807b\"           \"cargo_2035_30029c52\"          \n[4461] \"cargo_2035_30030863\"           \"cargo_2035_30031b94\"          \n[4463] \"cargo_2035_3003289d\"           \"cargo_2035_30033354\"          \n[4465] \"cargo_2035_30034fcb\"           \"cargo_2035_30035b54\"          \n[4467] \"cargo_2035_30037b14\"           \"cargo_2035_3003855b\"          \n[4469] \"cargo_2035_30039d5a\"           \"cargo_2035_30040ec7\"          \n[4471] \"cargo_2035_30041fbb\"           \"cargo_2035_30042f02\"          \n[4473] \"cargo_2035_30043c3d\"           \"cargo_2035_30044ebd\"          \n[4475] \"cargo_2035_30045f45\"           \"cargo_2035_300559dc\"          \n[4477] \"cargo_2035_30058c6c\"           \"cargo_2035_30059ce0\"          \n[4479] \"cargo_2035_3006062b\"           \"cargo_2035_30061643\"          \n[4481] \"cargo_2035_300629c9\"           \"cargo_2035_300636b1\"          \n[4483] \"cargo_2035_30064693\"           \"cargo_2035_30066ec9\"          \n[4485] \"cargo_2035_30068b22\"           \"cargo_2035_300695cb\"          \n[4487] \"cargo_2035_30070e25\"           \"cargo_2035_30071b2a\"          \n[4489] \"cargo_2035_30072067\"           \"cargo_2035_30073953\"          \n[4491] \"cargo_2035_30074147\"           \"cargo_2035_3007598a\"          \n[4493] \"cargo_2035_30078617\"           \"cargo_2035_300796bf\"          \n[4495] \"cargo_2035_300801ff\"           \"cargo_2035_300826bd\"          \n[4497] \"cargo_2035_300830e7\"           \"cargo_2035_30084063\"          \n[4499] \"cargo_2035_30086838\"           \"cargo_2035_30088fde\"          \n[4501] \"cargo_2035_300899bf\"           \"cargo_2035_30090425\"          \n[4503] \"cargo_2035_30091058\"           \"cargo_2035_3009245f\"          \n[4505] \"cargo_2035_30093db6\"           \"cargo_2035_300948ad\"          \n[4507] \"cargo_2035_30095425\"           \"cargo_2035_30096130\"          \n[4509] \"cargo_2035_30097e83\"           \"cargo_2035_30100a8f\"          \n[4511] \"cargo_2035_30101206\"           \"cargo_2035_30102afd\"          \n[4513] \"cargo_2035_30103c5f\"           \"cargo_2035_301042d8\"          \n[4515] \"cargo_2035_3010513f\"           \"cargo_2035_30106d3b\"          \n[4517] \"cargo_2035_30123357\"           \"cargo_2035_30124e81\"          \n[4519] \"cargo_2035_30125b3c\"           \"cargo_2035_3012623b\"          \n[4521] \"cargo_2035_30127d42\"           \"cargo_2035_30129c95\"          \n[4523] \"cargo_2035_30130cc1\"           \"cargo_2035_301315a9\"          \n[4525] \"cargo_2035_301324be\"           \"cargo_2035_30134eb2\"          \n[4527] \"cargo_2035_301354fe\"           \"cargo_2035_301366ed\"          \n[4529] \"cargo_2035_30137503\"           \"cargo_2035_30138cb4\"          \n[4531] \"cargo_2035_301396b8\"           \"cargo_2035_3014726c\"          \n[4533] \"cargo_2035_30148b7b\"           \"cargo_2035_30149550\"          \n[4535] \"cargo_2035_30150dcc\"           \"cargo_2035_30151578\"          \n[4537] \"cargo_2035_3015300c\"           \"cargo_2035_30154103\"          \n[4539] \"cargo_2035_3015569e\"           \"cargo_2035_30156210\"          \n[4541] \"cargo_2035_3015895b\"           \"cargo_2035_301594eb\"          \n[4543] \"cargo_2035_30160fdd\"           \"cargo_2035_30169e6e\"          \n[4545] \"cargo_2035_30170a9f\"           \"cargo_2035_3017173f\"          \n[4547] \"cargo_2035_301728c4\"           \"cargo_2035_301731e6\"          \n[4549] \"cargo_2035_301749e3\"           \"cargo_2035_301750ad\"          \n[4551] \"cargo_2035_301764d8\"           \"cargo_2035_301772a2\"          \n[4553] \"cargo_2035_301785a9\"           \"cargo_2035_30180de9\"          \n[4555] \"cargo_2035_30181bb3\"           \"cargo_2035_30182a44\"          \n[4557] \"cargo_2035_30183ae6\"           \"cargo_2035_30184f37\"          \n[4559] \"cargo_2035_3018660b\"           \"cargo_2035_3018758c\"          \n[4561] \"cargo_2035_3018810c\"           \"cargo_2035_30189d21\"          \n[4563] \"cargo_2035_30191324\"           \"cargo_2035_30199635\"          \n[4565] \"cargo_2035_30200d30\"           \"cargo_2035_30201c95\"          \n[4567] \"cargo_2035_30203441\"           \"cargo_2035_302046ea\"          \n[4569] \"cargo_2035_302059fc\"           \"cargo_2035_30206ebe\"          \n[4571] \"cargo_2035_30207536\"           \"cargo_2035_30208fbf\"          \n[4573] \"cargo_2035_302112d3\"           \"cargo_2035_302120cc\"          \n[4575] \"cargo_2035_302134a9\"           \"cargo_2035_30223407\"          \n[4577] \"cargo_2035_30224dfe\"           \"cargo_2035_3022581b\"          \n[4579] \"cargo_2035_30226817\"           \"cargo_2035_30227230\"          \n[4581] \"cargo_2035_302288f9\"           \"cargo_2035_30229204\"          \n[4583] \"cargo_2035_30230137\"           \"cargo_2035_30231f3f\"          \n[4585] \"cargo_2035_30232b8e\"           \"cargo_2035_30233d13\"          \n[4587] \"cargo_2035_30234fbb\"           \"cargo_2035_30235517\"          \n[4589] \"cargo_2035_302360cd\"           \"cargo_2035_30237bcb\"          \n[4591] \"cargo_2035_30238ddd\"           \"cargo_2035_30239f04\"          \n[4593] \"cargo_2035_302406cd\"           \"cargo_2035_3024190c\"          \n[4595] \"cargo_2035_30242a00\"           \"cargo_2035_302439a9\"          \n[4597] \"cargo_2035_302446f7\"           \"cargo_2035_30245bf4\"          \n[4599] \"cargo_2035_30246083\"           \"cargo_2035_302473e1\"          \n[4601] \"cargo_2035_30248744\"           \"cargo_2035_30249c66\"          \n[4603] \"cargo_2035_30250919\"           \"cargo_2035_30251c63\"          \n[4605] \"cargo_2035_30252a42\"           \"cargo_2035_30253518\"          \n[4607] \"cargo_2035_30254ce1\"           \"cargo_2035_3025500c\"          \n[4609] \"cargo_2035_30256573\"           \"cargo_2035_30257de4\"          \n[4611] \"cargo_2035_30258620\"           \"cargo_2035_3025997f\"          \n[4613] \"cargo_2035_30260350\"           \"cargo_2035_30261f0b\"          \n[4615] \"cargo_2035_302621cf\"           \"cargo_2035_30263e22\"          \n[4617] \"cargo_2035_30264231\"           \"cargo_2035_30265b44\"          \n[4619] \"cargo_2035_30266ac0\"           \"cargo_2035_30267a36\"          \n[4621] \"cargo_2035_3026839c\"           \"cargo_2035_30269e2b\"          \n[4623] \"cargo_2035_3027079e\"           \"cargo_2035_3027143c\"          \n[4625] \"cargo_2035_302722fc\"           \"cargo_2035_302733ff\"          \n[4627] \"cargo_2035_3027437a\"           \"cargo_2035_30275487\"          \n[4629] \"cargo_2035_302761f0\"           \"cargo_2035_30277d07\"          \n[4631] \"cargo_2035_3027877d\"           \"cargo_2035_302797bb\"          \n[4633] \"cargo_2035_30280a1e\"           \"cargo_2035_302813a9\"          \n[4635] \"cargo_2035_30282a37\"           \"cargo_2035_30283bb5\"          \n[4637] \"cargo_2035_30284b81\"           \"cargo_2035_30285a50\"          \n[4639] \"cargo_2035_30286bc9\"           \"cargo_2035_30287ee8\"          \n[4641] \"cargo_2035_302882a4\"           \"cargo_2035_3028912f\"          \n[4643] \"cargo_2035_30290bfe\"           \"cargo_2035_30291b57\"          \n[4645] \"cargo_2035_302927d2\"           \"cargo_2035_3029376e\"          \n[4647] \"cargo_2035_302940c8\"           \"cargo_2035_30295d47\"          \n[4649] \"cargo_2035_30296869\"           \"cargo_2035_30297b64\"          \n[4651] \"cargo_2035_30298048\"           \"cargo_2035_30299577\"          \n[4653] \"cargo_2035_30300343\"           \"cargo_2035_30301071\"          \n[4655] \"cargo_2035_3030231d\"           \"cargo_2035_303035eb\"          \n[4657] \"cargo_2035_30304a6c\"           \"cargo_2035_303051d4\"          \n[4659] \"cargo_2035_30306105\"           \"cargo_2035_30311568\"          \n[4661] \"cargo_2035_30318bbf\"           \"cargo_2035_30319583\"          \n[4663] \"cargo_2035_30320c86\"           \"cargo_2035_3032335e\"          \n[4665] \"cargo_2035_30324068\"           \"cargo_2035_30325e6f\"          \n[4667] \"cargo_2035_30326dcd\"           \"cargo_2035_30327dbc\"          \n[4669] \"cargo_2035_30329e0b\"           \"cargo_2035_303311f0\"          \n[4671] \"cargo_2035_30332424\"           \"cargo_2035_303342b5\"          \n[4673] \"cargo_2035_30343157\"           \"cargo_2035_30346df6\"          \n[4675] \"cargo_2035_30349477\"           \"cargo_2035_30350c6c\"          \n[4677] \"cargo_2035_30351c8f\"           \"cargo_2035_30354340\"          \n[4679] \"cargo_2035_30359570\"           \"cargo_2035_3036119a\"          \n[4681] \"cargo_2035_303621df\"           \"cargo_2035_30364fda\"          \n[4683] \"cargo_2035_3036555a\"           \"cargo_2035_30366564\"          \n[4685] \"cargo_2035_30367d19\"           \"cargo_2035_30376286\"          \n[4687] \"cargo_2035_303772d3\"           \"cargo_2035_30378594\"          \n[4689] \"cargo_2035_3037936c\"           \"cargo_2035_30380f54\"          \n[4691] \"cargo_2035_3038132f\"           \"cargo_2035_30382ec6\"          \n[4693] \"cargo_2035_3038348f\"           \"cargo_2035_30384456\"          \n[4695] \"cargo_2035_30385e81\"           \"cargo_2035_30386cd5\"          \n[4697] \"cargo_2035_303874a2\"           \"cargo_2035_303885d1\"          \n[4699] \"cargo_2035_30389d17\"           \"cargo_2035_30390aaf\"          \n[4701] \"cargo_2035_30391c82\"           \"cargo_2035_303924ee\"          \n[4703] \"cargo_2035_30393df9\"           \"cargo_2035_30394d9b\"          \n[4705] \"cargo_2035_30395196\"           \"cargo_2035_30396791\"          \n[4707] \"cargo_2035_30397fc7\"           \"cargo_2035_30398aa7\"          \n[4709] \"cargo_2035_303991bf\"           \"cargo_2035_304009e7\"          \n[4711] \"cargo_2035_304011fc\"           \"cargo_2035_3040263b\"          \n[4713] \"cargo_2035_304038a7\"           \"cargo_2035_304048d2\"          \n[4715] \"cargo_2035_3040535a\"           \"cargo_2035_30406ccb\"          \n[4717] \"cargo_2035_30407061\"           \"cargo_2035_30410dbd\"          \n[4719] \"cargo_2035_3041118d\"           \"cargo_2035_30412ea1\"          \n[4721] \"cargo_2035_30413936\"           \"cargo_2035_30414724\"          \n[4723] \"cargo_2035_304150fc\"           \"cargo_2035_30416fb5\"          \n[4725] \"cargo_2035_304171fb\"           \"cargo_2035_30418451\"          \n[4727] \"cargo_2035_30419f6a\"           \"cargo_2035_3042163c\"          \n[4729] \"cargo_2035_304228a1\"           \"cargo_2035_30423a5d\"          \n[4731] \"cargo_2035_304248b1\"           \"cargo_2035_304255a8\"          \n[4733] \"cargo_2035_30426770\"           \"cargo_2035_304356ce\"          \n[4735] \"cargo_2035_3043656c\"           \"cargo_2035_30437832\"          \n[4737] \"cargo_2035_30438bc3\"           \"cargo_2035_3043943d\"          \n[4739] \"cargo_2035_30440fb3\"           \"cargo_2035_30441e69\"          \n[4741] \"cargo_2035_304426f1\"           \"cargo_2035_30443dd2\"          \n[4743] \"cargo_2035_3044473d\"           \"cargo_2035_30445c4d\"          \n[4745] \"cargo_2035_30446083\"           \"cargo_2035_3044768e\"          \n[4747] \"cargo_2035_30448837\"           \"cargo_2035_30449092\"          \n[4749] \"cargo_2035_30450009\"           \"cargo_2035_30451ce5\"          \n[4751] \"cargo_2035_304526bb\"           \"cargo_2035_30453ba9\"          \n[4753] \"cargo_2035_30454d74\"           \"cargo_2035_3045572a\"          \n[4755] \"cargo_2035_30456213\"           \"cargo_2035_3045764a\"          \n[4757] \"cargo_2035_304589dc\"           \"cargo_2035_30459683\"          \n[4759] \"cargo_2035_3046053c\"           \"cargo_2035_30461db1\"          \n[4761] \"cargo_2035_30462072\"           \"cargo_2035_30463253\"          \n[4763] \"cargo_2035_3046426d\"           \"cargo_2035_3046594a\"          \n[4765] \"cargo_2035_304664aa\"           \"cargo_2035_3046743a\"          \n[4767] \"cargo_2035_30468f63\"           \"cargo_2035_30469ad7\"          \n[4769] \"cargo_2035_30470e7f\"           \"cargo_2035_30471e77\"          \n[4771] \"cargo_2035_304725ef\"           \"cargo_2035_30473cd2\"          \n[4773] \"cargo_2035_30474038\"           \"cargo_2035_304751a1\"          \n[4775] \"cargo_2035_304760cc\"           \"cargo_2035_304770c9\"          \n[4777] \"cargo_2035_30478819\"           \"cargo_2035_30479b43\"          \n[4779] \"cargo_2035_30490926\"           \"cargo_2035_3049746e\"          \n[4781] \"cargo_2035_30498d83\"           \"cargo_2035_30499991\"          \n[4783] \"cargo_2035_30501778\"           \"cargo_2035_305022d4\"          \n[4785] \"cargo_2035_305032c7\"           \"cargo_2035_30504feb\"          \n[4787] \"cargo_2035_305057ea\"           \"cargo_2035_30506221\"          \n[4789] \"cargo_2035_30508015\"           \"cargo_2035_30509b7e\"          \n[4791] \"cargo_2035_30510543\"           \"cargo_2035_30512a46\"          \n[4793] \"cargo_2035_30513aa6\"           \"cargo_2035_30514eb7\"          \n[4795] \"cargo_2035_30515de2\"           \"cargo_2035_30516e56\"          \n[4797] \"cargo_2035_30517597\"           \"cargo_2035_30518cdb\"          \n[4799] \"cargo_2035_3051925a\"           \"cargo_2035_305200c4\"          \n[4801] \"cargo_2035_3052181f\"           \"cargo_2035_30523c2b\"          \n[4803] \"cargo_2035_30524b23\"           \"cargo_2035_30525224\"          \n[4805] \"cargo_2035_3052669a\"           \"cargo_2035_30527791\"          \n[4807] \"cargo_2035_305281f3\"           \"cargo_2035_30529e66\"          \n[4809] \"cargo_2035_30530a5a\"           \"cargo_2035_30536eb6\"          \n[4811] \"cargo_2035_3053771c\"           \"cargo_2035_30538eb4\"          \n[4813] \"cargo_2035_305390b2\"           \"cargo_2035_30540706\"          \n[4815] \"cargo_2035_305416be\"           \"cargo_2035_305429c3\"          \n[4817] \"cargo_2035_30543bf8\"           \"cargo_2035_30544dae\"          \n[4819] \"cargo_2035_30545119\"           \"cargo_2035_305464b1\"          \n[4821] \"cargo_2035_3054745a\"           \"cargo_2035_30548bdf\"          \n[4823] \"cargo_2035_30549dae\"           \"cargo_2035_305503db\"          \n[4825] \"cargo_2035_3055178e\"           \"cargo_2035_305522ac\"          \n[4827] \"cargo_2035_305538c2\"           \"cargo_2035_30554f50\"          \n[4829] \"cargo_2035_305552bd\"           \"cargo_2035_30556020\"          \n[4831] \"cargo_2035_3055766e\"           \"cargo_2035_30558bb9\"          \n[4833] \"cargo_2035_305596dd\"           \"cargo_2035_30560d6b\"          \n[4835] \"cargo_2035_30561eba\"           \"cargo_2035_30562081\"          \n[4837] \"cargo_2035_3056326c\"           \"cargo_2035_30564fc0\"          \n[4839] \"cargo_2035_30565f32\"           \"cargo_2035_30566b7f\"          \n[4841] \"cargo_2035_30567289\"           \"cargo_2035_30568fd9\"          \n[4843] \"cargo_2035_305698a2\"           \"cargo_2035_30570d47\"          \n[4845] \"cargo_2035_305713ed\"           \"cargo_2035_30572f9e\"          \n[4847] \"cargo_2035_30573866\"           \"cargo_2035_30574851\"          \n[4849] \"cargo_2035_30575b08\"           \"cargo_2035_30576666\"          \n[4851] \"cargo_2035_305775cb\"           \"cargo_2035_30578cdb\"          \n[4853] \"cargo_2035_30579407\"           \"cargo_2035_3058093b\"          \n[4855] \"cargo_2035_30581013\"           \"cargo_2035_3058204f\"          \n[4857] \"cargo_2035_3058398b\"           \"cargo_2035_30584e50\"          \n[4859] \"cargo_2035_30586a0d\"           \"cargo_2035_305923dc\"          \n[4861] \"cargo_2035_305936cf\"           \"cargo_2035_30594fc6\"          \n[4863] \"cargo_2035_3059672e\"           \"cargo_2035_305977f2\"          \n[4865] \"cargo_2035_30598d85\"           \"cargo_2035_30599d46\"          \n[4867] \"cargo_2035_30600c5c\"           \"cargo_2035_30602a7c\"          \n[4869] \"cargo_2035_30603eae\"           \"cargo_2035_30604d4d\"          \n[4871] \"cargo_2035_306050d4\"           \"cargo_2035_306073eb\"          \n[4873] \"cargo_2035_30608c5b\"           \"cargo_2035_30609362\"          \n[4875] \"cargo_2035_3061099f\"           \"cargo_2035_30611e58\"          \n[4877] \"cargo_2035_306121c8\"           \"cargo_2035_30613613\"          \n[4879] \"cargo_2035_30614cc6\"           \"cargo_2035_30615a5f\"          \n[4881] \"cargo_2035_30616c80\"           \"cargo_2035_30618a20\"          \n[4883] \"cargo_2035_30619620\"           \"cargo_2035_306209aa\"          \n[4885] \"cargo_2035_30621ebd\"           \"cargo_2035_306229ef\"          \n[4887] \"cargo_2035_30623c77\"           \"cargo_2035_306249e8\"          \n[4889] \"cargo_2035_3062517d\"           \"cargo_2035_30632b33\"          \n[4891] \"cargo_2035_3064198a\"           \"cargo_2035_30642e8d\"          \n[4893] \"cargo_2035_30643ebf\"           \"cargo_2035_306447c1\"          \n[4895] \"cargo_2035_30645f1a\"           \"cargo_2035_3064686c\"          \n[4897] \"cargo_2035_30647e06\"           \"cargo_2035_30648b71\"          \n[4899] \"cargo_2035_306499b4\"           \"cargo_2035_306506f3\"          \n[4901] \"cargo_2035_30651f30\"           \"cargo_2035_30652c13\"          \n[4903] \"cargo_2035_30653d3a\"           \"cargo_2035_30654996\"          \n[4905] \"cargo_2035_3065574b\"           \"cargo_2035_306564ee\"          \n[4907] \"cargo_2035_306576f5\"           \"cargo_2035_30658c2d\"          \n[4909] \"cargo_2035_306592b5\"           \"cargo_2035_306606c7\"          \n[4911] \"cargo_2035_30661d48\"           \"cargo_2035_306628ab\"          \n[4913] \"cargo_2035_30663318\"           \"cargo_2035_3066427e\"          \n[4915] \"cargo_2035_30665466\"           \"cargo_2035_306664cd\"          \n[4917] \"cargo_2035_30667047\"           \"cargo_2035_306687af\"          \n[4919] \"cargo_2035_30670fc1\"           \"cargo_2035_30671c81\"          \n[4921] \"cargo_2035_30673e13\"           \"cargo_2035_3067488c\"          \n[4923] \"cargo_2035_3067552c\"           \"cargo_2035_30676cd7\"          \n[4925] \"cargo_2035_306771d1\"           \"cargo_2035_30678b81\"          \n[4927] \"cargo_2035_3067986a\"           \"cargo_2035_30680c1a\"          \n[4929] \"cargo_2035_306811dd\"           \"cargo_2035_30682647\"          \n[4931] \"cargo_2035_3068317d\"           \"cargo_2035_30684b3c\"          \n[4933] \"cargo_2035_3068585e\"           \"cargo_2035_306867b8\"          \n[4935] \"cargo_2035_306879ac\"           \"cargo_2035_30688284\"          \n[4937] \"cargo_2035_30689de6\"           \"cargo_2035_306906eb\"          \n[4939] \"cargo_2035_30691be0\"           \"cargo_2035_30695596\"          \n[4941] \"cargo_2035_30702ff0\"           \"cargo_2035_30703c19\"          \n[4943] \"cargo_2035_30704d88\"           \"cargo_2035_30705138\"          \n[4945] \"cargo_2035_30706a64\"           \"cargo_2035_307074f9\"          \n[4947] \"cargo_2035_30712fed\"           \"cargo_2035_30713d84\"          \n[4949] \"cargo_2035_3071496d\"           \"cargo_2035_307150a5\"          \n[4951] \"cargo_2035_3071603b\"           \"cargo_2035_30717901\"          \n[4953] \"cargo_2035_30718061\"           \"cargo_2035_307200df\"          \n[4955] \"cargo_2035_30721d2e\"           \"cargo_2035_3072258f\"          \n[4957] \"cargo_2035_30723715\"           \"cargo_2035_30724c68\"          \n[4959] \"cargo_2035_307253e8\"           \"cargo_2035_3072632b\"          \n[4961] \"cargo_2035_30727de6\"           \"cargo_2035_3072860a\"          \n[4963] \"cargo_2035_30739a22\"           \"cargo_2035_30740390\"          \n[4965] \"cargo_2035_30741521\"           \"cargo_2035_30742a1d\"          \n[4967] \"cargo_2035_30743a2d\"           \"cargo_2035_3074485b\"          \n[4969] \"cargo_2035_307454dc\"           \"cargo_2035_307463a5\"          \n[4971] \"cargo_2035_307479d8\"           \"cargo_2035_307485d2\"          \n[4973] \"cargo_2035_30750b67\"           \"cargo_2035_3075152b\"          \n[4975] \"cargo_2035_30752552\"           \"cargo_2035_30753949\"          \n[4977] \"cargo_2035_30754541\"           \"cargo_2035_3075590a\"          \n[4979] \"cargo_2035_30758cf7\"           \"cargo_2035_307597e4\"          \n[4981] \"cargo_2035_30761fc6\"           \"cargo_2035_30762ac7\"          \n[4983] \"cargo_2035_30763033\"           \"cargo_2035_30764d70\"          \n[4985] \"cargo_2035_30765a72\"           \"cargo_2035_307674ed\"          \n[4987] \"cargo_2035_307692d4\"           \"cargo_2035_30773848\"          \n[4989] \"cargo_2035_30774ed6\"           \"cargo_2035_30776c88\"          \n[4991] \"cargo_2035_307778a2\"           \"cargo_2035_30778b86\"          \n[4993] \"cargo_2035_3077983a\"           \"cargo_2035_30780f4e\"          \n[4995] \"cargo_2035_307817f9\"           \"cargo_2035_30783f4c\"          \n[4997] \"cargo_2035_30784bce\"           \"cargo_2035_30785cbb\"          \n[4999] \"cargo_2035_307867bd\"           \"cargo_2035_307878c6\"          \n[5001] \"cargo_2035_3078821a\"           \"cargo_2035_30789188\"          \n[5003] \"cargo_2035_30790f09\"           \"cargo_2035_3079182e\"          \n[5005] \"cargo_2035_307923f8\"           \"cargo_2035_3079515f\"          \n[5007] \"cargo_2035_3079657a\"           \"cargo_2035_307973ab\"          \n[5009] \"cargo_2035_307988bf\"           \"cargo_2035_30799c1b\"          \n[5011] \"cargo_2035_30800b66\"           \"cargo_2035_30801530\"          \n[5013] \"cargo_2035_308023fd\"           \"cargo_2035_30803011\"          \n[5015] \"cargo_2035_30804be7\"           \"cargo_2035_30805cfd\"          \n[5017] \"cargo_2035_308061a1\"           \"cargo_2035_308071a3\"          \n[5019] \"cargo_2035_3080809d\"           \"cargo_2035_30809b31\"          \n[5021] \"cargo_2035_308105ef\"           \"cargo_2035_30811cd2\"          \n[5023] \"cargo_2035_3081214c\"           \"cargo_2035_3081383e\"          \n[5025] \"cargo_2035_308148ab\"           \"cargo_2035_30815fa3\"          \n[5027] \"cargo_2035_30816b49\"           \"cargo_2035_30817c5a\"          \n[5029] \"cargo_2035_30818a31\"           \"cargo_2035_3081966f\"          \n[5031] \"cargo_2035_308206c8\"           \"cargo_2035_30821ffc\"          \n[5033] \"cargo_2035_30822e94\"           \"cargo_2035_30823571\"          \n[5035] \"cargo_2035_30830a38\"           \"cargo_2035_30834899\"          \n[5037] \"cargo_2035_30835473\"           \"cargo_2035_30836a2e\"          \n[5039] \"cargo_2035_308379bb\"           \"cargo_2035_3083806a\"          \n[5041] \"cargo_2035_308405ca\"           \"cargo_2035_30841778\"          \n[5043] \"cargo_2035_308421f2\"           \"cargo_2035_30843d4f\"          \n[5045] \"cargo_2035_308448a8\"           \"cargo_2035_30845f90\"          \n[5047] \"cargo_2035_3084607d\"           \"cargo_2035_3084708e\"          \n[5049] \"cargo_2035_30848126\"           \"cargo_2035_30849fbd\"          \n[5051] \"cargo_2035_308516a2\"           \"cargo_2035_308529c9\"          \n[5053] \"cargo_2035_30854fc7\"           \"cargo_2035_30855af5\"          \n[5055] \"cargo_2035_30856a1d\"           \"cargo_2035_30866514\"          \n[5057] \"cargo_2035_308675c3\"           \"cargo_2035_30868a7a\"          \n[5059] \"cargo_2035_30869e77\"           \"cargo_2035_30870365\"          \n[5061] \"cargo_2035_3087102f\"           \"cargo_2035_30872552\"          \n[5063] \"cargo_2035_308735fc\"           \"cargo_2035_30874d9f\"          \n[5065] \"cargo_2035_30875d13\"           \"cargo_2035_30877215\"          \n[5067] \"cargo_2035_30885f28\"           \"cargo_2035_308861d0\"          \n[5069] \"cargo_2035_30887f7e\"           \"cargo_2035_308881d9\"          \n[5071] \"cargo_2035_30889c75\"           \"cargo_2035_30890ee1\"          \n[5073] \"cargo_2035_308916cf\"           \"cargo_2035_30896070\"          \n[5075] \"cargo_2035_30902c40\"           \"cargo_2035_30903e68\"          \n[5077] \"cargo_2035_30905572\"           \"cargo_2035_309063bf\"          \n[5079] \"cargo_2035_30907673\"           \"cargo_2035_309086e5\"          \n[5081] \"cargo_2035_309095f5\"           \"cargo_2035_30910b82\"          \n[5083] \"cargo_2035_30911c34\"           \"cargo_2035_30912130\"          \n[5085] \"cargo_2035_309133cc\"           \"cargo_2035_3091485d\"          \n[5087] \"cargo_2035_309159a7\"           \"cargo_2035_30916888\"          \n[5089] \"cargo_2035_30917ed4\"           \"cargo_2035_30918c5c\"          \n[5091] \"cargo_2035_309191b8\"           \"cargo_2035_30920826\"          \n[5093] \"cargo_2035_309215fc\"           \"cargo_2035_30922a13\"          \n[5095] \"cargo_2035_30923b59\"           \"cargo_2035_30924fc8\"          \n[5097] \"cargo_2035_309251ce\"           \"cargo_2035_30926af9\"          \n[5099] \"cargo_2035_30927391\"           \"cargo_2035_30928e53\"          \n[5101] \"cargo_2035_30929e8b\"           \"cargo_2035_30930746\"          \n[5103] \"cargo_2035_309317ae\"           \"cargo_2035_30932ebf\"          \n[5105] \"cargo_2035_309332c9\"           \"cargo_2035_30934758\"          \n[5107] \"cargo_2035_309359c8\"           \"cargo_2035_30936853\"          \n[5109] \"cargo_2035_3093725a\"           \"cargo_2035_30938db5\"          \n[5111] \"cargo_2035_309397d3\"           \"cargo_2035_3094056e\"          \n[5113] \"cargo_2035_30941569\"           \"cargo_2035_309426ac\"          \n[5115] \"cargo_2035_30943975\"           \"cargo_2035_3094460c\"          \n[5117] \"cargo_2035_30945438\"           \"cargo_2035_30946e1b\"          \n[5119] \"cargo_2035_30947435\"           \"cargo_2035_30948989\"          \n[5121] \"cargo_2035_3094919a\"           \"cargo_2035_30950599\"          \n[5123] \"cargo_2035_30951e9c\"           \"cargo_2035_30952cdb\"          \n[5125] \"cargo_2035_30953045\"           \"cargo_2035_30955bf1\"          \n[5127] \"cargo_2035_309569de\"           \"cargo_2035_30957898\"          \n[5129] \"cargo_2035_30958c6b\"           \"cargo_2035_30959c64\"          \n[5131] \"cargo_2035_30960cb1\"           \"cargo_2035_30971f08\"          \n[5133] \"cargo_2035_30972007\"           \"cargo_2035_3097581d\"          \n[5135] \"cargo_2035_309766bd\"           \"cargo_2035_3097757c\"          \n[5137] \"cargo_2035_30978765\"           \"cargo_2035_30979513\"          \n[5139] \"cargo_2035_30980e29\"           \"cargo_2035_3098264f\"          \n[5141] \"cargo_2035_30983d6f\"           \"cargo_2035_30985367\"          \n[5143] \"cargo_2035_30986585\"           \"cargo_2035_30987fc7\"          \n[5145] \"cargo_2035_30994953\"           \"cargo_2035_30995884\"          \n[5147] \"cargo_2035_30996f0d\"           \"cargo_2035_30997d7e\"          \n[5149] \"cargo_2035_309981eb\"           \"cargo_2035_3100879b\"          \n[5151] \"cargo_2035_3101914e\"           \"cargo_2035_31020778\"          \n[5153] \"cargo_2035_31021bff\"           \"cargo_2035_31022179\"          \n[5155] \"cargo_2035_310232ba\"           \"cargo_2035_310248b8\"          \n[5157] \"cargo_2035_31025385\"           \"cargo_2035_31026d41\"          \n[5159] \"cargo_2035_31027a06\"           \"cargo_2035_31028978\"          \n[5161] \"cargo_2035_310297de\"           \"cargo_2035_31030cb2\"          \n[5163] \"cargo_2035_31031585\"           \"cargo_2035_3103288d\"          \n[5165] \"cargo_2035_31033cc7\"           \"cargo_2035_31034f25\"          \n[5167] \"cargo_2035_310354b0\"           \"cargo_2035_31036a94\"          \n[5169] \"cargo_2035_310370ab\"           \"cargo_2035_310389d2\"          \n[5171] \"cargo_2035_31039a47\"           \"cargo_2035_310408c2\"          \n[5173] \"cargo_2035_310413a4\"           \"cargo_2035_310428b5\"          \n[5175] \"cargo_2035_31043083\"           \"cargo_2035_31044b06\"          \n[5177] \"cargo_2035_31045175\"           \"cargo_2035_31046133\"          \n[5179] \"cargo_2035_31047956\"           \"cargo_2035_31048be2\"          \n[5181] \"cargo_2035_31049f79\"           \"cargo_2035_310508e0\"          \n[5183] \"cargo_2035_31051dd0\"           \"cargo_2035_3105225e\"          \n[5185] \"cargo_2035_31053df7\"           \"cargo_2035_31054481\"          \n[5187] \"cargo_2035_31055ddb\"           \"cargo_2035_31056a34\"          \n[5189] \"cargo_2035_31057dce\"           \"cargo_2035_31058d76\"          \n[5191] \"cargo_2035_310598ab\"           \"cargo_2035_31060614\"          \n[5193] \"cargo_2035_310613a3\"           \"cargo_2035_31062215\"          \n[5195] \"cargo_2035_31063fbe\"           \"cargo_2035_31064a2a\"          \n[5197] \"cargo_2035_31065cce\"           \"cargo_2035_31066a7c\"          \n[5199] \"cargo_2035_31067f54\"           \"cargo_2035_31068235\"          \n[5201] \"cargo_2035_310699b3\"           \"cargo_2035_31070bbb\"          \n[5203] \"cargo_2035_3107191d\"           \"cargo_2035_31072d52\"          \n[5205] \"cargo_2035_310739f8\"           \"cargo_2035_310742de\"          \n[5207] \"cargo_2035_31075478\"           \"cargo_2035_31076def\"          \n[5209] \"cargo_2035_3107737f\"           \"cargo_2035_31078970\"          \n[5211] \"cargo_2035_31079c7f\"           \"cargo_2035_31080c9e\"          \n[5213] \"cargo_2035_31081ef9\"           \"cargo_2035_31082498\"          \n[5215] \"cargo_2035_3108323d\"           \"cargo_2035_310846aa\"          \n[5217] \"cargo_2035_31085392\"           \"cargo_2035_31086049\"          \n[5219] \"cargo_2035_3108726c\"           \"cargo_2035_31088084\"          \n[5221] \"cargo_2035_3108971c\"           \"cargo_2035_31090b5f\"          \n[5223] \"cargo_2035_31091ed9\"           \"cargo_2035_310926f0\"          \n[5225] \"cargo_2035_310938e9\"           \"cargo_2035_310944c5\"          \n[5227] \"cargo_2035_31095ee3\"           \"cargo_2035_310961da\"          \n[5229] \"cargo_2035_310975e4\"           \"cargo_2035_31098e2b\"          \n[5231] \"cargo_2035_3109983b\"           \"cargo_2035_31100fa8\"          \n[5233] \"cargo_2035_31101a05\"           \"cargo_2035_3110239d\"          \n[5235] \"cargo_2035_3110356d\"           \"cargo_2035_31104424\"          \n[5237] \"cargo_2035_311053bb\"           \"cargo_2035_311066e6\"          \n[5239] \"cargo_2035_3110783e\"           \"cargo_2035_31108bc0\"          \n[5241] \"cargo_2035_31109fa8\"           \"cargo_2035_31110ab7\"          \n[5243] \"cargo_2035_31111793\"           \"cargo_2035_3111290e\"          \n[5245] \"cargo_2035_31113cd7\"           \"cargo_2035_31114b72\"          \n[5247] \"cargo_2035_31116776\"           \"cargo_2035_31117e26\"          \n[5249] \"cargo_2035_311180e9\"           \"cargo_2035_31119aa3\"          \n[5251] \"cargo_2035_31120920\"           \"cargo_2035_31121366\"          \n[5253] \"cargo_2035_311221a0\"           \"cargo_2035_31123808\"          \n[5255] \"cargo_2035_311245dd\"           \"cargo_2035_31125ff0\"          \n[5257] \"cargo_2035_31127e0f\"           \"cargo_2035_31128225\"          \n[5259] \"cargo_2035_3112923f\"           \"cargo_2035_31130f80\"          \n[5261] \"cargo_2035_3113160d\"           \"cargo_2035_3113227e\"          \n[5263] \"cargo_2035_31133103\"           \"cargo_2035_3113485f\"          \n[5265] \"cargo_2035_3113505b\"           \"cargo_2035_311367b9\"          \n[5267] \"cargo_2035_31138b98\"           \"cargo_2035_3113943e\"          \n[5269] \"cargo_2035_3114013f\"           \"cargo_2035_31141efd\"          \n[5271] \"cargo_2035_31142cb2\"           \"cargo_2035_31143154\"          \n[5273] \"cargo_2035_3114447b\"           \"cargo_2035_311451b5\"          \n[5275] \"cargo_2035_31146b3e\"           \"cargo_2035_311470e5\"          \n[5277] \"cargo_2035_31149290\"           \"cargo_2035_31156e4e\"          \n[5279] \"cargo_2035_31157f2a\"           \"cargo_2035_311580af\"          \n[5281] \"cargo_2035_31159a6e\"           \"cargo_2035_31160a12\"          \n[5283] \"cargo_2035_311618c7\"           \"cargo_2035_31162023\"          \n[5285] \"cargo_2035_31163f79\"           \"cargo_2035_311646d8\"          \n[5287] \"cargo_2035_31165896\"           \"cargo_2035_3116751f\"          \n[5289] \"cargo_2035_31168128\"           \"cargo_2035_311693d8\"          \n[5291] \"cargo_2035_31170515\"           \"cargo_2035_31171e1b\"          \n[5293] \"cargo_2035_3117306a\"           \"cargo_2035_31174e0f\"          \n[5295] \"cargo_2035_311757d0\"           \"cargo_2035_31176568\"          \n[5297] \"cargo_2035_311788c3\"           \"cargo_2035_3117920f\"          \n[5299] \"cargo_2035_31180d28\"           \"cargo_2035_3118141a\"          \n[5301] \"cargo_2035_3118220f\"           \"cargo_2035_31183e46\"          \n[5303] \"cargo_2035_31184b29\"           \"cargo_2035_311854e6\"          \n[5305] \"cargo_2035_31186ea8\"           \"cargo_2035_31187527\"          \n[5307] \"cargo_2035_31189bb6\"           \"cargo_2035_3119010f\"          \n[5309] \"cargo_2035_3119118e\"           \"cargo_2035_3119237c\"          \n[5311] \"cargo_2035_311936c4\"           \"cargo_2035_31194d62\"          \n[5313] \"wavewranglerc2d\"               \"yellowfintunataker08b\"        \n[5315] \"webigailba7\"                   \"arcticgraylingangler094\"      \n[5317] \"anchovyassaulterb1c\"           \"oceanreaper44a\"               \n[5319] \"herringharpooner843\"           \"halibuthunterd84\"             \n[5321] \"brooktroutbuccaneerc0b\"        \"venerable89c\"                 \n[5323] \"groupergrabber60d\"             \"welscatfishwrangler6ae\"       \n[5325] \"skipjacktunatakerf85\"          \"seawaysavvy9847\"              \n[5327] \"pacificcodcapturer81c\"         \"bluefishbandit8ec\"            \n[5329] \"maritimemaelstromc5d\"          \"europeanperchpirated9b\"       \n[5331] \"whitefishwrangler7df\"          \"sturdyd7f\"                    \n[5333] \"longfintunalooterf32\"          \"plaicepirate8c6\"              \n[5335] \"pikeplunderer0ca\"              \"albacoreangler47d\"            \n[5337] \"pikepirate89a\"                 \"flatheadcatfishfindera51\"     \n[5339] \"burbotbandit7bf\"               \"clamclaimer13d\"               \n[5341] \"neptunesnete8c\"                \"shrimpshooter91c\"             \n[5343] \"aquaticangler5c3\"              \"blackbullheadbandit801\"       \n[5345] \"turbottakerd86\"                \"seaswindler255\"               \n[5347] \"atlanticbluemarlinmarauder0b4\" \"laketroutlooter534\"           \n[5349] \"dolphindasher004\"              \"oceanicoracle9da\"             \n[5351] \"stout369\"                      \"tidetamerbe1\"                 \n[5353] \"mackerelmarauder2d4\"           \"grasspickerelgangster7d1\"     \n[5355] \"harborharmonyfc9\"              \"barracudabaiter8b3\"           \n[5357] \"nauticalnomada36\"              \"wavewarrior5d7\"               \n[5359] \"cargocatalyst39a7\"             \"bluemarlinbandit292\"          \n[5361] \"longnosesuckerseeker6ab\"       \"halibuthero9b9\"               \n[5363] \"marinemarauder8c9\"             \"yellowperchpiratec59\"         \n[5365] \"inquisitive8c0\"                \"pompanoplunderere5d\"          \n[5367] \"herringhunter30b\"              \"musselmaster8d8\"              \n[5369] \"speckledtroutsaboteur509\"      \"swordfishswindler37b\"         \n[5371] \"sharkshooterd66\"               \"marlinmaster8ab\"              \n[5373] \"mackerelmariner70c\"            \"pollockpirate212\"             \n[5375] \"perchpursuer982\"               \"rainbowtroutraider4d0\"        \n[5377] \"vesselvertexa2e\"               \"skipjacktunaseeker76c\"        \n[5379] \"haddockhawkb7c\"                \"catchcruisera94\"              \n[5381] \"bigeyetunabuccaneera16\"        \"codfather685\"                 \n[5383] \"cohosalmoncapturera7b\"         \"largemouthbasslooterf95\"      \n[5385] \"snappersnatcher7be\"            \"malta8cc\"                     \n[5387] \"hooklinesinkera2d\"             \"redfinpickerelraider744\"      \n[5389] \"tigermuskellungemaster012\"     \"sockeyesalmonseekerb95\"       \n[5391] \"trouttracker43b\"               \"atlanticcodcatcherca6\"        \n[5393] \"fishtracker03e\"                \"flukefinder28d\"               \n[5395] \"chumsalmoncatcher41e\"          \"saltyskippera9e\"              \n[5397] \"perchplundererbc0\"             \"stripedbassseeker80c\"         \n[5399] \"gurnardgrabberd9a\"             \"dewie961\"                     \n[5401] \"swordfishsaboteur22f\"          \"whitingwrangler842\"           \n[5403] \"vesselventuredfa\"              \"City of Port Grove\"           \n[5405] \"carpcatcher3f4\"                \"himarkroyal032\"               \n[5407] \"mrray9c4\"                      \"whelkwrangler9ac\"             \n[5409] \"manatee17ea\"                   \"hewey2ef\"                     \n[5411] \"tenchtaker595\"                 \"pinksalmonpirate2a3\"          \n[5413] \"seasentinel1c4b\"               \"maritimematrix7755\"           \n[5415] \"maritimemajesticeb7\"           \"bluecatfishcatcher468\"        \n[5417] \"carpcapturer993\"               \"goldfishgrabber270\"           \n[5419] \"soleseeker47a\"                 \"whitefishwhisperer6df\"        \n[5421] \"cutthroattroutcatchere2b\"      \"haddockhunter1a7\"             \n[5423] \"seawaysavvy102\"                \"brinebuccaneer9fd\"            \n[5425] \"redfishraider677\"              \"roachraider7ce\"               \n[5427] \"europeaneelenthusiastf9f\"      \"chainpickerelplunderer039\"    \n[5429] \"marinersmate8ee\"               \"snooksnatcherbdb\"             \n[5431] \"squidsquad7fd\"                 \"baitedbreath538\"              \n[5433] \"blueharbor2c1\"                 \"goldentroutgrabber7f6\"        \n[5435] \"yellowbullheadbuccaneer968\"    \"tunatrawlerafd\"               \n[5437] \"cargocentric4d0\"               \"ladyfishlooter7ea\"            \n[5439] \"deepseadrifter9f2\"             \"seahunter56b\"                 \n[5441] \"freightfrontiers1bc\"           \"honorablea6e\"                 \n[5443] \"bluegillbandita5f\"             \"eelenthusiast8c6\"             \n[5445] \"costasmeraldaac7\"              \"clownfishe3d\"                 \n[5447] \"maritimemomentumfab\"           \"seaserpent4b4\"                \n[5449] \"walleyewranglerda0\"            \"louietheii3e0\"                \n[5451] \"eelensnarerd3a\"                \"harborhelios585\"              \n[5453] \"bigeyetunabanditb73\"           \"lobsterlooterd41\"             \n[5455] \"shipmatrix9b4\"                 \"oysteropener442\"              \n[5457] \"cargocatalystb02\"              \"channelcatfishcapturer175\"    \n[5459] \"trawlertriumph31f\"             \"spanishmackerelmaster037\"     \n[5461] \"bonefishbaiter565\"             \"kingfisher87d\"                \n[5463] \"tunataker80c\"                  \"tarpontaker6cd\"               \n[5465] \"fishfinderb9d\"                 \"kingfishcapturerbe7\"          \n[5467] \"wahoowrangler016\"              \"zanderzealotb23\"              \n[5469] \"mackerelmaster0a5\"             \"ruddraiderced\"                \n[5471] \"sailfishseeker8d5\"             \"transatlantic77d\"             \n[5473] \"bluefintunabandit177\"          \"respectable717\"               \n[5475] \"seabassbandit9ad\"              \"spiritofoceanus404\"           \n[5477] \"barracudabandit836\"            \"codcatcher04c\"                \n[5479] \"europeanseabassbuccaneer777\"   \"squidsquasherda9\"             \n[5481] \"bassbandit0d5\"                 \"cobiacapturere5e\"             \n[5483] \"flounderfinderd64\"             \"salmonseeker630\"              \n[5485] \"northernpikepirated97\"         \"sailfishswindlerb4f\"          \n[5487] \"muskellungemastere7c\"          \"seasirenf43\"                  \n[5489] \"steelheadstalkera87\"           \"clamcatcherfb3\"               \n[5491] \"brillbandit0a1\"                \"huron1b3\"                     \n[5493] \"fishflingere29\"                \"muskellungemarauder78c\"       \n[5495] \"crappiecapturer875\"            \"freightfrequency5f65\"         \n[5497] \"plaiceplundererba1\"            \"albacoreassaulter482\"         \n[5499] \"seabreamseekerd8b\"             \"wahoowarriord42\"              \n[5501] \"musselmaraudere9b\"             \"americaneelenthusiastcfa\"     \n[5503] \"mahimahimaster04f\"             \"brownbullheadbriganded2\"      \n[5505] \"bassbaiterb9f\"                 \"sardineseeker62e\"             \n[5507] \"blackdrumbanditc5b\"            \"graylinggrabber802\"           \n[5509] \"browntroutbandite67\"           \"kingsalmonking5b4\"            \n[5511] \"salmonsnatcher19d\"             \"amberjackassaulterd52\"        \n[5513] \"breambanditc85\"                \"oceanoracle1d0\"               \n[5515] \"whitesuckerwrangler0b3\"        \"swimmingsafely92d\"            \n[5517] \"vesselvictory3738\"             \"oceanicoasis15f6\"             \n[5519] \"harborhalo9dd6\"                \"transpacificed8\"              \n[5521] \"freightfirm27f\"                \"catfishcapturer7a8\"           \n[5523] \"opheliacac\"                    \"aquaticpursuitf31\"            \n[5525] \"whitemarlinwranglerbac\"        \"tautogtaker867\"               \n[5527] \"seawayspectra490\"              \"cargocircuit26cc\"             \n[5529] \"crabcatcher1aa\"                \"louieda4\"                     \n[5531] \"weakfishwranglerd3c\"           \"roachrobberdb6\"               \n[5533] \"oceanicoasisd3f\"               \"posiedonsparadise7e6\"         \n[5535] \"prawnpredator5d7\"              \"seasovereignc6e\"              \n[5537] \"oceanicodyssey11207\"           \"freightfortef0d\"              \n[5539] \"nauticalnetworks865\"           \"whitemarlinmasterfa1\"         \n[5541] \"maritimemiraclef85\"            \"vesselvanguardbf2\"            \n[5543] \"seasystem375\"                  \"seasanctuary505\"              \n[5545] \"seasystem3e22\"                 \"athenad34\"                    \n[5547] \"freightforte6f28\"              \"vesselvistad0c\"               \n[5549] \"nauticalnirvana874\"            \"oceanoptimum9f4\"              \n[5551] \"maritimemomentum8d12\"          \"transpolar2a4\"                \n[5553] \"maritimemover13f\"              \"transoceane48\"                \n[5555] \"maritimemastersd93\"            \"seasphere38e\"                 \n[5557] \"transatlantic47a9\"             \"cargocircuit545\"              \n[5559] \"seawayservicesc71\"             \"harborhalo603\"                \n[5561] \"oceanicodyssey5dd\"             \"nauticalnimbusa99\"            \n[5563] \"harborhavenf91\"                \"maritimematrix51a\"            \n[5565] \"vesselventure46e5\"             \"nauticalnexus1a5d\"            \n[5567] \"freightfrontiers7134\"          \"transglobal266\"               \n[5569] \"seasentry2e28\"                 \"cargocosmoscde\"               \n[5571] \"oceanicline3de\"                \"oceanicoverturec58\"           \n[5573] \"harborhorizon6c6\"              \"transcontinentalcf3\"          \n[5575] \"freightfrequencyfea\"           \"harborholdings797\"            \n[5577] \"seawaysurgeb1c\"                \"harborhorizon10ecb\"           \n[5579] \"cargocrestb7c\"                 \"freightflux254\"               \n[5581] \"nauticalnexus6cc\"              \"oceanicoracle2bf2\"            \n[5583] \"transglobal607c\"               \"vesselventuresc7e\"            \n[5585] \"freightfusion141\"              \"nauticalnucleusc5a\"           \n[5587] \"freightfountaind90\"            \"cargocynosure29d\"             \n[5589] \"vesselvanguard5d06\"            \"cargocentric443e\"             \n[5591] \"vesselvortex355\"               \"vesselvictoryafd\"             \n[5593] \"aquatransit6bc\"                \"harborhelix456\"               \n[5595] \"seasolutions4d5\"               \"seawaysynergybaf\"             \n[5597] \"seawaysynergy8489\"             \"transpacific5ada\"             \n[5599] \"seasentry1d3\"                  \"nauticalnomad11356\"           \n[5601] \"bulkcarriers6cd\"               \"seasentinel24e\"               \n[5603] \"nauticalnavigatorabd\"          \"seawayspectrumca2\"            \n[5605] \"oceanicomnipotenta4a\"          \"heartofoceanusf11\"            \n[5607] \"seawaysage5ce\"                 \"nauticalnucleus107c4\"         \n[5609] \"maritimemagnitude2e9\"          \"Exit West\"                    \n[5611] \"Nav 3\"                         \"Nav D\"                        \n[5613] \"Nav B\"                         \"Nav A\"                        \n[5615] \"Nav C\"                         \"Nav 2\"                        \n[5617] \"Nav 1\"                         \"Exit East\"                    \n[5619] \"Exit South\"                    \"Exit North\"                   \n[5621] \"Nav E\"                         \"Cod Table\"                    \n[5623] \"Ghoti Preserve\"                \"Wrasse Beds\"                  \n[5625] \"Nemo Reef\"                     \"Don Limpet Preserve\"          \n[5627] \"Tuna Shelf\"                   \n\n\n\n# Filter cargo vessels and select specific columns with renaming\ncargo_vessel &lt;- mc2_nodes_cleaned %&gt;%\n  filter(type %in% c(\"Entity.Vessel.CargoVessel\")) %&gt;%\n  select(\n    vessel_type = type,\n    cargo_vessel_id = id,\n    cargo_vessel_name = Name,\n    company\n  )\n\n\nunique(fishing_vessel$company)\n\n [1] \"Roth, Logan and Moreno\"                   \n [2] \"Brown-Haas\"                               \n [3] \"Smith, Davis and Acosta\"                  \n [4] \"Cisneros-Meyer\"                           \n [5] \"FlounderLeska Marine BV\"                  \n [6] \"House Group\"                              \n [7] \"Weaver-Baker\"                             \n [8] \"Stewart, Perkins and Sanchez\"             \n [9] \"ScaniaSeafood Holdings Ltd. Liability Co\" \n[10] \"Mccormick Group\"                          \n[11] \"Parks Ltd\"                                \n[12] \"Taylor-Sawyer\"                            \n[13] \"Nielsen, Valentine and Bell\"              \n[14] \"Jacobson Inc\"                             \n[15] \"Ballard-Bailey\"                           \n[16] \"Steele PLC\"                               \n[17] \"WestRiver Shipping KgaA\"                  \n[18] \"Robinson, Mcmillan and Watson\"            \n[19] \"Lowery-Myers\"                             \n[20] \"Dyer-Campbell\"                            \n[21] \"Adkins LLC\"                               \n[22] \"BaringoAmerica Marine Ges.m.b.H.\"         \n[23] \"Terry, Smith and Lyons\"                   \n[24] \"Schmidt Ltd\"                              \n[25] \"Ritter Ltd\"                               \n[26] \"Decker PLC\"                               \n[27] \"Faulkner, Shaffer and Moyer\"              \n[28] \"Brown-Allen\"                              \n[29] \"Bell, Reynolds and Forbes\"                \n[30] \"French Ltd\"                               \n[31] \"Rivera Group\"                             \n[32] \"Bowers Group\"                             \n[33] \"MonarchCreek Shipping S.p.A.\"             \n[34] \"Mendez-Tyler\"                             \n[35] \"Mooney, Stevenson and Miller\"             \n[36] \"Garcia-Wallace\"                           \n[37] \"Cox-Mason\"                                \n[38] \"Garcia-Sanchez\"                           \n[39] \"Sutton PLC\"                               \n[40] \"Rasmussen, Nelson and King\"               \n[41] \"Brown, Clarke and Martinez\"               \n[42] \"Gomez-Mccormick\"                          \n[43] \"Solis-Lopez\"                              \n[44] \"SouthSeafood Express Corp\"                \n[45] \"Clark, Hall and Cole\"                     \n[46] \"Cox-Donovan\"                              \n[47] \"Solis PLC\"                                \n[48] \"Newton-Meyer\"                             \n[49] \"Mcpherson-Wright\"                         \n[50] \"Cordova, Ritter and Flores\"               \n[51] \"Miller, Smith and Reed\"                   \n[52] \"Barnes and Sons\"                          \n[53] \"Bennett, Jones and Miller\"                \n[54] \"Mercado, French and Graham\"               \n[55] \"Brewer-Massey\"                            \n[56] \"Norman LLC\"                               \n[57] \"Wiley LLC\"                                \n[58] \"Davis, Harris and West\"                   \n[59] \"Goodman LLC\"                              \n[60] \"Reid, Thomas and Gill\"                    \n[61] \"Henry-Alvarez\"                            \n[62] \"Lane Group\"                               \n[63] \"Smith, Collins and Johnson\"               \n[64] \"Franco, Olson and Long\"                   \n[65] \"Dry CreekWorldLogistics Ltd. Liability Co\"\n[66] \"Rodriguez, Henry and Woodard\"             \n[67] \"Thompson-Padilla\"                         \n[68] \"Carter, Mcdonald and Miller\"              \n[69] \"Williams, Horn and Morales\"               \n[70] \"Callahan-Green\"                           \n[71] \"Green, Vincent and Thompson\"              \n[72] \"Lake Malawi  Corp United\"                 \n[73] \"Wolf and Sons\"                            \n[74] \"Hernandez Group\"                          \n[75] \"Horne Group\"                              \n[76] \"Fischer, Graham and Robinson\"             \n[77] \"Chavez and Sons\"                          \n[78] \"Maacama Ocean Worldwide LLC\"              \n[79] \"Jordan and Sons\"                          \n[80] \"Martin-Case\"                              \n[81] \"Murphy and Sons\"                          \n[82] \"Collins, Johnson and Lloyd\"               \n[83] \"Sparmans Marine Carriers Oyj\"             \n[84] \"Mullins-Carrillo\"                         \n[85] \"Riley Inc\"                                \n[86] \"NortheastSeafood Carriers Ltd\"            \n[87] \"Chambers, Hall and Walker\"                \n[88] \"Osborne and Sons\"                         \n[89] \"Conley, Benton and Miller\"                \n[90] \"Saltwater Sisters Company Marine\"         \n[91] \"Costa de Oro Enterprises\"                 \n[92] \"Bailey-Mccullough\"                        \n[93] \"Chase, Long and Anderson\"                 \n[94] \"Vasquez-Gonzalez\"                         \n[95] \"Harper and Sons\"                          \n[96] \"Tainamarine Fishing Co\"                   \n[97] \"Mcdonald-Jones\"                           \n[98] \"George-Brown\"                             \n[99] \"SamakaDredgeTransport OJSC\"               \n\n\n\nOceanusGeography = st_read(\"data/OceanusGeography.geojson\") %&gt;%\n  st_transform(crs = 4326)\n\nReading layer `OceanusGeography' from data source \n  `C:\\aryasiahaan\\ISSS608-VAA\\Take-home_Ex\\Take-home_Ex03\\data\\OceanusGeography.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 29 features and 7 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n\n\n\nclass(OceanusGeography)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\nglimpse(OceanusGeography)\n\nRows: 29\nColumns: 8\n$ Name                 &lt;chr&gt; \"Suna Island\", \"Thalassa Retreat\", \"Makara Shoal\"…\n$ Description          &lt;chr&gt; \"Large island of Oceanus\", \"Smaller island of Oce…\n$ X.note               &lt;chr&gt; \"Suna is 'sand' or 'gritty' in Japanese\", \"Thalas…\n$ type                 &lt;chr&gt; \"Entity.Location.Region\", \"Entity.Location.Region…\n$ X.Kind               &lt;chr&gt; \"Island\", \"Island\", \"Island\", \"Island\", \"Fishing …\n$ Activities           &lt;list&gt; \"Residential\", \"Residential\", \"Recreation\", &lt;\"To…\n$ fish_species_present &lt;list&gt; &lt;&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, &lt;\"Cod/Gadus n.specificatae\", \"Bi…\n$ geometry             &lt;GEOMETRY [°]&gt; MULTIPOLYGON (((-166.0111 3..., MULTIPOL…\n\n\n\nggplot(data = OceanusGeography) +\n  geom_sf()\n\n\n\n\n\n\n\n\n\nwrite_rds(OceanusGeography, \"data/rds/OceanusGeography.rds\")\n\n\nOceanusLocations &lt;- st_read(dsn = \"data/shp\",\n  layer = \"Oceanus Geography\")\n\nReading layer `Oceanus Geography' from data source \n  `C:\\aryasiahaan\\ISSS608-VAA\\Take-home_Ex\\Take-home_Ex03\\data\\shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 27 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n\n\n\nclass(OceanusLocations)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\nglimpse(OceanusLocations)\n\nRows: 27\nColumns: 8\n$ Name       &lt;chr&gt; \"Haacklee\", \"Port Grove\", \"Lomark\", \"Himark\", \"Paackland\", …\n$ Descriptio &lt;chr&gt; NA, NA, NA, NA, NA, \"Adimistrative seat of Oceanus\", NA, NA…\n$ X.note     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ Activities &lt;chr&gt; \"Tourism,Local shipping\", \"Tourism,Research\", \"Deep sea fis…\n$ type       &lt;chr&gt; \"Entity.Location.City\", \"Entity.Location.City\", \"Entity.Loc…\n$ X.Kind     &lt;chr&gt; \"city\", \"city\", \"city\", \"city\", \"city\", \"city\", \"city\", \"bu…\n$ fish_speci &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   &lt;POINT [°]&gt; POINT (-165.6908 39.03215), POINT (-165.8855 39.10005…\n\n\n\nggplot(data = OceanusLocations) +\n  geom_sf()\n\n\n\n\n\n\n\n\n\nwrite_rds(OceanusLocations, \n  \"data/rds/OceanusLocations.rds\")\n\n\nvessel_movement_data &lt;- mc2_edges %&gt;%\n  filter(event3 == \"TransponderPing\") %&gt;%\n  select(time, dwell, source, target)\n\n\nunique(vessel_movement_data$source)\n\n [1] \"City of Haacklee\"        \"City of Lomark\"         \n [3] \"City of Himark\"          \"City of Paackland\"      \n [5] \"City of South Paackland\" \"City of Port Grove\"     \n [7] \"Exit West\"               \"Nav 3\"                  \n [9] \"Nav D\"                   \"Nav B\"                  \n[11] \"Nav A\"                   \"Nav C\"                  \n[13] \"Nav 2\"                   \"Nav 1\"                  \n[15] \"Exit East\"               \"Exit South\"             \n[17] \"Exit North\"              \"Nav E\"                  \n[19] \"Cod Table\"               \"Ghoti Preserve\"         \n[21] \"Wrasse Beds\"             \"Nemo Reef\"              \n[23] \"Don Limpet Preserve\"     \"Tuna Shelf\"             \n\n\n\nunique(OceanusLocations$Name)\n\n [1] \"Haacklee\"            \"Port Grove\"          \"Lomark\"             \n [4] \"Himark\"              \"Paackland\"           \"Centralia\"          \n [7] \"South Paackland\"     \"Exit West\"           \"Nav 3\"              \n[10] \"Nav D\"               \"Nav B\"               \"Nav A\"              \n[13] \"Nav C\"               \"Nav 2\"               \"Nav 1\"              \n[16] \"Exit East\"           \"Exit South\"          \"Exit North\"         \n[19] \"Nav E\"               \"Don Limpet Preserve\" \"Tuna Shelf\"         \n[22] \"Makara Shoal\"        \"Silent Sanctuary\"    \"Cod Table\"          \n[25] \"Ghoti Preserve\"      \"Wrasse Beds\"         \"Nemo Reef\"          \n\n\n\nvessel_movement_data &lt;- vessel_movement_data %&gt;%\n  mutate(source = gsub(\"^City of\", \"\", source)) %&gt;%\n  mutate(source = gsub(\"^\\\\s+\", \"\", source))\n\n\nunique(vessel_movement_data$source)\n\n [1] \"Haacklee\"            \"Lomark\"              \"Himark\"             \n [4] \"Paackland\"           \"South Paackland\"     \"Port Grove\"         \n [7] \"Exit West\"           \"Nav 3\"               \"Nav D\"              \n[10] \"Nav B\"               \"Nav A\"               \"Nav C\"              \n[13] \"Nav 2\"               \"Nav 1\"               \"Exit East\"          \n[16] \"Exit South\"          \"Exit North\"          \"Nav E\"              \n[19] \"Cod Table\"           \"Ghoti Preserve\"      \"Wrasse Beds\"        \n[22] \"Nemo Reef\"           \"Don Limpet Preserve\" \"Tuna Shelf\"         \n\n\n\ncoords &lt;- st_coordinates(OceanusLocations)\n\n\nOceanusLocations_df &lt;- OceanusLocations %&gt;%\n  st_drop_geometry()\n\n\nOceanusLocations_df$XCOORD &lt;- coords[, \"X\"]\nOceanusLocations_df$YCOORD &lt;- coords[, \"Y\"]\n\n\nclass(OceanusLocations_df)\n\n[1] \"data.frame\"\n\n\n\nOceanusLocations_df &lt;- OceanusLocations_df %&gt;%\n  select(Name, X.Kind, XCOORD, YCOORD) %&gt;%\n  rename(Loc_Type = X.Kind)\n\n\nvessel_movement_data &lt;- vessel_movement_data %&gt;%\n  left_join(OceanusLocations_df,\n            by = c(\"source\" = \"Name\"))\n\n\nwrite_rds(vessel_movement_data, \"data/rds/vessel_movement_data.rds\")\n\n\n\n\n\n\n\n\ntransponderping &lt;- subset(mc2_edges_cleaned, event3 == \"TransponderPing\")\n\nCreates subsets of data for different types of events: transponder pings, transactions, and harbor reports, facilitating focused analysis.\n\ntransponderping &lt;- subset(mc2_edges_cleaned, event3 == \"TransponderPing\")\ntransaction &lt;- subset(mc2_edges_cleaned, event2 == \"Transaction\")\nharbor_report &lt;- subset(mc2_edges_cleaned,  event2 == \"HarborReport\")\n\n\nmc2_nodes_type_counts &lt;- mc2_nodes %&gt;%\n  group_by(type) %&gt;%\n  summarise(count = n())\n\n# Display the result\nprint(mc2_nodes_type_counts)\n\n# A tibble: 12 × 2\n   type                           count\n   &lt;chr&gt;                          &lt;int&gt;\n 1 Entity.Commodity.Fish             10\n 2 Entity.Document.DeliveryReport  5307\n 3 Entity.Location.City               6\n 4 Entity.Location.Point             12\n 5 Entity.Location.Region             6\n 6 Entity.Vessel.CargoVessel        100\n 7 Entity.Vessel.Ferry.Cargo          2\n 8 Entity.Vessel.Ferry.Passenger      3\n 9 Entity.Vessel.FishingVessel      178\n10 Entity.Vessel.Other                5\n11 Entity.Vessel.Research             2\n12 Entity.Vessel.Tour                 6\n\n\n\nmc2_nodes_name_counts &lt;- mc2_nodes %&gt;%\n  group_by(name) %&gt;%\n  summarise(count = n())\n\n# Display the result\nprint(mc2_nodes_name_counts)\n\n# A tibble: 11 × 2\n   name                      count\n   &lt;chr&gt;                     &lt;int&gt;\n 1 Beauvoir/Habeas pisces        1\n 2 Birdseye/Pisces frigus        1\n 3 Cod/Gadus n.specificatae      1\n 4 Harland/Piscis sapidum        1\n 5 Helenaa/Pisces satis          1\n 6 Offidiaa/Piscis osseus        1\n 7 Salmon/Oncorhynchus rosea     1\n 8 Sockfish/Pisces foetida       1\n 9 Tuna/Thunnini n.vera          1\n10 Wrasse/Labridae n.refert      1\n11 &lt;NA&gt;                       5627"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "For Take-home Exercise 2, I need to choose a data visualisation prepared by one of my classmate’s Take-home Exercise 1 submission, critique its clarity and aesthetics, and then redesign it using the ggplot2 and tidyverse packages, including ggplot2 extensions."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#the-task",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "For Take-home Exercise 2, I need to choose a data visualisation prepared by one of my classmate’s Take-home Exercise 1 submission, critique its clarity and aesthetics, and then redesign it using the ggplot2 and tidyverse packages, including ggplot2 extensions."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#reproducing-the-original-process",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#reproducing-the-original-process",
    "title": "Take-home Exercise 2",
    "section": "Reproducing The Original Process",
    "text": "Reproducing The Original Process\nI will follow the step-by-step process performed by my classmate in order to reproduce the original visualisation.\n\nLoading The Packages\nFirst of all, let’s load all the required packages to reproduce the visualisation. The packages used are listed below:\n\n\n\nLibrary\nDescription\n\n\n\n\npacman\nPacman is a package that makes it possible to perform tasks associated with add-on packages in a more convenient manner. It checks whether the add-on packages are installed or not. If not, it will automatically install and load them into the R environment.\n\n\ntidyverse\nA collection of core packages designed for data science, used extensively for data preparation and wrangling. Content includes: ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, forcats, scales, lubridate, etc.\n\n\npatchwork\nThis one is also an extension package for ggplot2 that allows combining multiple ggplot2 plots into one (composite figure) and arranging them in various layouts. Even though patchwork complements the functionality of ggplot2, it is independently maintained and must be installed and loaded separately.\n\n\nscales\nThis package is designed to enhance how data is presented in visualisation, particularly in ggplot2 plots. It provides tools for mapping data to aesthetic attributes like colours, shapes, and sizes more effectively. It also includes functions for formatting and transforming axes and legends in a chart. Even though this is part of the tidyverse package collection, it needs to be installed and loaded separately.\n\n\nzoo\nProvides powerful methods for managing and manipulating ordered indexed data, particularly time series data, making it easier to handle a variety of data irregularities.\n\n\n\nThese packages will be loaded using the p_load() function from the pacman package to ensure that all the necessary packages are available in the R environment.\n\npacman::p_load(tidyverse, lubridate, patchwork, scales, zoo)\n\n\n\nLoading The Data\n\nThe Datasets\nThere are five datasets in the form of CSV files used to produce the original visualisation. These datasets cover from the start of the 1st quarter 2023 to the end of the 1st quarter 2024.\n\nread_csv() function will be used to load these CSV files into the R environment to create five separate dataframes: data1, data2, data3, data4, and data5.\nbind_rows() from the dplyr package merges these five data frames into one large data frame called data.\nglimpse() provides a quick overview of the combined data frame.\n\n\ndata1 = read_csv(\"data/ResidentialTransaction20240308160536.csv\")\ndata2 = read_csv(\"data/ResidentialTransaction20240308160736.csv\")\ndata3 = read_csv(\"data/ResidentialTransaction20240308161009.csv\")\ndata4 = read_csv(\"data/ResidentialTransaction20240308161109.csv\")\ndata5 = read_csv(\"data/ResidentialTransaction20240414220633.csv\")\ndata &lt;- bind_rows(data1, data2, data3, data4, data5)\n\nglimpse(data)\n\nRows: 26,806\nColumns: 21\n$ `Project Name`                &lt;chr&gt; \"THE REEF AT KING'S DOCK\", \"URBAN TREASU…\n$ `Transacted Price ($)`        &lt;dbl&gt; 2317000, 1823500, 1421112, 1258112, 1280…\n$ `Area (SQFT)`                 &lt;dbl&gt; 882.65, 882.65, 1076.40, 1033.34, 871.88…\n$ `Unit Price ($ PSF)`          &lt;dbl&gt; 2625, 2066, 1320, 1218, 1468, 1767, 1095…\n$ `Sale Date`                   &lt;chr&gt; \"01 Jan 2023\", \"02 Jan 2023\", \"02 Jan 20…\n$ Address                       &lt;chr&gt; \"12 HARBOURFRONT AVENUE #05-32\", \"205 JA…\n$ `Type of Sale`                &lt;chr&gt; \"New Sale\", \"New Sale\", \"New Sale\", \"New…\n$ `Type of Area`                &lt;chr&gt; \"Strata\", \"Strata\", \"Strata\", \"Strata\", …\n$ `Area (SQM)`                  &lt;dbl&gt; 82.0, 82.0, 100.0, 96.0, 81.0, 308.7, 42…\n$ `Unit Price ($ PSM)`          &lt;dbl&gt; 28256, 22238, 14211, 13105, 15802, 19015…\n$ `Nett Price($)`               &lt;chr&gt; \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", …\n$ `Property Type`               &lt;chr&gt; \"Condominium\", \"Condominium\", \"Executive…\n$ `Number of Units`             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Tenure                        &lt;chr&gt; \"99 yrs from 12/01/2021\", \"Freehold\", \"9…\n$ `Completion Date`             &lt;chr&gt; \"Uncompleted\", \"Uncompleted\", \"Uncomplet…\n$ `Purchaser Address Indicator` &lt;chr&gt; \"HDB\", \"Private\", \"HDB\", \"HDB\", \"HDB\", \"…\n$ `Postal Code`                 &lt;chr&gt; \"097996\", \"419535\", \"269343\", \"269294\", …\n$ `Postal District`             &lt;chr&gt; \"04\", \"14\", \"27\", \"27\", \"28\", \"19\", \"10\"…\n$ `Postal Sector`               &lt;chr&gt; \"09\", \"41\", \"26\", \"26\", \"79\", \"54\", \"27\"…\n$ `Planning Region`             &lt;chr&gt; \"Central Region\", \"East Region\", \"North …\n$ `Planning Area`               &lt;chr&gt; \"Bukit Merah\", \"Bedok\", \"Yishun\", \"Yishu…\n\n\n\n\n\nVariable Selection\n\n\n\n\n\n\n\nCategory\nDescription\n\n\n\n\nProject Name\nthe name of the property or title of the development project that is being sold\n\n\nSale Date\nThe specific date when the transaction was completed\n\n\nType of Sale\nA new sale, resale, or auction, among other types.Here mainly analyze resale\n\n\nArea (SQM)\nThe usable floor area of the property in square meters\n\n\nUnit Price ($ PSM)\nThe price per square meter of the property\n\n\n\n\nData Cleaning\nSale Date is converted to a date format using the dmy() function from the lubridate package, which interprets strings as dates in “day-month-year” format.\nArea (SQM) is transformed into a numeric variable.\nUnit Price ($ PSM) undergoes a similar process as Area (SQM).\nAny NA (missing) values in Area (SQM) is replaced with 0\nA new variable Area_Category is created using the cut() function to categorize the Area (SQM). variable into predefined bins: &lt;100, 100-200, 200-300, 300-400, &gt;400.\nThe breaks argument specifies the boundaries for these bins, and labels provides the corresponding category labels.\ninclude.lowest = TRUE ensures that values equal to the lowest break point (0) are included in the first category (&lt;100).\n\ndata_cleaned &lt;- data %&gt;%\n  mutate(\n    `Sale Date` = dmy(`Sale Date`),  # Ensuring we're using the exact column name from the dataset\n    `Area (SQM)` = as.numeric(gsub(\",\", \"\", `Area (SQM)`)),  # Keeping the variable names as they are in the dataset\n    `Unit Price ($ PSM)` = as.numeric(gsub(\"\\\\$\", \"\", gsub(\",\", \"\", `Unit Price ($ PSM)`)))  # Properly referencing the variable\n  )\n\ndata_cleaned &lt;- data_cleaned %&gt;%\n  mutate(\n    `Area (SQM)` = ifelse(is.na(`Area (SQM)`), 0, `Area (SQM)`)  # Dealing with NA values\n  )\n\ndata_cleaned &lt;- data_cleaned %&gt;%\n  mutate(\n    Area_Category = cut(\n      `Area (SQM)`,\n      breaks = c(0, 100, 200, 300, 400, Inf),  \n      labels = c(\"&lt;100\", \"100-200\", \"200-300\", \"300-400\", \"&gt;400\"),\n      include.lowest = TRUE  \n    )\n  )\n\n\n\nReproducing The Original Visualization\nThe plot below shows the original design of the “Comparative Analysis of Transaction Volumes and Pricing Across Real Estate Projects”.\nAccess the original design from this link.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresale_data &lt;- data_cleaned %&gt;%\n  filter(`Type of Sale` == \"Resale\")\n\nproject_stats &lt;- resale_data %&gt;%\n  filter(`Project Name` != \"N.A.\") %&gt;%\n  group_by(`Project Name`) %&gt;%\n  summarise(\n    Total_Units = sum(`Number of Units`, na.rm = TRUE),  # Sum up all units for each project\n    Avg_Unit_Price = mean(`Unit Price ($ PSM)`, na.rm = TRUE),  # Calculate the average price per square meter\n    .groups = \"drop\"  # Drop the grouping\n  )\n\ntop_projects &lt;- project_stats %&gt;%\n  top_n(25, Total_Units) %&gt;%\n  arrange(desc(Total_Units))\n\nproject_order &lt;- top_projects$`Project Name`\n\ntop_projects$`Project Name` &lt;- factor(top_projects$`Project Name`, levels = project_order)\nresale_data$`Project Name` &lt;- factor(resale_data$`Project Name`, levels = project_order)\n\np_units &lt;- ggplot(top_projects, aes(x = `Project Name`, y = Total_Units, fill = 'steelblue')) +\n  geom_bar(stat = \"identity\") +\n  labs(y = \"Total Number of Units\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),\n    legend.position = \"none\"\n  )\n\np_price &lt;- ggplot(resale_data, aes(x = `Project Name`, y = `Unit Price ($ PSM)`)) +\n  geom_boxplot() +\n  labs(y = \"Unit Price ($ PSM)\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),\n    legend.position = \"none\"\n  )\n\np_combined &lt;- p_units | p_price\n\np_combined"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#critique-on-clarity-and-aesthetics-of-the-original-visualisation",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#critique-on-clarity-and-aesthetics-of-the-original-visualisation",
    "title": "Take-home Exercise 2",
    "section": "Critique on Clarity and Aesthetics of the Original Visualisation",
    "text": "Critique on Clarity and Aesthetics of the Original Visualisation\nOverall, the original visualisation aligns with the analytical goals by allowing for a detailed examination of both sales volume and pricing across projects, offering insights that can guide strategic decisions in real estate development. With that being said, there is still room for improvements, and some modifications would be beneficial to enhance its clarity and aesthetics.\n\nClarity\n\nLabel Overcrowding:\n\nThe project names on the x-axis are densely packed, making them hard to read. This affects the viewer’s ability to quickly identify and compare projects.\n\nScale and Balance:\n\nThe scale of the bar chart and box plot do not align well.\n\nData Visibility:\n\nIn the box plot, some boxes and whiskers are thin or compressed due to the wide range of data, which can make it difficult to discern differences between the median and quartile values across projects.\n\n\n\n\nAesthetics\n\nColor and Design:\n\nBoth plots use a simple, minimalistic color scheme which, while clean, could be enhanced to differentiate data points or groups more effectively. For example, different colors could be used to represent different quartiles in the box plot or to highlight projects with particularly high or low metrics in both plots.\n\nConsistency in Style:\n\nThere is a visual inconsistency between the bar chart and the box plot that could be distracting. The bar chart is filled with a solid color, while the box plot is more traditional with outlines. Harmonizing these styles could improve the overall cohesion of the visualization.\n\nUtilization of Space:\n\nThere’s significant empty space at the right end of both plots, especially noticeable in the box plot. This could be better utilized by compressing the x-axis or by providing additional contextual information or annotations.\n\n\n\n\nRecommendations for Improvement\n\nImproving Label Readability:\n\nRotate the position of the plot to a horizontal layout.\nReducing the number of projects with the highest ‘Total_Units’ sold from top 25 to just top 10.\nAdditional annotations could help to convey key information better for the viewer.\nBoxplot may benefit from incorporating median price directly on the plot\nUpsizing the labels on the y-axis and the x-axis\nRepositioning the two plots from side-by-side to top-bottom alignment.\n\nAdjusting Scales and Ranges:\n\nAdjust the y-axis on the box plot to focus more closely on the interquartile range, possibly using a secondary axis or break in the axis to handle outliers.\nLabels and ticks on the axes should be more readable, and using formatted numbers (like millions or rounding off) can help in understanding the scales at a glance without overwhelming with too many digits.\n\nEnhanced Color Coding and Visibility:\n\nUse color more strategically to highlight differences in data, such as coloring bars or boxes based on performance tiers (e.g., high, medium, low sales volume or prices).\nApply consistent thematic styling across both plots to enhance the visual narrative.\nThe use of a single color, while minimalist, could be expanded to differentiate data further. Using a palette to distinguish between different quartiles or highlighting specific noteworthy data points could make the visual more engaging.\nUse different colours to denote different metrics like median, mean, or outliers in box plots.\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresale_data &lt;- data_cleaned %&gt;%\n  filter(`Type of Sale` == \"Resale\")\n\nproject_stats &lt;- resale_data %&gt;%\n  filter(`Project Name` != \"N.A.\") %&gt;%\n  group_by(`Project Name`) %&gt;%\n  summarise(\n    Total_Units = sum(`Number of Units`, na.rm = TRUE),  # Sum up all units for each project\n    Avg_Unit_Price = mean(`Unit Price ($ PSM)`, na.rm = TRUE),  # Calculate the average price per square meter\n    .groups = \"drop\"  # Drop the grouping\n  )\n\ntop_projects &lt;- project_stats %&gt;%\n  top_n(10, Total_Units) %&gt;%\n  arrange(desc(Total_Units))\n\nproject_order &lt;- top_projects$`Project Name`\n\ntop_projects$`Project Name` &lt;- factor(top_projects$`Project Name`, levels = project_order)\nresale_data$`Project Name` &lt;- factor(resale_data$`Project Name`, levels = project_order)\n\n\n\np_units &lt;- ggplot(top_projects, aes(x = reorder(`Project Name`, Total_Units), y = Total_Units)) +\n  geom_bar(stat = \"identity\", fill = 'steelblue') +  \n  geom_text(aes(label = paste(Total_Units, \"units sold\")), position = position_nudge(y = 8), hjust = 1.5, color = \"white\", size = 6) +  # Add annotations with \"units sold\"\n  coord_flip() +  # Flips the axes to make the bar chart horizontal\n  labs(x = \"Project Name\", y = \"Total Units Sold\") +  # Change axis labels and update names\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(angle = 0, hjust = 1, size = 20),  # Enlarge y-axis labels\n    axis.text.x = element_text(angle = 0, hjust = 1, size = 30),  # Enlarge x-axis labels\n    axis.title.x = element_text(size = 24),  # Enlarge x-axis title\n    axis.title.y = element_text(size = 24),  # Enlarge y-axis title\n    legend.position = \"none\",\n  )\n  \n\n  \np_price &lt;- ggplot(resale_data, aes(x = `Project Name`, y = `Unit Price ($ PSM)`)) +\n  geom_boxplot() +\n  labs(y = \"Unit Price ($ PSM)\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),\n    legend.position = \"none\"\n  )\n\n\n  \n# Calculate the interquartile range to adjust y-axis limits more appropriately\niqr &lt;- IQR(resale_data$`Unit Price ($ PSM)`, na.rm = TRUE)\nq1 &lt;- quantile(resale_data$`Unit Price ($ PSM)`, 0.25, na.rm = TRUE)\nq3 &lt;- quantile(resale_data$`Unit Price ($ PSM)`, 0.75, na.rm = TRUE)\nlower_bound &lt;- max(0, q1 - 1.5 * iqr)  \nupper_bound &lt;- q3 + 1.5 * iqr\n\n# Generate the boxplot with refined axis focus and number formatting\np_price &lt;- ggplot(resale_data, aes(x = `Project Name`, y = `Unit Price ($ PSM)`)) +\n  geom_boxplot(fill = \"grey80\", colour = \"black\", outlier.colour = \"red\", outlier.shape = 16, outlier.size = 1) +\n  coord_flip() +  # Flip the axes for horizontal layout\n  scale_y_continuous(limits = c(lower_bound, upper_bound), labels = scales::comma) +  # Apply comma for thousands\n  labs(x = \"Project Name\", y = \"Unit Price ($ PSM)\") +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(angle = 0, hjust = 1, size = 20),  # Enhance readability of the x-axis labels\n    axis.text.x = element_text(angle = 0, hjust = 1, size = 30),  # Enhance readability of the y-axis labels\n    axis.title.x = element_text(size = 24),  # Enlarge x-axis title\n    axis.title.y = element_text(size = 24),  # Enlarge y-axis title\n    legend.position = \"none\",\n\n  )\n\n\n\np_combined &lt;- p_units / p_price # Change | to / to stack plots vertically\np_combined"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to my portfolio for the ISSS608 Visual Analytics and Applications course, taught by Professor Kam Tin Seong at Singapore Management University. This website showcases a compilation of the exercises and assignments I have undertaken and completed over the duration of the course."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06b.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06b.html#loading-r-packages",
    "title": "In-class_Ex06b",
    "section": "Loading R packages",
    "text": "Loading R packages\n\npacman::p_load(jsonlite, tidygraph, ggraph,\n               visNetwork, graphlayouts, tidyverse) \n\n\nmc3_data &lt;- fromJSON(\"data/MC3_2023.json\")\n\n\nclass(mc3_data)\n\n[1] \"list\"\n\n\n\nmc3_edges &lt;- as_tibble(mc3_data$links) %&gt;%\n  distinct() %&gt;%\n  mutate(source = as.character(source),\n          target = as.character(target),\n          type = as.character(type)) %&gt;%\n  group_by(source, target, type) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup()\n\n\nmc3_nodes &lt;- as_tibble(mc3_data$nodes) %&gt;%\n  mutate(country = as.character(country),\n         id = as.character(id),\n         product_services = as.character(product_services),\n         revenue_omu = as.numeric(as.character(revenue_omu)),\n         type = as.character(type)) %&gt;%\n  select(id, country, type, revenue_omu, product_services)\n\n\nid1 &lt;-mc3_edges %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\nid2 &lt;- mc3_edges %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\nmc3_nodes1 &lt;- rbind(id1, id2) %&gt;%\n  distinct() %&gt;%\n  left_join(mc3_nodes,\n            unmatched = \"drop\")\n\n\nmc3_graph &lt;- tbl_graph(nodes = mc3_nodes1,\n                       edges = mc3_edges,\n                       directed = FALSE) %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness(),\n         closeness_centralilty = centrality_closeness())\n\n\nmc3_graph %&gt;%\n  filter(betweenness_centrality &gt;= 300000) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(alpha=0.5)) +\n  geom_node_point(aes(size = betweenness_centrality,\n                      colors = \"lightblue\",\n                      alpha = 0.5)) +\n  scale_size_continuous(range=c(1,10))+\n  theme_graph()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05b.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05b.html#loading-r-packages",
    "title": "In-class_Ex05b",
    "section": "Loading R packages",
    "text": "Loading R packages\n\npacman::p_load(jsonlite, tidyverse, quanteda, readtext, tidytext,\n               tidygraph, ggraph) \n\n\nmc1_data &lt;- fromJSON(\"data/mc1.json\")\n\n\nmc2_data &lt;- fromJSON(\"data/mc2.json\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#loading-r-packages",
    "title": "In-class_Ex04",
    "section": "Loading R packages",
    "text": "Loading R packages\n\npacman::p_load(tidyverse, ggstatsplot)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#loading-r-packages",
    "title": "In-class Exercise 2",
    "section": "Loading R packages",
    "text": "Loading R packages\n\npacman::p_load(tidyverse, ggdist, ggridges,\n               colorspace, ggthemes)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#visualising-distribution",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#visualising-distribution",
    "title": "In-class Exercise 2",
    "section": "Visualising Distribution",
    "text": "Visualising Distribution"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#histogram",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#histogram",
    "title": "In-class Exercise 2",
    "section": "Histogram",
    "text": "Histogram"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#visualising-distribution-1",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#visualising-distribution-1",
    "title": "In-class Exercise 2",
    "section": "Visualising Distribution",
    "text": "Visualising Distribution"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#probability-density-plot",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#probability-density-plot",
    "title": "In-class Exercise 2",
    "section": "Probability density plot",
    "text": "Probability density plot\n\nThe taskThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df,\n       aes(x = ENGLISH)) +\n  geom_density(\n    color = \"#1696d2\",\n    adjust = .65,\n    alpha = .6\n  )\n\n\n\n\nmedian_eng &lt;- median(exam_df\\(ENGLISH) mean_eng &lt;- mean(exam_df\\)ENGLISH) std_eng &lt;_ sd(exam_df$ENGLISH)\nggplot(exam_df, aes(x = ENGLISH)) geom_density( color = “#1696d2”, adjust = .65, alpha = .6) + stat_function( fun = dnorm, args = list(mean = mean_eng, sd = std_eng), col = “grey30”, size = 0.8) + geom_vline( aes(xintercept = mean_eng), colour=“4d5887”, linewidth = 0.6, linetype = “dashed”) + annotate(geom = “text”, x = mean_eng - 8 y = 0.04, label = paste0(“Mean ENGLISH:”, round((mean_eng), 2)), ) ) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html",
    "title": "Hands-on Exercise 10",
    "section": "",
    "text": "By the end of this hands-on exercise, you will be able to:\n\ncreate bullet chart by using ggplot2,\ncreate sparklines by using ggplot2 ,\nbuild industry standard dashboard by using R Shiny.\n\n\n\n\nFor the purpose of this hands-on exercise, the following R packages will be used.\n\n\nCode\npacman::p_load(lubridate, ggthemes, reactable,\nreactablefmtr, gt, gtExtras, tidyverse)\n\n\n\ntidyverse provides a collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data. It is not a single package but a collection of modern R packages including but not limited to readr, tidyr, dplyr, ggplot, tibble, stringr, forcats and purrr.\nlubridate provides functions to work with dates and times more efficiently.\nggthemes is an extension of ggplot2. It provides additional themes beyond the basic themes of ggplot2.\ngtExtras provides some additional helper functions to assist in creating beautiful tables with gt, an R package specially designed for anyone to make wonderful-looking tables using the R programming language.\nreactable provides functions to create interactive data tables for R, based on the React Table library and made with reactR.\nreactablefmtr provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes.\n\n\n\n\n\n\nFor the purpose of this study, a personal database in Microsoft Access mdb format called Coffee Chain will be used.\n\n\n\nIn the code chunk below, odbcConnectAccess() of RODBC package is used used to import a database query table into R.\n\n\nCode\nlibrary(RODBC)\ncon &lt;- odbcConnectAccess2007('data/Coffee Chain.mdb')\ncoffeechain &lt;- sqlFetch(con, 'CoffeeChain Query')\nwrite_rds(coffeechain, \"data/CoffeeChain.rds\")\nodbcClose(con)\n\n\nNote: Before running the code chunk, you need to change the R system to 32bit version. This is because the odbcConnectAccess() is based on 32bit and not 64bit\n\n\n\nThe code chunk below is used to import CoffeeChain.rds into R.\n\n\nCode\ncoffeechain &lt;- read_rds(\"data/rds/CoffeeChain.rds\")\n\n\nNote: This step is optional if coffeechain is already available in R.\nThe code chunk below is used to aggregate Sales and Budgeted Sales at the Product level.\n\n\nCode\nproduct &lt;- coffeechain %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`target` = sum(`Budget Sales`),\n            `current` = sum(`Sales`)) %&gt;%\n  ungroup()\n\n\n\n\n\nThe code chunk below is used to plot the bullet charts using ggplot2 functions.\n\n\nCode\nggplot(product, aes(Product, current)) + \n  geom_col(aes(Product, max(target) * 1.01),\n           fill=\"grey85\", width=0.85) +\n  geom_col(aes(Product, target * 0.75),\n           fill=\"grey60\", width=0.85) +\n  geom_col(aes(Product, target * 0.5),\n           fill=\"grey50\", width=0.85) +\n  geom_col(aes(Product, current), \n           width=0.35,\n           fill = \"black\") + \n  geom_errorbar(aes(y = target,\n                    x = Product, \n                    ymin = target,\n                    ymax= target), \n                width = .4,\n                colour = \"red\",\n                size = 1) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to plot sparklines by using ggplot2.\n\n\n\n\nCode\nsales_report &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  mutate(Month = month(Date)) %&gt;%\n  group_by(Month, Product) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup() %&gt;%\n  select(Month, Product, Sales)\n\n\nThe code chunk below is used to compute the minimum, maximum and end othe the month sales.\n\n\nCode\nmins &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.min(Sales))\nmaxs &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.max(Sales))\nends &lt;- group_by(sales_report, Product) %&gt;% \n  filter(Month == max(Month))\n\n\nThe code chunk below is used to compute the 25 and 75 quantiles.\n\n\nCode\nquarts &lt;- sales_report %&gt;%\n  group_by(Product) %&gt;%\n  summarise(quart1 = quantile(Sales, \n                              0.25),\n            quart2 = quantile(Sales, \n                              0.75)) %&gt;%\n  right_join(sales_report)\n\n\n\n\n\nThe code chunk used.\n\n\nCode\nggplot(sales_report, aes(x=Month, y=Sales)) + \n  facet_grid(Product ~ ., scales = \"free_y\") + \n  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), \n              fill = 'grey90') +\n  geom_line(size=0.3) +\n  geom_point(data = mins, col = 'red') +\n  geom_point(data = maxs, col = 'blue') +\n  geom_text(data = mins, aes(label = Sales), vjust = -1) +\n  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +\n  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +\n  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +\n  expand_limits(x = max(sales_report$Month) + \n                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +\n  scale_x_continuous(breaks = seq(1, 12, 1)) +\n  scale_y_continuous(expand = c(0.1, 0)) +\n  theme_tufte(base_size = 3, base_family = \"Helvetica\") +\n  theme(axis.title=element_blank(), axis.text.y = element_blank(), \n        axis.ticks = element_blank(), strip.text = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to create static information dashboard by using gt and gtExtras packages. Before getting started, it is highly recommended for you to visit the webpage of these two packages and review all the materials provided on the webpages at least once. You done not have to understand and remember everything provided but at least have an overview of the purposes and functions provided by them.\n\n\nIn this section, you will learn how to prepare a bullet chart report by using functions of gt and gtExtras packages.\n\n\nCode\nproduct %&gt;%\n  gt::gt() %&gt;%\n  gt_plt_bullet(column = current, \n              target = target, \n              width = 60,\n              palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\ncurrent\n\n\n\n\nAmaretto\n\n\n\n   \n\n\n\nCaffe Latte\n\n\n\n   \n\n\n\nCaffe Mocha\n\n\n\n   \n\n\n\nChamomile\n\n\n\n   \n\n\n\nColombian\n\n\n\n   \n\n\n\nDarjeeling\n\n\n\n   \n\n\n\nDecaf Espresso\n\n\n\n   \n\n\n\nDecaf Irish Cream\n\n\n\n   \n\n\n\nEarl Grey\n\n\n\n   \n\n\n\nGreen Tea\n\n\n\n   \n\n\n\nLemon\n\n\n\n   \n\n\n\nMint\n\n\n\n   \n\n\n\nRegular Espresso\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can prepare the sales report by product by using gtExtras functions, code chunk below will be used to prepare the data.\n\n\nCode\nreport &lt;- coffeechain %&gt;%\n  mutate(Year = year(Date)) %&gt;%\n  filter(Year == \"2013\") %&gt;%\n  mutate (Month = month(Date, \n                        label = TRUE, \n                        abbr = TRUE)) %&gt;%\n  group_by(Product, Month) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup()\n\n\nIt is important to note that one of the requirement of gtExtras functions is that almost exclusively they require you to pass data.frame with list columns. In view of this, code chunk below will be used to convert the report data.frame into list columns.\n\n\nCode\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n\n# A tibble: 13 × 2\n   Product           `Monthly Sales`\n   &lt;chr&gt;             &lt;list&gt;         \n 1 Amaretto          &lt;dbl [12]&gt;     \n 2 Caffe Latte       &lt;dbl [12]&gt;     \n 3 Caffe Mocha       &lt;dbl [12]&gt;     \n 4 Chamomile         &lt;dbl [12]&gt;     \n 5 Colombian         &lt;dbl [12]&gt;     \n 6 Darjeeling        &lt;dbl [12]&gt;     \n 7 Decaf Espresso    &lt;dbl [12]&gt;     \n 8 Decaf Irish Cream &lt;dbl [12]&gt;     \n 9 Earl Grey         &lt;dbl [12]&gt;     \n10 Green Tea         &lt;dbl [12]&gt;     \n11 Lemon             &lt;dbl [12]&gt;     \n12 Mint              &lt;dbl [12]&gt;     \n13 Regular Espresso  &lt;dbl [12]&gt;     \n\n\n\n\n\n\nCode\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\") %&gt;%\n   gt() %&gt;%\n   gt_plt_sparkline('Monthly Sales',\n                    same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMonthly Sales\n\n\n\n\nAmaretto\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n\n\n\n   3.7K\n\n\n\nChamomile\n\n\n\n   3.3K\n\n\n\nColombian\n\n\n\n   5.5K\n\n\n\nDarjeeling\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n\n\n\n   2.7K\n\n\n\nEarl Grey\n\n\n\n   3.0K\n\n\n\nGreen Tea\n\n\n\n   1.5K\n\n\n\nLemon\n\n\n\n   4.4K\n\n\n\nMint\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\n\n\nFirst, calculate summary statistics by using the code chunk below.\n\n\nCode\nreport %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            ) %&gt;%\n  gt() %&gt;%\n  fmt_number(columns = 4,\n    decimals = 2)\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\n\n\n\n\nAmaretto\n1016\n1210\n1,119.00\n\n\nCaffe Latte\n1398\n1653\n1,528.33\n\n\nCaffe Mocha\n3322\n3828\n3,613.92\n\n\nChamomile\n2967\n3395\n3,217.42\n\n\nColombian\n5132\n5961\n5,457.25\n\n\nDarjeeling\n2926\n3281\n3,112.67\n\n\nDecaf Espresso\n3181\n3493\n3,326.83\n\n\nDecaf Irish Cream\n2463\n2901\n2,648.25\n\n\nEarl Grey\n2730\n3005\n2,841.83\n\n\nGreen Tea\n1339\n1476\n1,398.75\n\n\nLemon\n3851\n4418\n4,080.83\n\n\nMint\n1388\n1669\n1,519.17\n\n\nRegular Espresso\n890\n1218\n1,023.42\n\n\n\n\n\n\n\n\n\n\nNext, use the code chunk below to add the statistics on the table.\n\n\nCode\nspark &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n\n\n\nCode\nsales &lt;- report %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            )\n\n\n\n\nCode\nsales_data = left_join(sales, spark)\n\n\n\n\n\n\n\nCode\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales',\n                   same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\n\n\nSimilarly, we can combining the bullet chart and sparklines using the steps below.\n\n\nCode\nbullet &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`Target` = sum(`Budget Sales`),\n            `Actual` = sum(`Sales`)) %&gt;%\n  ungroup() \n\n\n\n\nCode\nsales_data = sales_data %&gt;%\n  left_join(bullet)\n\n\n\n\nCode\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales') %&gt;%\n  gt_plt_bullet(column = Actual, \n                target = Target, \n                width = 28,\n                palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\nActual\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\n\n   \n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\n\n   \n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\n\n   \n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\n\n   \n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\n\n   \n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\n\n   \n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\n\n   \n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to create interactive information dashboard by using reactable and reactablefmtr packages. Before getting started, it is highly recommended for you to visit the webpage of these two packages and review all the materials provided on the webpages at least once. You done not have to understand and remember everything provided but at least have an overview of the purposes and functions provided by them.\nIn order to build an interactive sparklines, we need to install dataui R package by using the code chunk below.\n\n\nCode\nremotes::install_github(\"timelyportfolio/dataui\")\n\n\nNext, you all need to load the package onto R environment by using the code chunk below.\n\n\nCode\nlibrary(dataui)\n\n\n\n\nSimilar to gtExtras, to plot an interactive sparklines by using reactablefmtr package we need to prepare the list field by using the code chunk below.\n\n\nCode\nreport &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize(`Monthly Sales` = list(Sales))\n\n\nNext, react_sparkline will be to plot the sparklines as shown below.\n\n\nCode\nreactable(\n  report,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nBy default the pagesize is 10. In the code chunk below, arguments defaultPageSize is used to change the default setting.\n\n\nCode\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nIn the code chunk below highlight_points argument is used to show the minimum and maximum values points and label argument is used to label first and last values.\n\n\nCode\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        labels = c(\"first\", \"last\")\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nIn the code chunk below statline argument is used to show the mean line.\n\n\nCode\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        statline = \"mean\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nInstead adding reference line, bandline can be added by using the bandline argument.\n\n\nCode\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        line_width = 1,\n        bandline = \"innerquartiles\",\n        bandline_color = \"green\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nInstead of displaying the values as sparklines, we can display them as sparkbars as shiwn below.\n\n\nCode\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkbar(\n        report,\n        highlight_bars = highlight_bars(\n          min = \"red\", max = \"blue\"),\n        bandline = \"innerquartiles\",\n        statline = \"mean\")\n    )\n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#overview",
    "title": "Hands-on Exercise 10",
    "section": "",
    "text": "By the end of this hands-on exercise, you will be able to:\n\ncreate bullet chart by using ggplot2,\ncreate sparklines by using ggplot2 ,\nbuild industry standard dashboard by using R Shiny."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#getting-started",
    "title": "Hands-on Exercise 10",
    "section": "",
    "text": "For the purpose of this hands-on exercise, the following R packages will be used.\n\n\nCode\npacman::p_load(lubridate, ggthemes, reactable,\nreactablefmtr, gt, gtExtras, tidyverse)\n\n\n\ntidyverse provides a collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data. It is not a single package but a collection of modern R packages including but not limited to readr, tidyr, dplyr, ggplot, tibble, stringr, forcats and purrr.\nlubridate provides functions to work with dates and times more efficiently.\nggthemes is an extension of ggplot2. It provides additional themes beyond the basic themes of ggplot2.\ngtExtras provides some additional helper functions to assist in creating beautiful tables with gt, an R package specially designed for anyone to make wonderful-looking tables using the R programming language.\nreactable provides functions to create interactive data tables for R, based on the React Table library and made with reactR.\nreactablefmtr provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#importing-microsoft-access-database",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#importing-microsoft-access-database",
    "title": "Hands-on Exercise 10",
    "section": "",
    "text": "For the purpose of this study, a personal database in Microsoft Access mdb format called Coffee Chain will be used.\n\n\n\nIn the code chunk below, odbcConnectAccess() of RODBC package is used used to import a database query table into R.\n\n\nCode\nlibrary(RODBC)\ncon &lt;- odbcConnectAccess2007('data/Coffee Chain.mdb')\ncoffeechain &lt;- sqlFetch(con, 'CoffeeChain Query')\nwrite_rds(coffeechain, \"data/CoffeeChain.rds\")\nodbcClose(con)\n\n\nNote: Before running the code chunk, you need to change the R system to 32bit version. This is because the odbcConnectAccess() is based on 32bit and not 64bit\n\n\n\nThe code chunk below is used to import CoffeeChain.rds into R.\n\n\nCode\ncoffeechain &lt;- read_rds(\"data/rds/CoffeeChain.rds\")\n\n\nNote: This step is optional if coffeechain is already available in R.\nThe code chunk below is used to aggregate Sales and Budgeted Sales at the Product level.\n\n\nCode\nproduct &lt;- coffeechain %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`target` = sum(`Budget Sales`),\n            `current` = sum(`Sales`)) %&gt;%\n  ungroup()\n\n\n\n\n\nThe code chunk below is used to plot the bullet charts using ggplot2 functions.\n\n\nCode\nggplot(product, aes(Product, current)) + \n  geom_col(aes(Product, max(target) * 1.01),\n           fill=\"grey85\", width=0.85) +\n  geom_col(aes(Product, target * 0.75),\n           fill=\"grey60\", width=0.85) +\n  geom_col(aes(Product, target * 0.5),\n           fill=\"grey50\", width=0.85) +\n  geom_col(aes(Product, current), \n           width=0.35,\n           fill = \"black\") + \n  geom_errorbar(aes(y = target,\n                    x = Product, \n                    ymin = target,\n                    ymax= target), \n                width = .4,\n                colour = \"red\",\n                size = 1) +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plotting-sparklines-using-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plotting-sparklines-using-ggplot2",
    "title": "Hands-on Exercise 10",
    "section": "",
    "text": "In this section, you will learn how to plot sparklines by using ggplot2.\n\n\n\n\nCode\nsales_report &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  mutate(Month = month(Date)) %&gt;%\n  group_by(Month, Product) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup() %&gt;%\n  select(Month, Product, Sales)\n\n\nThe code chunk below is used to compute the minimum, maximum and end othe the month sales.\n\n\nCode\nmins &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.min(Sales))\nmaxs &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.max(Sales))\nends &lt;- group_by(sales_report, Product) %&gt;% \n  filter(Month == max(Month))\n\n\nThe code chunk below is used to compute the 25 and 75 quantiles.\n\n\nCode\nquarts &lt;- sales_report %&gt;%\n  group_by(Product) %&gt;%\n  summarise(quart1 = quantile(Sales, \n                              0.25),\n            quart2 = quantile(Sales, \n                              0.75)) %&gt;%\n  right_join(sales_report)\n\n\n\n\n\nThe code chunk used.\n\n\nCode\nggplot(sales_report, aes(x=Month, y=Sales)) + \n  facet_grid(Product ~ ., scales = \"free_y\") + \n  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), \n              fill = 'grey90') +\n  geom_line(size=0.3) +\n  geom_point(data = mins, col = 'red') +\n  geom_point(data = maxs, col = 'blue') +\n  geom_text(data = mins, aes(label = Sales), vjust = -1) +\n  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +\n  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +\n  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +\n  expand_limits(x = max(sales_report$Month) + \n                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +\n  scale_x_continuous(breaks = seq(1, 12, 1)) +\n  scale_y_continuous(expand = c(0.1, 0)) +\n  theme_tufte(base_size = 3, base_family = \"Helvetica\") +\n  theme(axis.title=element_blank(), axis.text.y = element_blank(), \n        axis.ticks = element_blank(), strip.text = element_blank())"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#static-information-dashboard-design-gt-and-gtextras-methods",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#static-information-dashboard-design-gt-and-gtextras-methods",
    "title": "Hands-on Exercise 10",
    "section": "",
    "text": "In this section, you will learn how to create static information dashboard by using gt and gtExtras packages. Before getting started, it is highly recommended for you to visit the webpage of these two packages and review all the materials provided on the webpages at least once. You done not have to understand and remember everything provided but at least have an overview of the purposes and functions provided by them.\n\n\nIn this section, you will learn how to prepare a bullet chart report by using functions of gt and gtExtras packages.\n\n\nCode\nproduct %&gt;%\n  gt::gt() %&gt;%\n  gt_plt_bullet(column = current, \n              target = target, \n              width = 60,\n              palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\ncurrent\n\n\n\n\nAmaretto\n\n\n\n   \n\n\n\nCaffe Latte\n\n\n\n   \n\n\n\nCaffe Mocha\n\n\n\n   \n\n\n\nChamomile\n\n\n\n   \n\n\n\nColombian\n\n\n\n   \n\n\n\nDarjeeling\n\n\n\n   \n\n\n\nDecaf Espresso\n\n\n\n   \n\n\n\nDecaf Irish Cream\n\n\n\n   \n\n\n\nEarl Grey\n\n\n\n   \n\n\n\nGreen Tea\n\n\n\n   \n\n\n\nLemon\n\n\n\n   \n\n\n\nMint\n\n\n\n   \n\n\n\nRegular Espresso"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#sparklines-gtextras-method",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#sparklines-gtextras-method",
    "title": "Hands-on Exercise 10",
    "section": "",
    "text": "Before we can prepare the sales report by product by using gtExtras functions, code chunk below will be used to prepare the data.\n\n\nCode\nreport &lt;- coffeechain %&gt;%\n  mutate(Year = year(Date)) %&gt;%\n  filter(Year == \"2013\") %&gt;%\n  mutate (Month = month(Date, \n                        label = TRUE, \n                        abbr = TRUE)) %&gt;%\n  group_by(Product, Month) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup()\n\n\nIt is important to note that one of the requirement of gtExtras functions is that almost exclusively they require you to pass data.frame with list columns. In view of this, code chunk below will be used to convert the report data.frame into list columns.\n\n\nCode\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n\n# A tibble: 13 × 2\n   Product           `Monthly Sales`\n   &lt;chr&gt;             &lt;list&gt;         \n 1 Amaretto          &lt;dbl [12]&gt;     \n 2 Caffe Latte       &lt;dbl [12]&gt;     \n 3 Caffe Mocha       &lt;dbl [12]&gt;     \n 4 Chamomile         &lt;dbl [12]&gt;     \n 5 Colombian         &lt;dbl [12]&gt;     \n 6 Darjeeling        &lt;dbl [12]&gt;     \n 7 Decaf Espresso    &lt;dbl [12]&gt;     \n 8 Decaf Irish Cream &lt;dbl [12]&gt;     \n 9 Earl Grey         &lt;dbl [12]&gt;     \n10 Green Tea         &lt;dbl [12]&gt;     \n11 Lemon             &lt;dbl [12]&gt;     \n12 Mint              &lt;dbl [12]&gt;     \n13 Regular Espresso  &lt;dbl [12]&gt;     \n\n\n\n\n\n\nCode\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\") %&gt;%\n   gt() %&gt;%\n   gt_plt_sparkline('Monthly Sales',\n                    same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMonthly Sales\n\n\n\n\nAmaretto\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n\n\n\n   3.7K\n\n\n\nChamomile\n\n\n\n   3.3K\n\n\n\nColombian\n\n\n\n   5.5K\n\n\n\nDarjeeling\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n\n\n\n   2.7K\n\n\n\nEarl Grey\n\n\n\n   3.0K\n\n\n\nGreen Tea\n\n\n\n   1.5K\n\n\n\nLemon\n\n\n\n   4.4K\n\n\n\nMint\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\n\n\nFirst, calculate summary statistics by using the code chunk below.\n\n\nCode\nreport %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            ) %&gt;%\n  gt() %&gt;%\n  fmt_number(columns = 4,\n    decimals = 2)\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\n\n\n\n\nAmaretto\n1016\n1210\n1,119.00\n\n\nCaffe Latte\n1398\n1653\n1,528.33\n\n\nCaffe Mocha\n3322\n3828\n3,613.92\n\n\nChamomile\n2967\n3395\n3,217.42\n\n\nColombian\n5132\n5961\n5,457.25\n\n\nDarjeeling\n2926\n3281\n3,112.67\n\n\nDecaf Espresso\n3181\n3493\n3,326.83\n\n\nDecaf Irish Cream\n2463\n2901\n2,648.25\n\n\nEarl Grey\n2730\n3005\n2,841.83\n\n\nGreen Tea\n1339\n1476\n1,398.75\n\n\nLemon\n3851\n4418\n4,080.83\n\n\nMint\n1388\n1669\n1,519.17\n\n\nRegular Espresso\n890\n1218\n1,023.42\n\n\n\n\n\n\n\n\n\n\nNext, use the code chunk below to add the statistics on the table.\n\n\nCode\nspark &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n\n\n\nCode\nsales &lt;- report %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            )\n\n\n\n\nCode\nsales_data = left_join(sales, spark)\n\n\n\n\n\n\n\nCode\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales',\n                   same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\n\n\nSimilarly, we can combining the bullet chart and sparklines using the steps below.\n\n\nCode\nbullet &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`Target` = sum(`Budget Sales`),\n            `Actual` = sum(`Sales`)) %&gt;%\n  ungroup() \n\n\n\n\nCode\nsales_data = sales_data %&gt;%\n  left_join(bullet)\n\n\n\n\nCode\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales') %&gt;%\n  gt_plt_bullet(column = Actual, \n                target = Target, \n                width = 28,\n                palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\nActual\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\n\n   \n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\n\n   \n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\n\n   \n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\n\n   \n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\n\n   \n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\n\n   \n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\n\n   \n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#interactive-information-dashboard-design-reactable-and-reactablefmtr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#interactive-information-dashboard-design-reactable-and-reactablefmtr-methods",
    "title": "Hands-on Exercise 10",
    "section": "",
    "text": "In this section, you will learn how to create interactive information dashboard by using reactable and reactablefmtr packages. Before getting started, it is highly recommended for you to visit the webpage of these two packages and review all the materials provided on the webpages at least once. You done not have to understand and remember everything provided but at least have an overview of the purposes and functions provided by them.\nIn order to build an interactive sparklines, we need to install dataui R package by using the code chunk below.\n\n\nCode\nremotes::install_github(\"timelyportfolio/dataui\")\n\n\nNext, you all need to load the package onto R environment by using the code chunk below.\n\n\nCode\nlibrary(dataui)\n\n\n\n\nSimilar to gtExtras, to plot an interactive sparklines by using reactablefmtr package we need to prepare the list field by using the code chunk below.\n\n\nCode\nreport &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize(`Monthly Sales` = list(Sales))\n\n\nNext, react_sparkline will be to plot the sparklines as shown below.\n\n\nCode\nreactable(\n  report,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nBy default the pagesize is 10. In the code chunk below, arguments defaultPageSize is used to change the default setting.\n\n\nCode\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nIn the code chunk below highlight_points argument is used to show the minimum and maximum values points and label argument is used to label first and last values.\n\n\nCode\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        labels = c(\"first\", \"last\")\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nIn the code chunk below statline argument is used to show the mean line.\n\n\nCode\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        statline = \"mean\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nInstead adding reference line, bandline can be added by using the bandline argument.\n\n\nCode\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        line_width = 1,\n        bandline = \"innerquartiles\",\n        bandline_color = \"green\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nInstead of displaying the values as sparklines, we can display them as sparkbars as shiwn below.\n\n\nCode\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkbar(\n        report,\n        highlight_bars = highlight_bars(\n          min = \"red\", max = \"blue\"),\n        bandline = \"innerquartiles\",\n        statline = \"mean\")\n    )\n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html",
    "title": "Hands-on Exercise 9d",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package.\n\n\n\n\nFor this exercise, the GGally, parcoords, parallelPlot and tidyverse packages will be used.\nThe code chunks below are used to install and load the packages in R.\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\n\nIn this hands-on exercise, the World Happinees 2018 (http://worldhappiness.report/ed/2018/) data will be used. The data set is download at https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\nIn the code chunk below, read_csv() of readr package is used to import WHData-2018.csv into R and save it into a tibble data frame object called wh.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\n\n\nIn this section, you will learn how to plot static parallel coordinates plot by using ggparcoord() of GGally package. Before getting started, it is a good practice to read the function description in detail.\n\n\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\n\n\n\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\n\n\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\n\n\n\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.\n\n\n\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.\n\n\n\n\n\n\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))\n\n\n\n\n\n\n\n\n\n\n\n\nparallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js. In this section, you will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.\n\n\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\nNotice that some of the axis labels are too long. You will learn how to overcome this problem in the next step.\n\n\n\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used.\n\n\n\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunl below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)\n\n\n\n\n\n\n\n\n\n\nggparcoord() of GGally package\nparcoords user guide\nparallelPlot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#overview",
    "title": "Hands-on Exercise 9d",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 9d",
    "section": "",
    "text": "For this exercise, the GGally, parcoords, parallelPlot and tidyverse packages will be used.\nThe code chunks below are used to install and load the packages in R.\n\npacman::p_load(GGally, parallelPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#data-preparation",
    "title": "Hands-on Exercise 9d",
    "section": "",
    "text": "In this hands-on exercise, the World Happinees 2018 (http://worldhappiness.report/ed/2018/) data will be used. The data set is download at https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\nIn the code chunk below, read_csv() of readr package is used to import WHData-2018.csv into R and save it into a tibble data frame object called wh.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#plotting-static-parallel-coordinates-plot",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#plotting-static-parallel-coordinates-plot",
    "title": "Hands-on Exercise 9d",
    "section": "",
    "text": "In this section, you will learn how to plot static parallel coordinates plot by using ggparcoord() of GGally package. Before getting started, it is a good practice to read the function description in detail.\n\n\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\n\n\n\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\n\n\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\n\n\n\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.\n\n\n\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.\n\n\n\n\n\n\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "title": "Hands-on Exercise 9d",
    "section": "",
    "text": "parallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js. In this section, you will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.\n\n\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\nNotice that some of the axis labels are too long. You will learn how to overcome this problem in the next step.\n\n\n\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used.\n\n\n\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunl below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09d.html#references",
    "title": "Hands-on Exercise 9d",
    "section": "",
    "text": "ggparcoord() of GGally package\nparcoords user guide\nparallelPlot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html",
    "title": "Hands-on Exercise 9b",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R.\n\n\n\nBefore you get started, you are required to open a new Quarto document. Keep the default html authoring format.\nNext, you will use the code chunk below to install and launch corrplot, ggpubr, plotly and tidyverse in RStudio.\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n\n\nFirst, let us import the data into R by using read_csv() of readr package.\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type.\n\n\n\n\nThere are more than one way to build scatterplot matrix with R. In this section, you will learn how to create a scatterplot matrix by using the pairs function of R Graphics.\nBefore you continue to the next step, you should read the syntax description of pairsfunction.\n\n\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])\n\n\n\n\n\n\n\n\n\n\n\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chun below.\n\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\n\n\n\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\nDon’t worry about the details for now-just type this code into your R session or script. Let’s have more fun way to display the correlation matrix.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n\n\n\n\n\n\n\n\n\n\n\n\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\nThe are at least three R packages provide function to plot corrgram, they are:\n\ncorrgram\nellipse\ncorrplot\n\nOn top that, some R package like ggstatsplot package also provides functions for building corrgram.\nIn this section, you will learn how to visualising correlation matrix by using ggcorrmat() of ggstatsplot package.\n\n\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n\n\n\n\n\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in ggcorrmat() but in the grouped_ggcorrmat() of ggstatsplot.\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package.\n\n\n\n\nIn this hands-on exercise, we will focus on corrplot. However, you are encouraged to explore the other two packages too.\nBefore getting started, you are required to read An Introduction to corrplot Package in order to gain basic understanding of corrplot package.\n\n\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n\n\n\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\n\nFeel free to change the method argument to other supported visual geometrics. (circle, square, ellipse, number, shade, color and pie)\n\n\n\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\n\nPlease feel free to experiment with other layout design argument such as tl.pos, tl.cex, tl.offset, cl.pos, cl.cex and cl.offset, just to mention a few of them.\n\n\n\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n\n\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\n\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#overview",
    "title": "Hands-on Exercise 9b",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 9b",
    "section": "",
    "text": "Before you get started, you are required to open a new Quarto document. Keep the default html authoring format.\nNext, you will use the code chunk below to install and launch corrplot, ggpubr, plotly and tidyverse in RStudio.\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#importing-and-preparing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#importing-and-preparing-the-data-set",
    "title": "Hands-on Exercise 9b",
    "section": "",
    "text": "In this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n\n\nFirst, let us import the data into R by using read_csv() of readr package.\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#building-correlation-matrix-pairs-method",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#building-correlation-matrix-pairs-method",
    "title": "Hands-on Exercise 9b",
    "section": "",
    "text": "There are more than one way to build scatterplot matrix with R. In this section, you will learn how to create a scatterplot matrix by using the pairs function of R Graphics.\nBefore you continue to the next step, you should read the syntax description of pairsfunction.\n\n\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])\n\n\n\n\n\n\n\n\n\n\n\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chun below.\n\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\n\n\n\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\nDon’t worry about the details for now-just type this code into your R session or script. Let’s have more fun way to display the correlation matrix.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-correlation-matrix-ggcormat",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-correlation-matrix-ggcormat",
    "title": "Hands-on Exercise 9b",
    "section": "",
    "text": "One of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\nThe are at least three R packages provide function to plot corrgram, they are:\n\ncorrgram\nellipse\ncorrplot\n\nOn top that, some R package like ggstatsplot package also provides functions for building corrgram.\nIn this section, you will learn how to visualising correlation matrix by using ggcorrmat() of ggstatsplot package.\n\n\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#building-multiple-plots",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#building-multiple-plots",
    "title": "Hands-on Exercise 9b",
    "section": "",
    "text": "Since ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in ggcorrmat() but in the grouped_ggcorrmat() of ggstatsplot.\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-correlation-matrix-using-corrplot-package",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-correlation-matrix-using-corrplot-package",
    "title": "Hands-on Exercise 9b",
    "section": "",
    "text": "In this hands-on exercise, we will focus on corrplot. However, you are encouraged to explore the other two packages too.\nBefore getting started, you are required to read An Introduction to corrplot Package in order to gain basic understanding of corrplot package.\n\n\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n\n\n\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\n\nFeel free to change the method argument to other supported visual geometrics. (circle, square, ellipse, number, shade, color and pie)\n\n\n\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\n\nPlease feel free to experiment with other layout design argument such as tl.pos, tl.cex, tl.offset, cl.pos, cl.cex and cl.offset, just to mention a few of them.\n\n\n\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n\n\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\n\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#r-packages",
    "title": "Hands-on Exercise 9b",
    "section": "7.1 R packages",
    "text": "7.1 R packages\n\nggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html",
    "title": "Hands-on Exercise 8c",
    "section": "",
    "text": "In this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps.\n\n\n\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour turn\n\n\n\nUsing the steps you learned in previous lesson, install and load sf, tmap and tidyverse packages into R environment.\n\n\n\n\nCode\npacman::p_load(tmap, tidyverse, sf)\n\n\n\n\n\nFor the purpose of this hands-on exercise, a prepared data set called NGA_wp.rds will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level. You can find the data set in the rds sub-direct of the hands-on data folder.\n\n\n\n\n\n\nDo it Yourself\n\n\n\nUsing appropriate sf function import NGA_wp.rds into R environment.\n\n\n\n\nCode\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour turn\n\n\n\nPlot a choropleth map showing the distribution of non-function water point by LGA\n\n\n\n\nCode\np1 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n\n\n\n\nCode\np2 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total  water point by LGAs\",\n            legend.outside = FALSE)\n\n\n\ntmap_arrange(p2, p1, nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\n\nIn much of our readings we have now seen the importance to map rates rather than counts of things, and that is for the simple reason that water points are not equally distributed in space. That means that if we do not account for how many water points are somewhere, we end up mapping total water point size rather than our topic of interest.\n\n\nWe will tabulate the proportion of functional water points and the proportion of non-functional water points in each LGA. In the following code chunk, mutate() from dplyr package is used to derive two fields, namely pct_functional and pct_nonfunctional.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\n\n\n\n\n\n\n\n\nYour turn\n\n\n\nPlot a choropleth map showing the distribution of percentage functional water point by LGA\n\n\n\n\nCode\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            legend.outside = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nExtreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\n\n\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\n\nStep 1: Exclude records with NA by using the code chunk below.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  drop_na()\n\nStep 2: Creating customised classification and extracting values\n\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen variables are extracted from an sf data.frame, the geometry is extracted as well. For mapping and spatial manipulation, this is the expected behavior, but many base R functions cannot deal with the geometry. Specifically, the quantile() gives an error. As a result st_set_geomtry(NULL) is used to drop geomtry field.\n\n\n\n\n\nWriting a function has three big advantages over using copy-and-paste:\n\nYou can give a function an evocative name that makes your code easier to understand.\nAs requirements change, you only need to update code in one place, instead of many.\nYou eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).\n\nSource: Chapter 19: Functions of R for Data Science.\n\n\n\nFirstly, we will write an R function as shown below to extract a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\nNext, we will write a percentile mapping function by using the code chunk below.\n\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n\nTo run the function, type the code chunk as shown below.\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n\n\nNote that this is just a bare bones implementation. Additional arguments such as the title, legend positioning just to name a few of them, could be passed to customise various features of the map.\n\n\n\n\nIn essence, a box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence. In contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nDisplaying summary statistics on a choropleth map by using the basic principles of boxplot.\nTo create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.\n\n\n\nThe code chunk below is an R function that creating break points for a box map.\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\n\n\n\nThe code chunk below is an R function to extract a variable as a vector out of an sf data frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\nLet’s test the newly created function\n\nvar &lt;- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\n\n\nThe code chunk below is an R function to create a box map. - arguments: - vnam: variable name (as character, in quotes) - df: simple features polygon layer - legtitle: legend title - mtitle: map title - mult: multiplier for IQR - returns: - a tmap-element (plots a map)\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#overview",
    "title": "Hands-on Exercise 8c",
    "section": "",
    "text": "In this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps.\n\n\n\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#getting-started",
    "title": "Hands-on Exercise 8c",
    "section": "",
    "text": "Your turn\n\n\n\nUsing the steps you learned in previous lesson, install and load sf, tmap and tidyverse packages into R environment.\n\n\n\n\nCode\npacman::p_load(tmap, tidyverse, sf)\n\n\n\n\n\nFor the purpose of this hands-on exercise, a prepared data set called NGA_wp.rds will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level. You can find the data set in the rds sub-direct of the hands-on data folder.\n\n\n\n\n\n\nDo it Yourself\n\n\n\nUsing appropriate sf function import NGA_wp.rds into R environment.\n\n\n\n\nCode\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#basic-choropleth-mapping",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#basic-choropleth-mapping",
    "title": "Hands-on Exercise 8c",
    "section": "",
    "text": "Your turn\n\n\n\nPlot a choropleth map showing the distribution of non-function water point by LGA\n\n\n\n\nCode\np1 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n\n\n\n\nCode\np2 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total  water point by LGAs\",\n            legend.outside = FALSE)\n\n\n\ntmap_arrange(p2, p1, nrow = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#choropleth-map-for-rates",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#choropleth-map-for-rates",
    "title": "Hands-on Exercise 8c",
    "section": "",
    "text": "In much of our readings we have now seen the importance to map rates rather than counts of things, and that is for the simple reason that water points are not equally distributed in space. That means that if we do not account for how many water points are somewhere, we end up mapping total water point size rather than our topic of interest.\n\n\nWe will tabulate the proportion of functional water points and the proportion of non-functional water points in each LGA. In the following code chunk, mutate() from dplyr package is used to derive two fields, namely pct_functional and pct_nonfunctional.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\n\n\n\n\n\n\n\n\nYour turn\n\n\n\nPlot a choropleth map showing the distribution of percentage functional water point by LGA\n\n\n\n\nCode\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            legend.outside = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#extreme-value-maps",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08c.html#extreme-value-maps",
    "title": "Hands-on Exercise 8c",
    "section": "",
    "text": "Extreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\n\n\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\n\nStep 1: Exclude records with NA by using the code chunk below.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  drop_na()\n\nStep 2: Creating customised classification and extracting values\n\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen variables are extracted from an sf data.frame, the geometry is extracted as well. For mapping and spatial manipulation, this is the expected behavior, but many base R functions cannot deal with the geometry. Specifically, the quantile() gives an error. As a result st_set_geomtry(NULL) is used to drop geomtry field.\n\n\n\n\n\nWriting a function has three big advantages over using copy-and-paste:\n\nYou can give a function an evocative name that makes your code easier to understand.\nAs requirements change, you only need to update code in one place, instead of many.\nYou eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).\n\nSource: Chapter 19: Functions of R for Data Science.\n\n\n\nFirstly, we will write an R function as shown below to extract a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\nNext, we will write a percentile mapping function by using the code chunk below.\n\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n\nTo run the function, type the code chunk as shown below.\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n\n\nNote that this is just a bare bones implementation. Additional arguments such as the title, legend positioning just to name a few of them, could be passed to customise various features of the map.\n\n\n\n\nIn essence, a box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence. In contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nDisplaying summary statistics on a choropleth map by using the basic principles of boxplot.\nTo create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.\n\n\n\nThe code chunk below is an R function that creating break points for a box map.\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\n\n\n\nThe code chunk below is an R function to extract a variable as a vector out of an sf data frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\nLet’s test the newly created function\n\nvar &lt;- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\n\n\nThe code chunk below is an R function to create a box map. - arguments: - vnam: variable name (as character, in quotes) - df: simple features polygon layer - legtitle: legend title - mtitle: map title - mult: multiplier for IQR - returns: - a tmap-element (plots a map)\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html",
    "title": "Hands-on Exercise 8a",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\n\n\n\n\n\n\nTip\n\n\n\nIt is advisable for you to read the functional description of each function before using them.\n\n\n\n\n\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that, we only need to install tidyverse instead of readr, tidyr and dplyr individually.\n\n\n\n\n\n\n\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\aryasiahaan\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nNotice that only the first ten records will be displayed. Do you know why?\n\n\n\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popagsex.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\n\n\n\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\nWarning: Maps Lie!\n\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n\n\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\n\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\n\n\n\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=FALSE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#overview",
    "title": "Hands-on Exercise 8a",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\n\n\n\n\n\n\nTip\n\n\n\nIt is advisable for you to read the functional description of each function before using them."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#getting-started",
    "title": "Hands-on Exercise 8a",
    "section": "",
    "text": "In this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that, we only need to install tidyverse instead of readr, tidyr and dplyr individually."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#importing-data-into-r",
    "title": "Hands-on Exercise 8a",
    "section": "",
    "text": "Two data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\aryasiahaan\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nNotice that only the first ten records will be displayed. Do you know why?\n\n\n\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popagsex.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 8a",
    "section": "",
    "text": "Two approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\nWarning: Maps Lie!\n\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n\n\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\n\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\n\n\n\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=FALSE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08a.html#reference",
    "title": "Hands-on Exercise 8a",
    "section": "",
    "text": "tmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, you will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package.\n\n\n\n\n\n\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\nThe code chunk:\n\n\nCode\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\n\n\n\n\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n\n\n\n\n\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\n\n\n\n\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\n\nCode\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\n\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\n\nCode\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date”” data type.\n\n\n\n\n\nThe code chunk below will be used to perform the changes.\n\n\nCode\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale.\n\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\nThe code chunk:\n\n\nCode\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated.\n\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\n\n\nIn this section, you will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\nBefore getting started, you are advised to read these two articles:\n\nIntroducing tidygraph\ntidygraph 1.1 - A tidy hope\n\n\n\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\n\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself.\n\n\n\n\nIn this section, you will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph()\n\n\nCode\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\n\n\n\nCode\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n\n\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\nFor example,\n\n\nCode\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\nVisit the reference guide of activate() to find out more about the function.\n\n\n\n\nggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nAs in all network graph, there are three main aspects to a ggraph’s network graph, they are:\n\nnodes,\nedges and\nlayouts.\n\nFor a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.\n\n\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\n\nCode\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\n\n\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\n\nCode\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\n\n\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\n\nCode\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\n\n\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n\n\n\n\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nlayout argument is used to define the layout to be used.\n\n\n\n\nIn this section, you will colour each node by referring to their respective departments.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.\n\n\n\n\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.\n\n\n\n\n\nAnother very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\n\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below uses theme() to change the position of the legend.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adds frame to each graph.\n\n\nCode\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunkc below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\n\n\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvisNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\nThe resulting graph is fun to play around with.\n\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.\nYou can also zoom in and out on the plot and move it around to re-center it.\n\n\n\n\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\n\nCode\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\n\nCode\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n\n\n\n\n\n\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\nVisit Igraph to find out more about visIgraphLayout’s argument.\n\n\n\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\n\nCode\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nVisit Option to find out more about visEdges’s argument.\n\n\n\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nVisit Option to find out more about visOption’s argument."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#overview",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, you will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\nThe code chunk:\n\n\nCode\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "The data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n\n\n\n\n\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\n\n\n\n\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\n\nCode\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\n\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\n\nCode\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date”” data type.\n\n\n\n\n\nThe code chunk below will be used to perform the changes.\n\n\nCode\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale.\n\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\nThe code chunk:\n\n\nCode\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated.\n\n\n\n\n\n\nTable below shows the data structure of the reformatted GAStech_edges data frame"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#creating-network-objects-using-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#creating-network-objects-using-tidygraph",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this section, you will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\nBefore getting started, you are advised to read these two articles:\n\nIntroducing tidygraph\ntidygraph 1.1 - A tidy hope\n\n\n\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\n\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself.\n\n\n\n\nIn this section, you will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph()\n\n\nCode\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\n\n\n\nCode\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n\n\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\nFor example,\n\n\nCode\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows\n\n\nVisit the reference guide of activate() to find out more about the function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-static-network-graphs-with-ggraph-package",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-static-network-graphs-with-ggraph-package",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "ggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nAs in all network graph, there are three main aspects to a ggraph’s network graph, they are:\n\nnodes,\nedges and\nlayouts.\n\nFor a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.\n\n\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\n\nCode\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\n\n\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\n\nCode\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\n\n\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\n\nCode\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\n\n\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n\n\n\n\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nlayout argument is used to define the layout to be used.\n\n\n\n\nIn this section, you will colour each node by referring to their respective departments.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.\n\n\n\n\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\n\nCode\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#creating-facet-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#creating-facet-graphs",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "Another very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\n\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below uses theme() to change the position of the legend.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adds frame to each graph.\n\n\nCode\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunkc below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\n\nCode\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#network-metrics-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#network-metrics-analysis",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "Centrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\n\n\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\n\nCode\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-interactive-network-graph-with-visnetwork",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-interactive-network-graph-with-visnetwork",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "visNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\nThe resulting graph is fun to play around with.\n\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.\nYou can also zoom in and out on the plot and move it around to re-center it.\n\n\n\n\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\n\nCode\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\n\nCode\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n\n\n\n\n\n\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\nVisit Igraph to find out more about visIgraphLayout’s argument.\n\n\n\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\n\nCode\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nVisit Option to find out more about visEdges’s argument.\n\n\n\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\n\nCode\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\nVisit Option to find out more about visOption’s argument."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "title": "Hands-on Exercise 4C",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages.\n\n\n\n\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\npackage 'FunnelPlotR' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\RtmpEd4rFh\\downloaded_packages\n\n\n\n\n\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\n\n\n\nIn this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly\n\n\n\n\n\n\n\n\n\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#overview",
    "title": "Hands-on Exercise 4C",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 4C",
    "section": "",
    "text": "In this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\npackage 'FunnelPlotR' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\RtmpEd4rFh\\downloaded_packages"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#importing-data",
    "title": "Hands-on Exercise 4C",
    "section": "",
    "text": "In this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#funnelplotr-methods",
    "title": "Hands-on Exercise 4C",
    "section": "",
    "text": "FunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on Exercise 4C",
    "section": "",
    "text": "In this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#references",
    "title": "Hands-on Exercise 4C",
    "section": "",
    "text": "funnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "title": "Hands-on Exercise 4A",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters\n\n\n\n\nggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\n\n\n\n\n\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\npackage 'pkgbuild' successfully unpacked and MD5 sums checked\npackage 'rprojroot' successfully unpacked and MD5 sums checked\npackage 'diffobj' successfully unpacked and MD5 sums checked\npackage 'brio' successfully unpacked and MD5 sums checked\npackage 'desc' successfully unpacked and MD5 sums checked\npackage 'pkgload' successfully unpacked and MD5 sums checked\npackage 'praise' successfully unpacked and MD5 sums checked\npackage 'waldo' successfully unpacked and MD5 sums checked\npackage 'testthat' successfully unpacked and MD5 sums checked\npackage 'SparseM' successfully unpacked and MD5 sums checked\npackage 'minqa' successfully unpacked and MD5 sums checked\npackage 'nloptr' successfully unpacked and MD5 sums checked\npackage 'carData' successfully unpacked and MD5 sums checked\npackage 'abind' successfully unpacked and MD5 sums checked\npackage 'quantreg' successfully unpacked and MD5 sums checked\npackage 'elliptic' successfully unpacked and MD5 sums checked\npackage 'contfrac' successfully unpacked and MD5 sums checked\npackage 'deSolve' successfully unpacked and MD5 sums checked\npackage 'plyr' successfully unpacked and MD5 sums checked\npackage 'lme4' successfully unpacked and MD5 sums checked\npackage 'pbkrtest' successfully unpacked and MD5 sums checked\npackage 'lmerTest' successfully unpacked and MD5 sums checked\npackage 'car' successfully unpacked and MD5 sums checked\npackage 'coda' successfully unpacked and MD5 sums checked\npackage 'pbapply' successfully unpacked and MD5 sums checked\npackage 'mvtnorm' successfully unpacked and MD5 sums checked\npackage 'MatrixModels' successfully unpacked and MD5 sums checked\npackage 'hypergeo' successfully unpacked and MD5 sums checked\npackage 'RcppEigen' successfully unpacked and MD5 sums checked\npackage 'multcompView' successfully unpacked and MD5 sums checked\npackage 'gmp' successfully unpacked and MD5 sums checked\npackage 'Rmpfr' successfully unpacked and MD5 sums checked\npackage 'SuppDists' successfully unpacked and MD5 sums checked\npackage 'kSamples' successfully unpacked and MD5 sums checked\npackage 'BWStest' successfully unpacked and MD5 sums checked\npackage 'reshape' successfully unpacked and MD5 sums checked\npackage 'bayestestR' successfully unpacked and MD5 sums checked\npackage 'reshape2' successfully unpacked and MD5 sums checked\npackage 'prismatic' successfully unpacked and MD5 sums checked\npackage 'afex' successfully unpacked and MD5 sums checked\npackage 'BayesFactor' successfully unpacked and MD5 sums checked\npackage 'effectsize' successfully unpacked and MD5 sums checked\npackage 'PMCMRplus' successfully unpacked and MD5 sums checked\npackage 'WRS2' successfully unpacked and MD5 sums checked\npackage 'zeallot' successfully unpacked and MD5 sums checked\npackage 'correlation' successfully unpacked and MD5 sums checked\npackage 'datawizard' successfully unpacked and MD5 sums checked\npackage 'ggcorrplot' successfully unpacked and MD5 sums checked\npackage 'ggside' successfully unpacked and MD5 sums checked\npackage 'ggsignif' successfully unpacked and MD5 sums checked\npackage 'insight' successfully unpacked and MD5 sums checked\npackage 'paletteer' successfully unpacked and MD5 sums checked\npackage 'parameters' successfully unpacked and MD5 sums checked\npackage 'performance' successfully unpacked and MD5 sums checked\npackage 'statsExpressions' successfully unpacked and MD5 sums checked\npackage 'ggstatsplot' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\Rtmp8MdDUQ\\downloaded_packages\n\n\n\n\n\nOnce again, Exam_data.csv will be utilized for the exercise.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to visualise model diagnostic and model parameters by using parameters package.\n\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDo-It-Yourself\n\n\n\n\npacman::p_load(readxl, performance, parameters, see)\n\npackage 'modelbased' successfully unpacked and MD5 sums checked\npackage 'see' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\Rtmp8MdDUQ\\downloaded_packages\n\n\n\n\n\n\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\nNotice that the output object car_resale is a tibble data frame.\n\n\n\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk, check_normality() of performance package.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\n\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\n\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\n\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#learning-outcome",
    "title": "Hands-on Exercise 4A",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on Exercise 4A",
    "section": "",
    "text": "ggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#getting-started",
    "title": "Hands-on Exercise 4A",
    "section": "",
    "text": "In this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\npackage 'pkgbuild' successfully unpacked and MD5 sums checked\npackage 'rprojroot' successfully unpacked and MD5 sums checked\npackage 'diffobj' successfully unpacked and MD5 sums checked\npackage 'brio' successfully unpacked and MD5 sums checked\npackage 'desc' successfully unpacked and MD5 sums checked\npackage 'pkgload' successfully unpacked and MD5 sums checked\npackage 'praise' successfully unpacked and MD5 sums checked\npackage 'waldo' successfully unpacked and MD5 sums checked\npackage 'testthat' successfully unpacked and MD5 sums checked\npackage 'SparseM' successfully unpacked and MD5 sums checked\npackage 'minqa' successfully unpacked and MD5 sums checked\npackage 'nloptr' successfully unpacked and MD5 sums checked\npackage 'carData' successfully unpacked and MD5 sums checked\npackage 'abind' successfully unpacked and MD5 sums checked\npackage 'quantreg' successfully unpacked and MD5 sums checked\npackage 'elliptic' successfully unpacked and MD5 sums checked\npackage 'contfrac' successfully unpacked and MD5 sums checked\npackage 'deSolve' successfully unpacked and MD5 sums checked\npackage 'plyr' successfully unpacked and MD5 sums checked\npackage 'lme4' successfully unpacked and MD5 sums checked\npackage 'pbkrtest' successfully unpacked and MD5 sums checked\npackage 'lmerTest' successfully unpacked and MD5 sums checked\npackage 'car' successfully unpacked and MD5 sums checked\npackage 'coda' successfully unpacked and MD5 sums checked\npackage 'pbapply' successfully unpacked and MD5 sums checked\npackage 'mvtnorm' successfully unpacked and MD5 sums checked\npackage 'MatrixModels' successfully unpacked and MD5 sums checked\npackage 'hypergeo' successfully unpacked and MD5 sums checked\npackage 'RcppEigen' successfully unpacked and MD5 sums checked\npackage 'multcompView' successfully unpacked and MD5 sums checked\npackage 'gmp' successfully unpacked and MD5 sums checked\npackage 'Rmpfr' successfully unpacked and MD5 sums checked\npackage 'SuppDists' successfully unpacked and MD5 sums checked\npackage 'kSamples' successfully unpacked and MD5 sums checked\npackage 'BWStest' successfully unpacked and MD5 sums checked\npackage 'reshape' successfully unpacked and MD5 sums checked\npackage 'bayestestR' successfully unpacked and MD5 sums checked\npackage 'reshape2' successfully unpacked and MD5 sums checked\npackage 'prismatic' successfully unpacked and MD5 sums checked\npackage 'afex' successfully unpacked and MD5 sums checked\npackage 'BayesFactor' successfully unpacked and MD5 sums checked\npackage 'effectsize' successfully unpacked and MD5 sums checked\npackage 'PMCMRplus' successfully unpacked and MD5 sums checked\npackage 'WRS2' successfully unpacked and MD5 sums checked\npackage 'zeallot' successfully unpacked and MD5 sums checked\npackage 'correlation' successfully unpacked and MD5 sums checked\npackage 'datawizard' successfully unpacked and MD5 sums checked\npackage 'ggcorrplot' successfully unpacked and MD5 sums checked\npackage 'ggside' successfully unpacked and MD5 sums checked\npackage 'ggsignif' successfully unpacked and MD5 sums checked\npackage 'insight' successfully unpacked and MD5 sums checked\npackage 'paletteer' successfully unpacked and MD5 sums checked\npackage 'parameters' successfully unpacked and MD5 sums checked\npackage 'performance' successfully unpacked and MD5 sums checked\npackage 'statsExpressions' successfully unpacked and MD5 sums checked\npackage 'ggstatsplot' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\Rtmp8MdDUQ\\downloaded_packages\n\n\n\n\n\nOnce again, Exam_data.csv will be utilized for the exercise.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-models",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-models",
    "title": "Hands-on Exercise 4A",
    "section": "",
    "text": "In this section, you will learn how to visualise model diagnostic and model parameters by using parameters package.\n\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 4A",
    "section": "",
    "text": "Do-It-Yourself\n\n\n\n\npacman::p_load(readxl, performance, parameters, see)\n\npackage 'modelbased' successfully unpacked and MD5 sums checked\npackage 'see' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\Rtmp8MdDUQ\\downloaded_packages\n\n\n\n\n\n\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\nNotice that the output object car_resale is a tibble data frame.\n\n\n\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk, check_normality() of performance package.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\n\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\n\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\n\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "title": "Hands-on Exercise 3a",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(plotly,patchwork, DT, tidyverse) \nlibrary(ggiraph)\n\n\n\n\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\nlibrary(ggiraph)\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e.geom_dotplot_interactive()) will be used to create the basic graph. Then,girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\n\n\n\n\n\n\n\n\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#learning-outcome",
    "title": "Hands-on Exercise 3a",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#getting-started",
    "title": "Hands-on Exercise 3a",
    "section": "",
    "text": "First, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(plotly,patchwork, DT, tidyverse) \nlibrary(ggiraph)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "title": "Hands-on Exercise 3a",
    "section": "",
    "text": "In this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3a",
    "section": "",
    "text": "ggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\nlibrary(ggiraph)\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e.geom_dotplot_interactive()) will be used to create the basic graph. Then,girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactivity",
    "title": "Hands-on Exercise 3a",
    "section": "",
    "text": "By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactivity-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactivity-1",
    "title": "Hands-on Exercise 3a",
    "section": "",
    "text": "By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3a",
    "section": "",
    "text": "Plotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3a",
    "section": "",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#reference",
    "title": "Hands-on Exercise 3a",
    "section": "",
    "text": "This link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By the end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.\n\n\n\n\n\nBefore we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below assumes that you already have pacman package installed. If not, please go ahead install pacman first.\n\n\n\npacman::p_load(tidyverse)\n\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\n\n\n\n is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics\n\nIt is also part of the tidyverse family specially designed for visual exploration and communication.\n\n\nFor more detail, visit ggplot2 link.\n\n\n\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\n\n\n\n\n\n\nBefore we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\nWhat is a statistical graphic?\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n\n\n\n\nLet us call the ggplot() function using the code chunk on the right.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().\n\n\n\n\n\n\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label.\n\n\n\n\n\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBe warned\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\n\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\n\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n\n\n\n\n\n\n\n\n\n\n\n\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nIn the code chunk below,geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe default method used is loess.\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\n\n\n\n\n\n\n\n\n\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By the end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Before we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below assumes that you already have pacman package installed. If not, please go ahead install pacman first.\n\n\n\npacman::p_load(tidyverse)\n\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics\n\nIt is also part of the tidyverse family specially designed for visual exploration and communication.\n\n\nFor more detail, visit ggplot2 link.\n\n\n\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Before we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\nWhat is a statistical graphic?\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Let us call the ggplot() function using the code chunk on the right.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Geometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBe warned\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\n\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\n\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nIn the code chunk below,geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe default method used is loess.\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Themes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Hadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package.\n\n\n\n\n\n\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse)\n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\n\n\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nggrepel  is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\n\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.\n\n\n\n\n\n\n\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\nNext\n\nThe plotThe code\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\nThe plotThe code\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\nTo learn more about, refer to Plot Assembly.\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\n\n\n\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse)\n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "One of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nggrepel  is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\n\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "ggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\nNext\n\nThe plotThe code\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\nThe plotThe code\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\nTo learn more about, refer to Plot Assembly.\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Patchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "title": "Hands-on Exercise 3b",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.\n\n\n\n\n\n\n\n\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\nThe animated bubble chart\n\n\n\n\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\n\n\n\n\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "title": "Hands-on Exercise 3b",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "title": "Hands-on Exercise 3b",
    "section": "",
    "text": "First, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3b",
    "section": "",
    "text": "gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\nThe animated bubble chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 3b",
    "section": "",
    "text": "In Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "title": "Hands-on Exercise 3b",
    "section": "",
    "text": "Getting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "title": "Hands-on Exercise 4B",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package.\n\n\n\n\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nstrapgod (NA -&gt; ea2b1ecfc...) [GitHub]\n\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\RtmpCezAJG\\remotes75585cc16a3d\\DavisVaughan-strapgod-ea2b1ec/DESCRIPTION' ... OK\n* preparing 'strapgod':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\nOmitted 'LazyData' from DESCRIPTION\n* building 'strapgod_0.0.4.9000.tar.gz'\n\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\RtmpCezAJG\\remotes755838015322\\wilkelab-ungeviz-aeae12b/DESCRIPTION' ... OK\n* preparing 'ungeviz':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building 'ungeviz_0.1.0.tar.gz'\n\n\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\npackage 'proxy' successfully unpacked and MD5 sums checked\npackage 'e1071' successfully unpacked and MD5 sums checked\npackage 'wk' successfully unpacked and MD5 sums checked\npackage 'classInt' successfully unpacked and MD5 sums checked\npackage 's2' successfully unpacked and MD5 sums checked\npackage 'units' successfully unpacked and MD5 sums checked\npackage 'sf' successfully unpacked and MD5 sums checked\npackage 'lpSolve' successfully unpacked and MD5 sums checked\npackage 'transformr' successfully unpacked and MD5 sums checked\npackage 'tweenr' successfully unpacked and MD5 sums checked\npackage 'gganimate' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\RtmpCezAJG\\downloaded_packages\n\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor the mathematical explanation, please refer to Slide 20 of Lesson 4.\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\n\n\n\n\n\n\n\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour turn\n\n\n\nMakeover the plot on previous slide by showing 95% and 99% confidence intervals.\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\n\n\nStep 1: Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nNote: You only need to perform this step once.\nStep 2: Launch the application in R\n\nlibrary(ungeviz)\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)\n\nNULL\n\n\n\n\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)\n\nNULL"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#learning-outcome",
    "title": "Hands-on Exercise 4B",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#getting-started",
    "title": "Hands-on Exercise 4B",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nstrapgod (NA -&gt; ea2b1ecfc...) [GitHub]\n\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\RtmpCezAJG\\remotes75585cc16a3d\\DavisVaughan-strapgod-ea2b1ec/DESCRIPTION' ... OK\n* preparing 'strapgod':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\nOmitted 'LazyData' from DESCRIPTION\n* building 'strapgod_0.0.4.9000.tar.gz'\n\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\RtmpCezAJG\\remotes755838015322\\wilkelab-ungeviz-aeae12b/DESCRIPTION' ... OK\n* preparing 'ungeviz':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building 'ungeviz_0.1.0.tar.gz'\n\n\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\npackage 'proxy' successfully unpacked and MD5 sums checked\npackage 'e1071' successfully unpacked and MD5 sums checked\npackage 'wk' successfully unpacked and MD5 sums checked\npackage 'classInt' successfully unpacked and MD5 sums checked\npackage 's2' successfully unpacked and MD5 sums checked\npackage 'units' successfully unpacked and MD5 sums checked\npackage 'sf' successfully unpacked and MD5 sums checked\npackage 'lpSolve' successfully unpacked and MD5 sums checked\npackage 'transformr' successfully unpacked and MD5 sums checked\npackage 'tweenr' successfully unpacked and MD5 sums checked\npackage 'gganimate' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\RtmpCezAJG\\downloaded_packages\n\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Exercise 4B",
    "section": "",
    "text": "A point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor the mathematical explanation, please refer to Slide 20 of Lesson 4.\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-uncertainty-ggdist-package",
    "title": "Hands-on Exercise 4B",
    "section": "",
    "text": "ggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour turn\n\n\n\nMakeover the plot on previous slide by showing 95% and 99% confidence intervals.\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Exercise 4B",
    "section": "",
    "text": "Step 1: Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nNote: You only need to perform this step once.\nStep 2: Launch the application in R\n\nlibrary(ungeviz)\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)\n\nNULL"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "Hands-on Exercise 4B",
    "section": "",
    "text": "ggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)\n\nNULL"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to visualise and analyse text data using R.\nBy the end of this hands-on exercise, you will be able to:\n\nunderstand tidytext framework for processing, analysing and visualising text data,\nwrite function for importing multiple files into R,\ncombine multiple files into a single data frame,\nclean and wrangle text data by using tidyverse approach,\nvisualise words with Word Cloud,\ncompute term frequency–inverse document frequency (TF-IDF) using tidytext method, and\nvisualising texts and terms relationship.\n\n\n\n\n\n\nIn this hands-on exercise, the following R packages for handling, processing, wrangling, analysing and visualising text data will be used:\n\ntidytext, tidyverse (mainly readr, purrr, stringr, ggplot2)\nwidyr,\nwordcloud and ggwordcloud,\ntextplot (required igraph, tidygraph and ggraph, )\nDT,\nlubridate and hms.\n\nThe code chunk:\n\npacman::p_load(tidytext, widyr, wordcloud, DT, ggwordcloud, textplot, lubridate, hms,\ntidyverse, tidygraph, ggraph, igraph)\n\n\n\n\n\n\n\n\nnews20 &lt;- \"data/20news/\"\n\n\n\n\n\nread_folder &lt;- function(infolder) {\n  tibble(file = dir(infolder, \n                    full.names = TRUE)) %&gt;%\n    mutate(text = map(file, \n                      read_lines)) %&gt;%\n    transmute(id = basename(file), \n              text) %&gt;%\n    unnest(text)\n}\n\n\n\n\n\n\n\n\nraw_text &lt;- tibble(folder = \n                     dir(news20, \n                         full.names = TRUE)) %&gt;%\n  mutate(folder_out = map(folder, \n                          read_folder)) %&gt;%\n  unnest(cols = c(folder_out)) %&gt;%\n  transmute(newsgroup = basename(folder), \n            id, text)\nwrite_rds(raw_text, \"data/rds/news20.rds\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_lines() of readr package is used to read up to n_max lines from a file.\nmap() of purrr package is used to transform their input by applying a function to each element of a list and returning an object of the same length as the input.\nunnest() of dplyr package is used to flatten a list-column of data frames back out into regular columns.\nmutate() of dplyr is used to add new variables and preserves existing ones;\ntransmute() of dplyr is used to add new variables and drops existing ones.\nread_rds() is used to save the extracted and combined data frame as rds file for future use.\n\n\n\n\n\n\n\nFigure below shows the frequency of messages by newsgroup.\nThe code chunk:\n\nraw_text &lt;- read_rds(\"data/rds/news20.rds\")\nraw_text %&gt;%\n  group_by(newsgroup) %&gt;%\n  summarize(messages = n_distinct(id)) %&gt;%\n  ggplot(aes(messages, newsgroup)) +\n  geom_col(fill = \"lightblue\") +\n  labs(y = NULL)\n\n\n\n\n\n\n\n\n\n\n\n\nUsing tidy data principles in processing, analysing and visualising text data.\nMuch of the infrastructure needed for text mining with tidy data frames already exists in packages like ‘dplyr’, ‘broom’, ‘tidyr’, and ‘ggplot2’.\n\nFigure below shows the workflow using tidytext approach for processing and visualising text data.\n\n\n\nNotice that each message has some structure and extra text that we don’t want to include in our analysis. For example, every message has a header, containing field such as “from:” or “in_reply_to:” that describe the message. Some also have automated email signatures, which occur after a line like “–”.\n\ncleaned_text &lt;- raw_text %&gt;%\n  group_by(newsgroup, id) %&gt;%\n  filter(cumsum(text == \"\") &gt; 0,\n         cumsum(str_detect(\n           text, \"^--\")) == 0) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\n\n\n\ncumsum() of base R is used to return a vector whose elements are the cumulative sums of the elements of the argument.\nstr_detect() from stringr is used to detect the presence or absence of a pattern in a string.\n\n\n\n\n\n\nIn this code chunk below, regular expressions are used to remove with nested text representing quotes from other users.\n\ncleaned_text &lt;- cleaned_text %&gt;%\n  filter(str_detect(text, \"^[^&gt;]+[A-Za-z\\\\d]\")\n         | text == \"\",\n         !str_detect(text, \n                     \"writes(:|\\\\.\\\\.\\\\.)$\"),\n         !str_detect(text, \n                     \"^In article &lt;\")\n  )\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\n\n\n\nstr_detect() from stringr is used to detect the presence or absence of a pattern in a string.\nfilter() of dplyr package is used to subset a data frame, retaining all rows that satisfy the specified conditions.\n\n\n\n\n\n\nIn this code chunk below, unnest_tokens() of tidytext package is used to split the dataset into tokens, while stop_words() is used to remove stop-words.\n\nusenet_words &lt;- cleaned_text %&gt;%\n  unnest_tokens(word, text) %&gt;%\n  filter(str_detect(word, \"[a-z']$\"),\n         !word %in% stop_words$word)\n\nNow that we’ve removed the headers, signatures, and formatting, we can start exploring common words. For starters, we could find the most common words in the entire dataset, or within particular newsgroups.\n\nusenet_words %&gt;%\n  count(word, sort = TRUE)\n\n# A tibble: 5,542 × 2\n   word           n\n   &lt;chr&gt;      &lt;int&gt;\n 1 people        57\n 2 time          50\n 3 jesus         47\n 4 god           44\n 5 message       40\n 6 br            27\n 7 bible         23\n 8 drive         23\n 9 homosexual    23\n10 read          22\n# ℹ 5,532 more rows\n\n\nInstead of counting individual word, you can also count words within by newsgroup by using the code chunk below.\n\nwords_by_newsgroup &lt;- usenet_words %&gt;%\n  count(newsgroup, word, sort = TRUE) %&gt;%\n  ungroup()\n\n\n\n\nIn this code chunk below, wordcloud() of wordcloud package is used to plot a static wordcloud.\n\nwordcloud(words_by_newsgroup$word,\n          words_by_newsgroup$n,\n          max.words = 300)\n\n\n\n\n\n\n\n\nA DT table can be used to complement the visual discovery.\n\n\n\nThe wordcloud below is plotted by using ggwordcloud package.\nThe code chunk used:\n\nset.seed(1234)\n\nwords_by_newsgroup %&gt;%\n  filter(n &gt; 0) %&gt;%\nggplot(aes(label = word,\n           size = n)) +\n  geom_text_wordcloud() +\n  theme_minimal() +\n  facet_wrap(~newsgroup)\n\n\n\n\n\n\n\n\n\n\n\n\n\ntf–idf, short for term frequency–inverse document frequency, is a numerical statistic that is intended to reflect how important a word is to a document in a collection of corpus.\n\n\n\n\nThe code chunk below uses bind_tf_idf() of tidytext to compute and bind the term frequency, inverse document frequency and ti-idf of a tidy text dataset to the dataset.\n\ntf_idf &lt;- words_by_newsgroup %&gt;%\n  bind_tf_idf(word, newsgroup, n) %&gt;%\n  arrange(desc(tf_idf))\n\n\n\n\nTable below is an interactive table created by using datatable().\n\n\n\nThe code chunk below uses datatable() of DT package to create a html table that allows pagination of rows and columns.\n\nDT::datatable(tf_idf, filter = 'top') %&gt;% \n  formatRound(columns = c('tf', 'idf', \n                          'tf_idf'), \n              digits = 3) %&gt;%\n  formatStyle(0, \n              target = 'row', \n              lineHeight='25%')\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\n\n\n\nfilter() argument is used to turn control the filter UI.\nformatRound() is used to customise the values format. The argument digits define the number of decimal places.\nformatStyle() is used to customise the output table. In this example, the arguments target and lineHeight are used to reduce the line height by 25%.\n\n\n\nTo learn more about customising DT’s table, visit this link.\n\n\n\nFacet bar charts technique is used to visualise the tf-idf values of science related newsgroup.\nThe code chunk used to prepare the plot.\n\ntf_idf %&gt;%\n  filter(str_detect(newsgroup, \"^sci\\\\.\")) %&gt;%\n  group_by(newsgroup) %&gt;%\n  slice_max(tf_idf, \n            n = 12) %&gt;%\n  ungroup() %&gt;%\n  mutate(word = reorder(word, \n                        tf_idf)) %&gt;%\n  ggplot(aes(tf_idf, \n             word, \n             fill = newsgroup)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ newsgroup, \n             scales = \"free\") +\n  labs(x = \"tf-idf\", \n       y = NULL)\n\n\n\n\n\n\n\n\n\n\n\n\nTo count the number of times that two words appear within the same document, or to see how correlated they are.\nMost operations for finding pairwise counts or correlations need to turn the data into a wide matrix first.\nwidyr package first ‘casts’ a tidy dataset into a wide matrix, performs an operation such as a correlation on it, then re-tidies the result.\n\nIn this code chunk below, pairwise_cor() of widyr package is used to compute the correlation between newsgroup based on the common words found.\n\nnewsgroup_cors &lt;- words_by_newsgroup %&gt;%\n  pairwise_cor(newsgroup, \n               word, \n               n, \n               sort = TRUE)\n\n\nIn this code chunk below, pairwise_cor() of widyr package is used to compute the correlation between newsgroup based on the common words found.\n\nnewsgroup_cors &lt;- words_by_newsgroup %&gt;%\n  pairwise_cor(newsgroup, \n               word, \n               n, \n               sort = TRUE)\n\n\n\n\nNow, we can visualise the relationship between newgroups in network graph as shown below.\n\nset.seed(2017)\n\nnewsgroup_cors %&gt;%\n  filter(correlation &gt; .025) %&gt;%\n  graph_from_data_frame() %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(alpha = correlation, \n                     width = correlation)) +\n  geom_node_point(size = 6, \n                  color = \"lightblue\") +\n  geom_node_text(aes(label = name),\n                 color = \"red\",\n                 repel = TRUE) +\n  theme_void()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#learning-outcome",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to visualise and analyse text data using R.\nBy the end of this hands-on exercise, you will be able to:\n\nunderstand tidytext framework for processing, analysing and visualising text data,\nwrite function for importing multiple files into R,\ncombine multiple files into a single data frame,\nclean and wrangle text data by using tidyverse approach,\nvisualise words with Word Cloud,\ncompute term frequency–inverse document frequency (TF-IDF) using tidytext method, and\nvisualising texts and terms relationship."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, the following R packages for handling, processing, wrangling, analysing and visualising text data will be used:\n\ntidytext, tidyverse (mainly readr, purrr, stringr, ggplot2)\nwidyr,\nwordcloud and ggwordcloud,\ntextplot (required igraph, tidygraph and ggraph, )\nDT,\nlubridate and hms.\n\nThe code chunk:\n\npacman::p_load(tidytext, widyr, wordcloud, DT, ggwordcloud, textplot, lubridate, hms,\ntidyverse, tidygraph, ggraph, igraph)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "news20 &lt;- \"data/20news/\"\n\n\n\n\n\nread_folder &lt;- function(infolder) {\n  tibble(file = dir(infolder, \n                    full.names = TRUE)) %&gt;%\n    mutate(text = map(file, \n                      read_lines)) %&gt;%\n    transmute(id = basename(file), \n              text) %&gt;%\n    unnest(text)\n}"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders-1",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "raw_text &lt;- tibble(folder = \n                     dir(news20, \n                         full.names = TRUE)) %&gt;%\n  mutate(folder_out = map(folder, \n                          read_folder)) %&gt;%\n  unnest(cols = c(folder_out)) %&gt;%\n  transmute(newsgroup = basename(folder), \n            id, text)\nwrite_rds(raw_text, \"data/rds/news20.rds\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_lines() of readr package is used to read up to n_max lines from a file.\nmap() of purrr package is used to transform their input by applying a function to each element of a list and returning an object of the same length as the input.\nunnest() of dplyr package is used to flatten a list-column of data frames back out into regular columns.\nmutate() of dplyr is used to add new variables and preserves existing ones;\ntransmute() of dplyr is used to add new variables and drops existing ones.\nread_rds() is used to save the extracted and combined data frame as rds file for future use."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#initial-eda",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#initial-eda",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "Figure below shows the frequency of messages by newsgroup.\nThe code chunk:\n\nraw_text &lt;- read_rds(\"data/rds/news20.rds\")\nraw_text %&gt;%\n  group_by(newsgroup) %&gt;%\n  summarize(messages = n_distinct(id)) %&gt;%\n  ggplot(aes(messages, newsgroup)) +\n  geom_col(fill = \"lightblue\") +\n  labs(y = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#introducing-tidytext",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#introducing-tidytext",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "Using tidy data principles in processing, analysing and visualising text data.\nMuch of the infrastructure needed for text mining with tidy data frames already exists in packages like ‘dplyr’, ‘broom’, ‘tidyr’, and ‘ggplot2’.\n\nFigure below shows the workflow using tidytext approach for processing and visualising text data.\n\n\n\nNotice that each message has some structure and extra text that we don’t want to include in our analysis. For example, every message has a header, containing field such as “from:” or “in_reply_to:” that describe the message. Some also have automated email signatures, which occur after a line like “–”.\n\ncleaned_text &lt;- raw_text %&gt;%\n  group_by(newsgroup, id) %&gt;%\n  filter(cumsum(text == \"\") &gt; 0,\n         cumsum(str_detect(\n           text, \"^--\")) == 0) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\n\n\n\ncumsum() of base R is used to return a vector whose elements are the cumulative sums of the elements of the argument.\nstr_detect() from stringr is used to detect the presence or absence of a pattern in a string.\n\n\n\n\n\n\nIn this code chunk below, regular expressions are used to remove with nested text representing quotes from other users.\n\ncleaned_text &lt;- cleaned_text %&gt;%\n  filter(str_detect(text, \"^[^&gt;]+[A-Za-z\\\\d]\")\n         | text == \"\",\n         !str_detect(text, \n                     \"writes(:|\\\\.\\\\.\\\\.)$\"),\n         !str_detect(text, \n                     \"^In article &lt;\")\n  )\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\n\n\n\nstr_detect() from stringr is used to detect the presence or absence of a pattern in a string.\nfilter() of dplyr package is used to subset a data frame, retaining all rows that satisfy the specified conditions.\n\n\n\n\n\n\nIn this code chunk below, unnest_tokens() of tidytext package is used to split the dataset into tokens, while stop_words() is used to remove stop-words.\n\nusenet_words &lt;- cleaned_text %&gt;%\n  unnest_tokens(word, text) %&gt;%\n  filter(str_detect(word, \"[a-z']$\"),\n         !word %in% stop_words$word)\n\nNow that we’ve removed the headers, signatures, and formatting, we can start exploring common words. For starters, we could find the most common words in the entire dataset, or within particular newsgroups.\n\nusenet_words %&gt;%\n  count(word, sort = TRUE)\n\n# A tibble: 5,542 × 2\n   word           n\n   &lt;chr&gt;      &lt;int&gt;\n 1 people        57\n 2 time          50\n 3 jesus         47\n 4 god           44\n 5 message       40\n 6 br            27\n 7 bible         23\n 8 drive         23\n 9 homosexual    23\n10 read          22\n# ℹ 5,532 more rows\n\n\nInstead of counting individual word, you can also count words within by newsgroup by using the code chunk below.\n\nwords_by_newsgroup &lt;- usenet_words %&gt;%\n  count(newsgroup, word, sort = TRUE) %&gt;%\n  ungroup()\n\n\n\n\nIn this code chunk below, wordcloud() of wordcloud package is used to plot a static wordcloud.\n\nwordcloud(words_by_newsgroup$word,\n          words_by_newsgroup$n,\n          max.words = 300)\n\n\n\n\n\n\n\n\nA DT table can be used to complement the visual discovery.\n\n\n\nThe wordcloud below is plotted by using ggwordcloud package.\nThe code chunk used:\n\nset.seed(1234)\n\nwords_by_newsgroup %&gt;%\n  filter(n &gt; 0) %&gt;%\nggplot(aes(label = word,\n           size = n)) +\n  geom_text_wordcloud() +\n  theme_minimal() +\n  facet_wrap(~newsgroup)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#basic-concept-of-tf-idf",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#basic-concept-of-tf-idf",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "tf–idf, short for term frequency–inverse document frequency, is a numerical statistic that is intended to reflect how important a word is to a document in a collection of corpus.\n\n\n\n\nThe code chunk below uses bind_tf_idf() of tidytext to compute and bind the term frequency, inverse document frequency and ti-idf of a tidy text dataset to the dataset.\n\ntf_idf &lt;- words_by_newsgroup %&gt;%\n  bind_tf_idf(word, newsgroup, n) %&gt;%\n  arrange(desc(tf_idf))\n\n\n\n\nTable below is an interactive table created by using datatable().\n\n\n\nThe code chunk below uses datatable() of DT package to create a html table that allows pagination of rows and columns.\n\nDT::datatable(tf_idf, filter = 'top') %&gt;% \n  formatRound(columns = c('tf', 'idf', \n                          'tf_idf'), \n              digits = 3) %&gt;%\n  formatStyle(0, \n              target = 'row', \n              lineHeight='25%')\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\n\n\n\nfilter() argument is used to turn control the filter UI.\nformatRound() is used to customise the values format. The argument digits define the number of decimal places.\nformatStyle() is used to customise the output table. In this example, the arguments target and lineHeight are used to reduce the line height by 25%.\n\n\n\nTo learn more about customising DT’s table, visit this link.\n\n\n\nFacet bar charts technique is used to visualise the tf-idf values of science related newsgroup.\nThe code chunk used to prepare the plot.\n\ntf_idf %&gt;%\n  filter(str_detect(newsgroup, \"^sci\\\\.\")) %&gt;%\n  group_by(newsgroup) %&gt;%\n  slice_max(tf_idf, \n            n = 12) %&gt;%\n  ungroup() %&gt;%\n  mutate(word = reorder(word, \n                        tf_idf)) %&gt;%\n  ggplot(aes(tf_idf, \n             word, \n             fill = newsgroup)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ newsgroup, \n             scales = \"free\") +\n  labs(x = \"tf-idf\", \n       y = NULL)\n\n\n\n\n\n\n\n\n\n\n\n\nTo count the number of times that two words appear within the same document, or to see how correlated they are.\nMost operations for finding pairwise counts or correlations need to turn the data into a wide matrix first.\nwidyr package first ‘casts’ a tidy dataset into a wide matrix, performs an operation such as a correlation on it, then re-tidies the result.\n\nIn this code chunk below, pairwise_cor() of widyr package is used to compute the correlation between newsgroup based on the common words found.\n\nnewsgroup_cors &lt;- words_by_newsgroup %&gt;%\n  pairwise_cor(newsgroup, \n               word, \n               n, \n               sort = TRUE)\n\n\nIn this code chunk below, pairwise_cor() of widyr package is used to compute the correlation between newsgroup based on the common words found.\n\nnewsgroup_cors &lt;- words_by_newsgroup %&gt;%\n  pairwise_cor(newsgroup, \n               word, \n               n, \n               sort = TRUE)\n\n\n\n\nNow, we can visualise the relationship between newgroups in network graph as shown below.\n\nset.seed(2017)\n\nnewsgroup_cors %&gt;%\n  filter(correlation &gt; .025) %&gt;%\n  graph_from_data_frame() %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(alpha = correlation, \n                     width = correlation)) +\n  geom_node_point(size = 6, \n                  color = \"lightblue\") +\n  geom_node_text(aes(label = name),\n                 color = \"red\",\n                 repel = TRUE) +\n  theme_void()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#learning-outcome",
    "title": "Hands-on Exercise 7",
    "section": "17.1 Learning Outcome",
    "text": "17.1 Learning Outcome\nBy the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#getting-started",
    "title": "Hands-on Exercise 7",
    "section": "17.2 Getting Started",
    "text": "17.2 Getting Started"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#do-it-yourself",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#do-it-yourself",
    "title": "Hands-on Exercise 7",
    "section": "17.3 Do It Yourself",
    "text": "17.3 Do It Yourself\nWrite a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\n\nCode\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 7",
    "section": "17.4 Plotting Calendar Heatmap",
    "text": "17.4 Plotting Calendar Heatmap\nIn this section, you will learn how to plot a calender heatmap programmatically by using ggplot2 package.\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\n17.4.1 The Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n17.4.2 Importing the data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n17.4.3 Examining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n17.4.4 Data Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n17.4.5 Building the Calendar Heatmaps\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\n17.4.6 Building Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n17.4.7 Plotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n17.4.8 Plotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-cycle-plot",
    "title": "Hands-on Exercise 7",
    "section": "17.5 Plotting Cycle Plot",
    "text": "17.5 Plotting Cycle Plot\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n17.5.1 Step 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n17.5.2 Step 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\n17.5.3 Step 4: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\n17.5.4 Step 5: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n17.5.5 Srep 6: Plotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-slopegraph",
    "title": "Hands-on Exercise 7",
    "section": "17.6 Plotting Slopegraph",
    "text": "17.6 Plotting Slopegraph\nIn this section you will learn how to plot a slopegraph by using R.\nBefore getting start, make sure that CGPfunctions has been installed and loaded onto R environment. Then, refer to Using newggslopegraph to learn more about the function. Lastly, read more about newggslopegraph() and its arguments by referring to this link.\n\n17.6.1 Step 1: Data Import\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\n17.6.2 Step 2: Plotting the slopegraph\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#learning-outcome",
    "title": "Hands-on Exercise 8b",
    "section": "23.1 Learning outcome",
    "text": "23.1 Learning outcome\nBy the end of this hands-on exercise, you will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#the-data",
    "title": "Hands-on Exercise 8b",
    "section": "25.1 The data",
    "text": "25.1 The data\nThe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nFigure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#data-import-and-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#data-import-and-preparation",
    "title": "Hands-on Exercise 8b",
    "section": "25.2 Data Import and Preparation",
    "text": "25.2 Data Import and Preparation\nThe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() is used to do the job.\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\nNotice that the sgpools data in tibble data frame and not the common R data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 8b",
    "section": "25.3 Creating a sf data frame from an aspatial data frame",
    "text": "25.3 Creating a sf data frame from an aspatial data frame\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\nThings to learn from the arguments above:\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\n\nFigure below shows the data table of sgpools_sf. Notice that a new column called geometry has been added into the data frame.\n\nYou can display the basic information of the newly created sgpools_sf by using the code chunk below.\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\nThe output shows that sgppols_sf is in point feature class. It’s epsg ID is 3414. The bbox provides information of the extend of the geospatial data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#it-all-started-with-an-interactive-point-symbol-map",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#it-all-started-with-an-interactive-point-symbol-map",
    "title": "Hands-on Exercise 8b",
    "section": "26.1 It all started with an interactive point symbol map",
    "text": "26.1 It all started with an interactive point symbol map\nThe code chunks below are used to create an interactive point symbol map.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-make-it-proportional",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-make-it-proportional",
    "title": "Hands-on Exercise 8b",
    "section": "26.2 Lets make it proportional",
    "text": "26.2 Lets make it proportional\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-give-it-a-different-colour",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#lets-give-it-a-different-colour",
    "title": "Hands-on Exercise 8b",
    "section": "26.3 Lets give it a different colour",
    "text": "26.3 Lets give it a different colour\nThe proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#i-have-a-twin-brothers",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#i-have-a-twin-brothers",
    "title": "Hands-on Exercise 8b",
    "section": "26.4 I have a twin brothers :)",
    "text": "26.4 I have a twin brothers :)\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\nBefore you end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#all-about-tmap-package",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#all-about-tmap-package",
    "title": "Hands-on Exercise 8b",
    "section": "27.1 All about tmap package",
    "text": "27.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#geospatial-data-wrangling-1",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#geospatial-data-wrangling-1",
    "title": "Hands-on Exercise 8b",
    "section": "27.2 Geospatial data wrangling",
    "text": "27.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08b.html#data-wrangling",
    "title": "Hands-on Exercise 8b",
    "section": "27.3 Data wrangling",
    "text": "27.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html",
    "title": "Hands-on Exercise 9a",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package.\n\n\n\n\nFor this exercise, two main R packages will be used in this hands-on exercise, they are:\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\nWe will also need to ensure that selected tidyverse family packages namely: readr, dplyr and tidyr are also installed and loaded.\nIn this exercise, version 3.2.1 of ggplot2 will be installed instead of the latest version of ggplot2. This is because the current version of ggtern package is not compatible to the latest version of ggplot2.\nThe code chunks below will accomplish the task.\n\n\n\n\n\n\nFor the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called respopagsex2000to2018_tidy.csv and is in csv file format.\n\n\n\nTo important respopagsex2000to2018_tidy.csv into R, read_csv() function of readr package will be used.\nwcb #Reading the data into R environment pop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")}\n\n\n\nNext, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\nwcb #Deriving the young, economy active and old measures agpop_mutated &lt;- pop_data %&gt;%   mutate(`Year` = as.character(Year))%&gt;%   spread(AG, Population) %&gt;%   mutate(YOUNG = rowSums(.[4:8]))%&gt;%   mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%   mutate(OLD = rowSums(.[17:21])) %&gt;%   mutate(TOTAL = rowSums(.[22:24])) %&gt;%   filter(Year == 2018)%&gt;%   filter(TOTAL &gt; 0)}\n\n\n\n\n\n\nUse ggtern() function of ggtern package to create a simple ternary plot.\nwcb #Building the static ternary plot ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +   geom_point()}\nwcb #Building the static ternary plot ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +   geom_point() +   labs(title=\"Population structure, 2015\") +   theme_rgbw()}\n\n\n\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\nwcb # reusable function for creating annotation object label &lt;- function(txt) {   list(     text = txt,      x = 0.1, y = 1,     ax = 0, ay = 0,     xref = \"paper\", yref = \"paper\",      align = \"center\",     font = list(family = \"serif\", size = 15, color = \"white\"),     bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2   ) }  # reusable function for axis formatting axis &lt;- function(txt) {   list(     title = txt, tickformat = \".0%\", tickfont = list(size = 10)   ) }  ternaryAxes &lt;- list(   aaxis = axis(\"Young\"),    baxis = axis(\"Active\"),    caxis = axis(\"Old\") )  # Initiating a plotly visualization  plot_ly(   agpop_mutated,    a = ~YOUNG,    b = ~ACTIVE,    c = ~OLD,    color = I(\"black\"),    type = \"scatterternary\" ) %&gt;%   layout(     annotations = label(\"Ternary Markers\"),      ternary = ternaryAxes   )}"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#overview",
    "title": "Hands-on Exercise 9a",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 9a",
    "section": "",
    "text": "For this exercise, two main R packages will be used in this hands-on exercise, they are:\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\nWe will also need to ensure that selected tidyverse family packages namely: readr, dplyr and tidyr are also installed and loaded.\nIn this exercise, version 3.2.1 of ggplot2 will be installed instead of the latest version of ggplot2. This is because the current version of ggtern package is not compatible to the latest version of ggplot2.\nThe code chunks below will accomplish the task."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#data-preparation",
    "title": "Hands-on Exercise 9a",
    "section": "",
    "text": "For the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called respopagsex2000to2018_tidy.csv and is in csv file format.\n\n\n\nTo important respopagsex2000to2018_tidy.csv into R, read_csv() function of readr package will be used.\nwcb #Reading the data into R environment pop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")}\n\n\n\nNext, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\nwcb #Deriving the young, economy active and old measures agpop_mutated &lt;- pop_data %&gt;%   mutate(`Year` = as.character(Year))%&gt;%   spread(AG, Population) %&gt;%   mutate(YOUNG = rowSums(.[4:8]))%&gt;%   mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%   mutate(OLD = rowSums(.[17:21])) %&gt;%   mutate(TOTAL = rowSums(.[22:24])) %&gt;%   filter(Year == 2018)%&gt;%   filter(TOTAL &gt; 0)}"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#plotting-ternary-diagram-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#plotting-ternary-diagram-with-r",
    "title": "Hands-on Exercise 9a",
    "section": "",
    "text": "Use ggtern() function of ggtern package to create a simple ternary plot.\nwcb #Building the static ternary plot ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +   geom_point()}\nwcb #Building the static ternary plot ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +   geom_point() +   labs(title=\"Population structure, 2015\") +   theme_rgbw()}\n\n\n\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\nwcb # reusable function for creating annotation object label &lt;- function(txt) {   list(     text = txt,      x = 0.1, y = 1,     ax = 0, ay = 0,     xref = \"paper\", yref = \"paper\",      align = \"center\",     font = list(family = \"serif\", size = 15, color = \"white\"),     bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2   ) }  # reusable function for axis formatting axis &lt;- function(txt) {   list(     title = txt, tickformat = \".0%\", tickfont = list(size = 10)   ) }  ternaryAxes &lt;- list(   aaxis = axis(\"Young\"),    baxis = axis(\"Active\"),    caxis = axis(\"Old\") )  # Initiating a plotly visualization  plot_ly(   agpop_mutated,    a = ~YOUNG,    b = ~ACTIVE,    c = ~OLD,    color = I(\"black\"),    type = \"scatterternary\" ) %&gt;%   layout(     annotations = label(\"Ternary Markers\"),      ternary = ternaryAxes   )}"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html",
    "title": "Hands-on Exercise 9c",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data.\n\n\n\nBefore you get started, you are required to open a new Quarto document. Keep the default html as the authoring format.\nNext, you will use the code chunk below to install and launch seriation, heatmaply, dendextend and tidyverse in RStudio.\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\n\n\nIn this hands-on exercise, the data of World Happines 2018 report will be used. The data set is downloaded from here. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\n\n\nIn the code chunk below, read_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\nThe output tibbled data frame is called wh.\n\n\n\nNext, we need to change the rows by country name instead of row number by using the code chunk below.\n\nrow.names(wh) &lt;- wh$Country\n\nNotice that the row number has been replaced into the country name.\n\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)\n\nNotice that wh_matrix is in R matrix format.\n\n\n\n\nThere are many R packages and functions can be used to drawing static heatmaps, they are:\n\nheatmap()of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here.\n\nIn this section, you will learn how to plot static heatmaps by using heatmap() of R Stats package.\n\n\nIn this sub-section, we will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\nNote:\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\nNote:\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\nThe code chunk below normalises the matrix column-wise.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively.\n\n\n\n\nheatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\nBefore we get started, you should review the Introduction to Heatmaply to have an overall understanding of the features and functions of Heatmaply package. You are also required to have the user manualof the package handy with you for reference purposes.\nIn this section, you will gain hands-on experience on using heatmaply to design an interactive cluster heatmap. We will still use the wh_matrix as the input data.\n\n\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\nNote that:\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.\n\n\n\n\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\n\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\n\n\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\n\n\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\n\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\n\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\n\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#overview",
    "title": "Hands-on Exercise 9c",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 9c",
    "section": "",
    "text": "Before you get started, you are required to open a new Quarto document. Keep the default html as the authoring format.\nNext, you will use the code chunk below to install and launch seriation, heatmaply, dendextend and tidyverse in RStudio.\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#importing-and-preparing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#importing-and-preparing-the-data-set",
    "title": "Hands-on Exercise 9c",
    "section": "",
    "text": "In this hands-on exercise, the data of World Happines 2018 report will be used. The data set is downloaded from here. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\n\n\nIn the code chunk below, read_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\nThe output tibbled data frame is called wh.\n\n\n\nNext, we need to change the rows by country name instead of row number by using the code chunk below.\n\nrow.names(wh) &lt;- wh$Country\n\nNotice that the row number has been replaced into the country name.\n\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)\n\nNotice that wh_matrix is in R matrix format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#static-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#static-heatmap",
    "title": "Hands-on Exercise 9c",
    "section": "",
    "text": "There are many R packages and functions can be used to drawing static heatmaps, they are:\n\nheatmap()of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here.\n\nIn this section, you will learn how to plot static heatmaps by using heatmap() of R Stats package.\n\n\nIn this sub-section, we will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\nNote:\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\nNote:\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\nThe code chunk below normalises the matrix column-wise.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#creating-interactive-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09c.html#creating-interactive-heatmap",
    "title": "Hands-on Exercise 9c",
    "section": "",
    "text": "heatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\nBefore we get started, you should review the Introduction to Heatmaply to have an overall understanding of the features and functions of Heatmaply package. You are also required to have the user manualof the package handy with you for reference purposes.\nIn this section, you will gain hands-on experience on using heatmaply to design an interactive cluster heatmap. We will still use the wh_matrix as the input data.\n\n\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\nNote that:\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.\n\n\n\n\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\n\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\n\n\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\n\n\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\n\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\n\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\n\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html",
    "title": "Hands-on Exercise 9e",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, you will learn how to plot static treemap by using treemap package. In the third section, you will learn how to design interactive treemap by using d3treeR package.\n\n\n\nBefore we get started, you are required to check if treemap and tidyverse pacakges have been installed in you R.\n\npacman::p_load(treemap, treemapify, tidyverse) \n\n\n\n\nIn this exercise, REALIS2018.csv data will be used. This dataset provides information of private property transaction records in 2018. The dataset is extracted from REALIS portal (https://spring.ura.gov.sg/lad/ore/login/index.cfm) of Urban Redevelopment Authority (URA).\n\n\nIn the code chunk below, read_csv() of readr is used to import realis2018.csv into R and parsed it into tibble R data.frame format.\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\nThe output tibble data.frame is called realis2018.\n\n\n\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\n\n\n\n\n\nRecommendation\n\n\n\nStudents who are new to dplyr methods should consult Introduction to dplyr before moving on to the next section.\n\n\n\n\n\nThe code chank below shows a typical two lines code approach to perform the steps.\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\nNote\n\n\n\n\nAggregation functions such as sum() and median() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\n\n\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%:\n\n\n\n\n\n\nRecommendation\n\n\n\nTo learn more about pipe, visit this excellent article: Pipes in R Tutorial For Beginners.\n\n\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\ntreemap package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\n\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\n\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the three arguments used:\n\n\n\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\nvColor\n\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\n\n\n\n\n\nIn the code chunk below, type argument is define as value.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n\n\n\n\n\n\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n\n\nThe code chunk below shows a value type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nAlthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\n\n\n\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\n\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n\n\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\ntreemapify is a R package specially developed to draw treemaps in ggplot2. In this section, you will learn how to designing treemps closely resemble treemaps designing in previous section by using treemapify. Before you getting started, you should read Introduction to “treemapify” its user guide.\n\n\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nGroup by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nGroup by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis slide shows you how to install a R package which is not available in cran.\n\nIf this is the first time you install a package from github, you should install devtools package by using the code below or else you can skip this step.\n\n\n#install.packages(\"devtools\")\n\n\nNext, you will load the devtools library and install the package found in github by using the codes below.\n\n\nlibrary(devtools)\ninstall_github(\"https://github.com/d3treeR/d3treeR\")\n\n\nNow you are ready to launch d3treeR package\n\n\nlibrary(d3treeR)\n\n\n\n\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#overview",
    "title": "Hands-on Exercise 9e",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, you will learn how to plot static treemap by using treemap package. In the third section, you will learn how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 9e",
    "section": "",
    "text": "Before we get started, you are required to check if treemap and tidyverse pacakges have been installed in you R.\n\npacman::p_load(treemap, treemapify, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#data-wrangling",
    "title": "Hands-on Exercise 9e",
    "section": "",
    "text": "In this exercise, REALIS2018.csv data will be used. This dataset provides information of private property transaction records in 2018. The dataset is extracted from REALIS portal (https://spring.ura.gov.sg/lad/ore/login/index.cfm) of Urban Redevelopment Authority (URA).\n\n\nIn the code chunk below, read_csv() of readr is used to import realis2018.csv into R and parsed it into tibble R data.frame format.\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\nThe output tibble data.frame is called realis2018.\n\n\n\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\n\n\n\n\n\nRecommendation\n\n\n\nStudents who are new to dplyr methods should consult Introduction to dplyr before moving on to the next section.\n\n\n\n\n\nThe code chank below shows a typical two lines code approach to perform the steps.\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\nNote\n\n\n\n\nAggregation functions such as sum() and median() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\n\n\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%:\n\n\n\n\n\n\nRecommendation\n\n\n\nTo learn more about pipe, visit this excellent article: Pipes in R Tutorial For Beginners.\n\n\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#designing-treemap-with-treemap-package",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#designing-treemap-with-treemap-package",
    "title": "Hands-on Exercise 9e",
    "section": "",
    "text": "treemap package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\n\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\n\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the three arguments used:\n\n\n\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\nvColor\n\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\n\n\n\n\n\nIn the code chunk below, type argument is define as value.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n\n\n\n\n\n\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n\n\nThe code chunk below shows a value type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nAlthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\n\n\n\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\n\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n\n\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#designing-treemap-using-treemapify-package",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#designing-treemap-using-treemapify-package",
    "title": "Hands-on Exercise 9e",
    "section": "",
    "text": "treemapify is a R package specially developed to draw treemaps in ggplot2. In this section, you will learn how to designing treemps closely resemble treemaps designing in previous section by using treemapify. Before you getting started, you should read Introduction to “treemapify” its user guide.\n\n\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nGroup by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nGroup by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#designing-interactive-treemap-using-d3treer",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09e.html#designing-interactive-treemap-using-d3treer",
    "title": "Hands-on Exercise 9e",
    "section": "",
    "text": "This slide shows you how to install a R package which is not available in cran.\n\nIf this is the first time you install a package from github, you should install devtools package by using the code below or else you can skip this step.\n\n\n#install.packages(\"devtools\")\n\n\nNext, you will load the devtools library and install the package found in github by using the codes below.\n\n\nlibrary(devtools)\ninstall_github(\"https://github.com/d3treeR/d3treeR\")\n\n\nNow you are ready to launch d3treeR package\n\n\nlibrary(d3treeR)\n\n\n\n\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex01/In-Class_Ex01.html",
    "href": "In-class_Ex/In-Class_Ex01/In-Class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load tidyverse family of packages.\n\npacman::p_load(tidyverse)\n\n\nrealis &lt;- read_csv(\"data/realis2019.csv\")\n\n\nggplot(data = realis,\n       aes(x = `Unit Price ($ psm)`)) +\n  geom_histogram()"
  },
  {
    "objectID": "In-class_Ex/In-Class_Ex01/In-Class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-Class_Ex01/In-Class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load tidyverse family of packages.\n\npacman::p_load(tidyverse)\n\n\nrealis &lt;- read_csv(\"data/realis2019.csv\")\n\n\nggplot(data = realis,\n       aes(x = `Unit Price ($ psm)`)) +\n  geom_histogram()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#loading-r-packages",
    "title": "In-class Exercise 3",
    "section": "Loading R packages",
    "text": "Loading R packages\n\npacman::p_load(tidyverse, ggdist, ggridges,\n               colorspace, ggthemes)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#visualising-distribution",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#visualising-distribution",
    "title": "In-class Exercise 3",
    "section": "Visualising Distribution",
    "text": "Visualising Distribution"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#histogram",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#histogram",
    "title": "In-class Exercise 3",
    "section": "Histogram",
    "text": "Histogram"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#visualising-distribution-1",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#visualising-distribution-1",
    "title": "In-class Exercise 3",
    "section": "Visualising Distribution",
    "text": "Visualising Distribution"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#probability-density-plot",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#probability-density-plot",
    "title": "In-class Exercise 3",
    "section": "Probability density plot",
    "text": "Probability density plot\n\nThe taskThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df,\n       aes(x = ENGLISH)) +\n  geom_density(\n    color = \"#1696d2\",\n    adjust = .65,\n    alpha = .6\n  )\n\n\n\n\nmedian_eng &lt;- median(exam_df\\(ENGLISH) mean_eng &lt;- mean(exam_df\\)ENGLISH) std_eng &lt;_ sd(exam_df$ENGLISH)\nggplot(exam_df, aes(x = ENGLISH)) geom_density( color = “#1696d2”, adjust = .65, alpha = .6) + stat_function( fun = dnorm, args = list(mean = mean_eng, sd = std_eng), col = “grey30”, size = 0.8) + geom_vline( aes(xintercept = mean_eng), colour=“4d5887”, linewidth = 0.6, linetype = “dashed”) + annotate(geom = “text”, x = mean_eng - 8 y = 0.04, label = paste0(“Mean ENGLISH:”, round((mean_eng), 2)), ) ) )"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05a.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05a.html#loading-r-packages",
    "title": "In-class_Ex05a",
    "section": "Loading R packages",
    "text": "Loading R packages\n\npacman::p_load(tidyverse, readtext,\n               quanteda, tidytext) \n\n\ntext_data &lt;- readtext(\"data/articles/*\")\n\n\ncorpus_text &lt;-  corpus(text_data) \nsummary(corpus_text, 5)\n\nCorpus consisting of 338 documents, showing 5 documents:\n\n                                   Text Types Tokens Sentences\n Alvarez PLC__0__0__Haacklee Herald.txt   206    433        18\n    Alvarez PLC__0__0__Lomark Daily.txt   102    170        12\n   Alvarez PLC__0__0__The News Buoy.txt    90    200         9\n Alvarez PLC__0__1__Haacklee Herald.txt    96    187         8\n    Alvarez PLC__0__1__Lomark Daily.txt   241    504        21\n\n\n\nusenet_words &lt;- text_data %&gt;%\n  unnest_tokens(word, text) %&gt;%\n  filter(str_detect(word, \"[a-z']$\"),\n  !word %in% stop_words$word)\n\n\nusenet_words %&gt;%\n  count(word, sort = TRUE)\n\nreadtext object consisting of 3260 documents and 0 docvars.\n# A data frame: 3,260 × 3\n  word             n text     \n  &lt;chr&gt;        &lt;int&gt; &lt;chr&gt;    \n1 fishing       2177 \"\\\"\\\"...\"\n2 sustainable   1525 \"\\\"\\\"...\"\n3 company       1036 \"\\\"\\\"...\"\n4 practices      838 \"\\\"\\\"...\"\n5 industry       715 \"\\\"\\\"...\"\n6 transactions   696 \"\\\"\\\"...\"\n# ℹ 3,254 more rows\n\n\n\ntext_data_splitted &lt;- text_data %&gt;%\n  separate_wider_delim(\"doc_id\",\n                       delim = \"__0__\",\n                       names = c(\"X\", \"Y\"),\n                       too_few = \"align_end\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06a.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06a.html#loading-r-packages",
    "title": "In-class_Ex06a",
    "section": "Loading R packages",
    "text": "Loading R packages\n\npacman::p_load(tidyverse, corporaexplorer, quanteda, stringi, rvest) \n\n\nbible &lt;- readr::read_lines(\"http://www.gutenberg.org/cache/epub/10/pg10.txt\")\n\n\n#collapsing into one string\nbible &lt;- paste(bible, collapse = \"\\n\")\n\n\n# Identifying the beginning and end of the Bible / stripping PJ metadata\n # (technique borrowed from https://quanteda.io/articles/pkgdown/replication/digital-humanities.html).\nstart_v &lt;- stri_locate_first_fixed(bible, \"The First Book of Moses: Called Genesis\")[1]\nend_v &lt;- stri_locate_last_fixed(bible, \"Amen.\")[2]\nbible &lt;- stri_sub(bible, start_v, end_v)\n\n\n# In the file, every book in the bible is preceded by five newlines,\n  # which we use to split our string into a vector where each element is a book.\nbooks &lt;- stri_split_regex(bible, \"\\n{5}\") %&gt;%\n    unlist %&gt;%\n    .[-40]  # Removing the heading \"The New Testament of the King James Bible\",\n              # which also was preceded by five newlines.\n\n\n# Because of the structure of the text in the file:\n  # Replacing double or more newlines with two newlines, and a single newline with space.\nbooks &lt;- str_replace_all(books, \"\\n{2,}\", \"NEW_PARAGRAPH\") %&gt;%\n    str_replace_all(\"\\n\", \" \") %&gt;%\n    str_replace_all(\"NEW_PARAGRAPH\", \"\\n\\n\")\nbooks &lt;- books[3:68]  # The two first elements are not books\n\n\n# Identifying new chapters within each book and split the text into chapters.\n# (The first characters in chapter 2 will e.g. be 2:1)\nchapters &lt;- str_replace_all(books, \"(\\\\d+:1 )\", \"NEW_CHAPTER\\\\1\") %&gt;%\n    stri_split_regex(\"NEW_CHAPTER\")\n\n\n# Removing the chapter headings from the text (we want them as metadata).\nchapters &lt;- lapply(chapters, function(x) x[-1])\n\n\n# We are not quite happy with the long book titles in the King James Bible,\n  # so we retrieve shorter versions from esv.org which will take up less\n  # space in the corpus map plot.\nbook_titles &lt;- read_html(\"https://www.esv.org/resources/esv-global-study-bible/list-of-abbreviations\") %&gt;%\n  html_nodes(\"td:nth-child(1)\") %&gt;%\n  html_text() %&gt;%\n  .[13:78]  # Removing irrelevant elements after manual inspection.\n\n\n# We add a column indicating whether a book belongs to the Old or New Testament,\n#   knowing that they contain respectively 39 and 27 books.\ntestament &lt;- c(rep(\"Old\", 39), rep(\"New\", 27))\n\n\n# Data frame with one book as one row.\nbible_df &lt;- tibble::tibble(Text = chapters,\n                           Book = book_titles,\n                           Testament = testament)\n\n# We want each chapter to be one row, but keep the metadata (book and which testament).\nbible_df &lt;- tidyr::unnest(bible_df, Text)\n\n\n# As this is a corpus which is not organised by date,\n  # we set `date_based_corpus` to `FALSE`.\n# Because we want to organise our exploration around the books in the Bible,\n  # we pass `\"Book\"` to the `grouping_variable` argument.\n# We specify which metadata columns we want to be displayed in the\n  # \"Document information\" tab, using the `columns_doc_info` argument.\nKJB &lt;- prepare_data(dataset = bible_df,\n                    date_based_corpus = FALSE,\n                    grouping_variable = \"Book\",\n                    columns_doc_info = c(\"Testament\", \"Book\"))\n\n\nclass(KJB)\n\n[1] \"corporaexplorerobject\"\n\n\n\nexplore(KJB)\n\nShiny applications not supported in static R Markdown documents"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html",
    "title": "In-class_Ex09",
    "section": "",
    "text": "pacman::p_load(scatterPlotMatrix,\n               parallelPlot, cluster, factoextra,\n               tidyverse)\n\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\n\nggplot(data = wine,\n       aes(x = type)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nwhitewine &lt;- wine %&gt;%\n  filter(type == \"white\") %&gt;%\n  select(c(1:11))\n\n\nscatterPlotMatrix(whitewine,\n                  corrPlotType = \"Text\",\n                  distribType = 1,\n                  rotateTitle = TRUE,\n                  width = 1000,\n                  height = 1000)\n\n\n\n\n\n\nset.seed(1234)\ngap_stat &lt;- clusGap(whitewine,\n                    FUN = kmeans,\n                    nstart = 25,\n                    K.max = 8,\n                    B = 50)\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = whitewine, FUNcluster = kmeans, K.max = 8, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..8; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 4\n         logW   E.logW      gap      SE.sim\n[1,] 11.10732 12.39508 1.287761 0.004179654\n[2,] 10.66044 11.96489 1.304448 0.004430951\n[3,] 10.45646 11.79647 1.340018 0.004159366\n[4,] 10.31450 11.69596 1.381456 0.004007562\n[5,] 10.23143 11.59684 1.365408 0.003900456\n[6,] 10.15899 11.50135 1.342360 0.004266582\n[7,] 10.09952 11.42700 1.327488 0.003842396\n[8,] 10.06017 11.36623 1.306064 0.003989220\n\n\n\nset.seed(123)\nkmeans4 &lt;-  kmeans(whitewine, 4, nstart = 25)\nprint(kmeans4)\n\nK-means clustering with 4 clusters of sizes 757, 978, 1444, 1719\n\nCluster means:\n  fixed acidity volatile acidity citric acid residual sugar  chlorides\n1      6.981506        0.2965786   0.3563540       9.705878 0.05227081\n2      6.805112        0.2759356   0.3168814       3.607822 0.04012781\n3      6.908172        0.2776939   0.3455402       7.780852 0.04919668\n4      6.782403        0.2719372   0.3247469       5.348342 0.04324549\n  free sulfur dioxide total sulfur dioxide   density       pH sulphates\n1            52.83421             206.8164 0.9965522 3.176975 0.5179392\n2            20.52761              83.1411 0.9919192 3.175256 0.4707566\n3            42.31129             160.3061 0.9951215 3.193996 0.4940651\n4            30.11635             121.1963 0.9931958 3.195829 0.4847935\n    alcohol\n1  9.611471\n2 11.233930\n3 10.120392\n4 10.833256\n\nClustering vector:\n   [1] 3 4 2 1 1 2 4 3 4 4 2 4 2 3 3 4 2 2 3 4 2 2 4 3 4 1 3 4 4 4 4 2 2 4 3 4 3\n  [38] 4 3 3 3 3 3 3 3 3 1 1 3 3 3 4 2 4 4 1 1 3 2 4 4 3 3 2 4 4 4 3 2 4 1 1 1 2\n  [75] 2 4 2 2 4 4 4 3 3 1 3 3 3 1 3 3 3 1 4 4 3 1 3 2 2 3 1 3 3 3 1 4 3 3 3 1 3\n [112] 1 1 3 3 2 4 2 1 1 2 4 4 4 3 3 4 1 3 3 2 1 1 1 1 3 4 3 2 2 2 3 4 2 2 4 3 2\n [149] 2 4 3 3 4 2 2 1 1 4 4 4 4 3 2 1 1 3 1 2 3 4 4 2 2 4 3 3 2 3 4 3 3 1 3 1 1\n [186] 1 3 4 4 1 1 3 4 4 1 1 1 1 1 1 1 1 1 4 4 3 4 4 2 3 2 4 4 4 4 3 3 3 3 3 3 3\n [223] 4 3 4 3 1 1 1 3 4 1 1 1 1 1 1 1 4 3 1 2 2 1 3 1 4 2 2 4 1 1 3 4 3 3 2 2 4\n [260] 2 4 3 2 1 3 3 3 3 3 3 3 3 3 4 1 3 3 2 2 4 4 4 1 1 1 3 1 1 1 1 1 3 1 3 3 3\n [297] 3 1 3 4 2 2 2 3 3 3 3 3 4 3 2 3 3 3 3 4 4 4 4 2 2 4 4 4 1 1 1 3 1 2 4 4 2\n [334] 4 2 2 4 3 4 3 3 4 4 3 3 4 2 3 4 3 3 4 4 4 1 1 1 3 3 3 3 2 4 1 2 4 3 3 3 2\n [371] 3 3 1 3 2 2 4 2 3 4 2 3 3 3 4 2 4 1 4 1 1 2 4 2 3 3 2 4 3 2 4 3 4 1 3 3 4\n [408] 4 4 2 3 3 2 2 3 3 2 1 2 4 4 1 1 1 3 1 1 1 2 1 1 2 1 3 4 2 1 1 1 4 2 4 4 1\n [445] 3 2 3 4 4 4 3 4 3 4 4 4 2 4 1 1 4 3 3 2 3 4 3 2 3 1 3 1 2 4 4 1 4 4 3 3 3\n [482] 4 4 3 1 4 4 2 3 3 2 2 3 3 4 3 1 3 3 1 1 3 1 1 3 3 4 3 3 3 3 3 4 2 4 3 3 3\n [519] 2 2 4 4 2 2 2 4 2 4 4 4 4 3 3 3 3 3 3 3 2 1 3 1 3 3 3 3 3 2 4 1 3 2 4 3 4\n [556] 2 3 4 3 3 3 4 3 4 3 2 2 3 3 3 1 4 3 3 4 1 1 3 4 4 1 4 3 2 4 2 3 4 4 4 4 4\n [593] 3 4 4 4 3 4 4 2 3 4 4 4 4 4 3 3 3 2 4 2 4 4 4 4 2 1 1 4 1 3 4 2 4 4 3 1 1\n [630] 2 3 3 4 1 3 4 4 3 1 1 4 1 1 3 3 3 3 3 1 1 1 1 1 4 3 4 2 4 1 1 2 4 3 2 3 4\n [667] 1 3 3 1 1 2 3 4 1 1 1 2 2 2 3 3 3 3 3 1 4 1 1 4 4 1 1 3 1 1 2 1 1 1 1 4 2\n [704] 4 4 2 1 3 4 2 3 4 4 1 1 3 1 3 3 4 3 3 4 2 4 4 4 2 3 3 4 1 2 3 1 4 3 1 3 4\n [741] 2 2 4 3 3 4 1 3 3 3 3 3 3 1 4 4 3 3 3 4 3 3 1 4 3 4 1 2 4 4 4 3 3 3 4 4 2\n [778] 1 3 3 2 1 3 3 1 4 4 4 4 4 4 2 3 2 3 3 1 3 4 2 3 1 1 3 4 3 1 1 1 1 1 4 3 3\n [815] 1 4 2 4 4 4 2 1 4 4 2 3 3 4 2 2 4 3 4 2 4 4 3 3 3 4 4 3 3 4 4 4 3 2 3 4 4\n [852] 3 4 3 4 4 3 3 3 3 4 1 3 4 3 4 4 3 3 2 3 3 4 2 2 4 4 4 4 4 4 4 4 4 1 4 3 2\n [889] 3 2 3 4 4 4 4 2 1 2 2 1 3 4 1 1 3 2 2 4 3 1 4 4 4 2 2 2 4 4 4 4 3 3 3 1 3\n [926] 2 2 3 3 4 2 1 1 1 1 1 2 4 1 1 1 1 2 4 4 4 1 3 2 2 4 4 2 4 4 4 4 2 2 3 3 4\n [963] 3 4 3 2 1 3 2 2 2 4 3 2 4 4 4 1 3 2 2 3 2 2 3 4 3 3 3 4 3 2 1 2 3 3 2 3 3\n[1000] 3 2 1 1 4 3 2 3 2 1 3 4 3 2 1 3 4 4 4 3 1 4 4 1 3 3 4 3 2 4 1 3 1 1 1 1 3\n[1037] 2 2 4 2 4 2 4 1 2 2 4 2 2 4 3 4 2 4 2 4 4 1 4 3 4 1 1 1 3 4 3 4 2 3 3 4 4\n[1074] 1 3 4 3 4 1 1 4 3 3 1 4 3 4 4 1 4 1 3 3 4 1 2 3 4 4 4 3 4 3 4 3 1 4 2 2 3\n[1111] 2 2 3 2 2 2 2 1 2 4 4 4 2 4 4 3 3 2 2 4 3 4 3 4 4 3 3 3 4 2 2 3 4 4 4 1 3\n[1148] 3 4 1 1 1 2 2 3 3 4 4 1 4 3 4 3 1 2 4 2 4 2 3 4 4 4 4 1 3 1 3 3 4 4 4 4 4\n[1185] 4 1 3 4 3 2 4 4 4 4 1 3 4 4 4 2 2 2 1 2 2 1 3 1 4 4 2 3 3 2 2 3 2 1 4 2 1\n[1222] 4 4 3 4 2 4 4 4 2 1 4 2 4 3 1 2 4 4 3 3 3 3 4 4 1 3 2 2 1 3 3 3 3 3 4 3 1\n[1259] 1 1 1 3 3 1 2 3 4 3 4 1 3 4 3 4 1 4 3 4 4 3 4 3 3 3 3 4 3 4 4 2 2 1 2 2 2\n[1296] 1 4 4 3 3 3 3 1 3 1 4 4 4 4 2 3 4 3 3 3 3 1 3 2 1 4 4 3 3 3 4 3 3 2 4 4 4\n[1333] 1 3 4 1 3 1 1 4 4 3 4 3 3 4 3 3 3 2 4 4 1 1 3 3 1 3 4 4 3 1 4 2 3 4 2 4 1\n[1370] 1 4 3 3 3 4 4 4 4 4 4 3 2 2 2 4 4 4 2 4 1 4 2 2 2 4 2 4 1 1 2 1 1 4 4 2 4\n[1407] 2 2 1 4 2 2 3 4 4 2 4 1 4 4 4 2 4 1 4 4 4 3 2 2 4 2 2 2 3 2 1 2 1 1 3 4 4\n[1444] 4 3 4 2 3 3 3 3 4 3 3 1 3 2 4 3 4 4 3 3 4 3 3 3 2 2 4 3 3 2 4 2 3 3 2 3 4\n[1481] 3 4 1 2 4 4 2 3 1 1 4 2 1 3 1 1 2 4 2 3 4 3 4 4 4 4 1 3 3 4 4 4 4 3 4 4 3\n[1518] 3 2 3 3 4 3 3 3 3 3 1 3 3 3 3 1 4 3 4 2 3 4 4 3 2 4 2 2 3 3 3 4 4 3 4 3 3\n[1555] 3 3 3 3 4 2 3 4 4 3 4 4 3 4 1 3 3 1 3 4 4 1 2 4 3 1 4 2 4 3 1 3 3 1 3 4 3\n[1592] 3 4 2 4 1 4 1 4 2 4 1 2 2 4 4 4 4 1 1 4 2 2 4 4 3 1 4 1 4 2 4 3 4 4 3 1 4\n[1629] 4 2 4 4 4 4 1 4 3 3 1 4 3 3 4 3 4 3 3 2 2 3 4 1 4 3 3 4 2 3 1 1 1 1 4 3 3\n[1666] 4 2 4 2 4 3 2 3 3 1 1 2 3 3 4 1 1 1 1 1 1 3 1 1 4 3 1 1 1 3 4 1 1 1 3 4 1\n[1703] 4 3 3 4 3 3 3 3 2 4 3 4 4 3 4 4 3 2 3 1 3 3 4 3 2 1 4 4 4 1 4 4 1 3 2 1 2\n[1740] 2 3 3 3 3 4 1 2 3 2 4 3 3 1 3 2 3 1 1 2 1 1 4 2 4 1 1 1 3 3 4 3 3 3 3 2 4\n[1777] 3 3 3 3 3 1 3 2 4 3 4 3 4 1 3 4 3 1 4 3 4 4 3 3 1 2 3 3 1 4 4 1 4 1 3 4 2\n[1814] 4 2 3 4 4 2 4 3 4 2 1 3 2 3 1 1 3 3 3 3 3 3 1 4 4 1 4 3 4 1 4 2 3 3 3 1 1\n[1851] 3 2 4 4 3 1 3 3 3 1 3 1 4 1 4 4 1 4 3 3 3 3 3 3 3 3 3 2 1 2 1 2 1 1 4 2 4\n[1888] 3 1 4 1 1 3 3 3 1 3 3 2 4 3 4 3 4 1 3 4 3 2 4 3 2 4 3 4 2 3 2 3 1 3 4 4 2\n[1925] 2 2 2 3 1 3 1 1 2 3 2 3 1 3 2 3 1 3 1 1 1 3 3 1 4 3 1 3 4 3 1 3 2 2 1 2 2\n[1962] 4 2 1 3 3 4 1 3 3 4 3 4 4 4 1 1 3 4 1 1 1 1 1 1 3 3 3 1 4 4 1 2 3 3 3 3 3\n[1999] 3 1 3 3 3 3 3 3 3 2 3 2 2 3 3 4 2 2 4 2 4 4 3 3 1 3 1 3 2 3 3 1 4 3 2 1 4\n[2036] 2 3 3 4 2 1 4 4 4 4 2 4 3 3 3 4 3 3 2 2 3 3 3 1 3 1 2 4 4 3 4 4 3 4 4 3 4\n[2073] 3 1 3 4 4 1 4 4 4 2 4 4 3 3 2 3 4 3 3 3 2 4 4 3 4 3 3 3 3 2 1 4 3 4 1 3 3\n[2110] 1 3 3 3 2 1 3 2 4 4 4 3 4 3 3 4 3 3 1 3 4 4 3 3 3 4 1 4 1 2 2 4 4 3 2 3 3\n[2147] 4 4 2 2 4 4 2 2 1 3 2 2 4 2 4 2 4 2 4 3 3 1 1 1 1 1 4 3 1 1 4 4 3 4 3 4 3\n[2184] 3 4 2 2 4 2 4 4 3 3 4 2 4 2 2 1 1 3 3 1 3 3 3 4 4 4 4 3 4 4 4 4 3 2 4 3 4\n[2221] 4 3 3 3 3 3 3 3 4 3 4 3 2 3 2 4 1 3 3 4 3 1 3 3 1 4 3 3 2 1 1 4 3 1 3 4 4\n[2258] 4 1 4 1 4 2 3 3 3 3 3 3 3 4 3 4 2 4 3 1 2 1 3 2 2 1 1 1 1 3 3 1 2 4 3 1 2\n[2295] 4 3 3 1 4 4 4 4 1 4 3 3 4 3 4 4 3 4 4 2 4 3 4 3 3 2 4 3 4 3 1 4 4 4 4 3 1\n[2332] 3 1 4 1 4 1 3 3 2 3 3 2 3 2 1 3 2 4 3 1 1 4 2 2 4 4 2 1 4 4 2 3 3 1 4 1 1\n[2369] 3 3 4 1 2 2 1 3 1 2 1 1 1 3 4 2 4 3 3 3 2 2 4 3 4 4 1 1 1 2 2 2 2 4 1 4 4\n[2406] 1 2 4 1 4 1 1 1 4 1 4 1 1 2 1 4 1 1 4 1 4 3 1 3 1 1 3 1 1 1 4 3 3 3 4 3 3\n[2443] 1 1 1 1 1 4 4 1 3 3 4 4 1 1 3 3 1 3 3 2 2 3 4 3 3 4 2 4 3 3 2 4 2 4 3 2 1\n[2480] 4 4 1 1 1 1 1 4 4 4 3 4 1 3 4 4 3 2 4 4 3 4 1 4 4 3 1 1 4 3 4 1 1 2 4 3 2\n[2517] 3 1 2 1 3 4 3 3 3 3 4 4 4 3 3 3 3 3 2 3 4 4 4 4 3 3 3 4 4 3 3 4 1 1 4 1 4\n[2554] 3 3 3 3 3 3 4 2 4 2 4 3 1 2 4 1 4 4 2 2 3 3 1 1 1 4 4 3 3 3 3 3 3 3 2 3 3\n[2591] 4 3 3 3 4 3 1 4 1 1 4 1 4 4 4 2 3 1 1 2 3 1 4 4 2 4 4 4 4 3 3 4 4 4 2 3 4\n[2628] 4 1 1 4 4 1 3 1 2 3 1 4 2 2 3 2 3 3 4 2 4 3 3 3 3 2 3 1 1 1 4 3 2 3 3 4 2\n[2665] 2 4 3 4 4 3 3 3 4 2 4 4 2 3 4 4 4 3 4 4 4 2 4 1 3 4 4 4 3 4 4 4 3 2 3 4 2\n[2702] 4 4 4 1 1 1 4 1 1 1 3 3 1 1 3 1 3 2 3 2 3 4 4 3 3 2 4 1 2 1 3 4 2 3 1 4 2\n[2739] 4 2 3 4 3 2 2 2 3 4 3 4 3 4 4 2 2 1 1 2 2 4 3 3 3 4 3 4 2 3 4 3 1 4 4 2 4\n[2776] 4 4 4 2 4 4 3 1 1 1 3 2 3 3 3 1 1 1 4 3 2 4 3 4 4 1 1 2 2 2 4 3 3 1 3 2 4\n[2813] 4 3 2 2 4 2 3 4 4 1 3 2 3 3 1 3 3 3 3 3 2 4 4 3 1 3 2 2 2 2 2 2 2 2 2 2 3\n[2850] 1 3 2 3 4 2 3 4 2 3 4 3 2 2 2 4 4 4 4 4 4 4 2 3 2 4 2 3 3 4 2 2 2 4 2 4 2\n[2887] 2 2 2 4 3 3 1 3 2 3 1 1 2 3 2 2 3 2 4 3 1 2 2 2 3 3 2 1 2 2 4 4 2 4 2 1 4\n[2924] 4 4 1 2 3 3 4 3 2 1 4 2 2 2 1 4 4 4 4 3 4 4 3 4 4 1 4 4 2 4 4 2 4 2 2 2 2\n[2961] 4 4 2 4 4 4 4 4 3 2 3 4 4 4 4 3 4 4 4 4 4 2 1 3 2 4 4 4 2 1 3 3 4 4 4 4 4\n[2998] 3 4 4 4 4 3 2 4 3 1 3 3 1 1 4 2 4 2 2 4 3 4 2 2 2 4 2 4 3 4 3 4 4 4 4 2 1\n[3035] 3 2 1 3 4 1 4 3 3 4 4 2 4 3 4 1 1 1 3 4 2 4 2 4 1 2 3 3 4 3 1 4 1 4 4 2 4\n[3072] 2 3 4 4 2 4 1 2 4 2 3 2 2 2 2 2 1 2 2 2 1 3 4 2 2 2 4 4 4 4 2 4 4 4 3 3 3\n[3109] 3 1 4 2 4 4 4 4 2 2 3 2 1 4 4 2 4 3 4 2 2 4 3 1 4 4 4 1 4 4 4 4 1 2 4 4 4\n[3146] 4 4 3 4 3 2 4 1 2 4 4 4 4 4 4 2 4 4 4 1 4 4 4 2 4 3 2 4 4 4 3 2 3 2 4 2 4\n[3183] 4 2 2 4 2 4 4 3 4 3 4 4 2 4 4 4 4 4 3 4 2 4 3 3 2 4 3 3 4 3 4 3 2 2 4 4 4\n[3220] 2 2 2 4 3 3 2 4 1 1 4 3 4 2 2 4 3 3 3 4 2 4 4 4 2 2 4 4 3 3 3 4 3 4 4 1 1\n[3257] 1 1 1 1 1 2 1 2 1 3 4 3 4 1 4 2 2 4 4 2 3 4 1 4 4 4 4 3 4 4 4 4 3 1 2 2 1\n[3294] 2 4 1 1 1 4 4 2 2 2 2 3 2 3 1 4 2 4 3 2 2 1 2 2 4 4 3 4 2 4 2 4 4 3 2 4 4\n[3331] 3 3 3 3 2 1 1 1 2 2 4 2 4 1 1 1 1 3 2 2 4 2 2 2 4 4 3 2 2 2 2 2 4 2 2 2 4\n[3368] 4 3 4 4 4 3 4 3 4 3 1 3 1 4 4 4 3 3 4 3 1 2 2 4 4 2 4 1 1 4 1 1 2 4 4 4 4\n[3405] 2 4 2 1 1 4 3 4 3 1 3 3 1 2 1 3 3 2 4 3 4 3 3 3 4 3 3 3 4 2 2 2 2 4 1 4 4\n[3442] 4 2 4 1 4 3 2 4 4 4 4 4 2 4 2 3 3 4 3 4 1 4 4 3 4 4 1 2 3 1 4 4 2 1 3 2 3\n[3479] 3 2 2 4 2 2 2 4 2 1 2 2 3 4 4 4 4 4 3 3 4 4 4 4 3 2 4 4 3 4 3 3 3 2 4 2 2\n[3516] 2 3 4 4 4 1 3 3 1 4 4 4 3 2 4 3 3 2 3 3 3 2 4 4 2 2 4 3 3 3 1 3 1 4 3 4 4\n[3553] 4 4 2 4 4 2 4 2 2 2 3 2 2 2 4 2 2 2 2 2 4 2 4 4 3 4 4 2 3 4 2 2 2 4 3 4 4\n[3590] 4 4 3 3 3 4 4 4 3 3 1 2 4 4 4 2 3 3 2 3 3 3 2 4 3 3 2 1 4 4 4 3 4 2 4 2 1\n[3627] 4 1 3 3 4 4 4 4 3 2 2 4 2 2 4 3 3 4 4 3 2 2 4 4 4 1 4 1 4 4 1 4 3 4 4 3 2\n[3664] 3 3 4 3 4 2 4 3 2 2 2 4 3 2 3 4 4 1 4 4 1 4 1 3 2 1 4 3 4 4 4 4 3 4 1 2 3\n[3701] 3 4 3 3 3 3 2 4 1 3 2 3 3 1 2 1 3 4 4 1 3 4 4 3 4 4 4 3 2 4 1 3 4 4 4 2 2\n[3738] 4 4 3 3 3 3 3 3 3 4 1 4 3 3 4 3 3 4 4 4 3 3 4 4 2 2 2 4 1 1 1 4 1 4 4 4 4\n[3775] 1 4 4 4 4 2 1 4 2 1 4 2 1 1 1 1 1 1 4 3 4 4 2 2 4 3 2 2 4 4 2 2 2 4 4 4 3\n[3812] 3 4 3 3 4 4 4 4 4 4 3 1 1 4 2 4 2 4 2 4 4 4 4 3 4 4 4 3 4 2 1 4 4 2 3 4 3\n[3849] 2 2 4 4 2 4 4 3 2 4 4 1 1 3 1 1 2 4 4 1 1 3 3 1 1 3 1 4 3 2 3 2 4 4 4 3 4\n[3886] 2 3 2 4 4 2 4 4 2 4 2 3 3 4 4 2 2 2 2 4 2 2 2 4 4 3 4 2 4 4 4 3 1 4 4 4 3\n[3923] 2 4 4 2 2 4 3 3 2 4 4 2 2 1 4 3 2 3 3 3 4 4 3 3 4 3 4 3 3 3 2 4 3 2 4 2 4\n[3960] 4 3 3 4 4 3 2 4 1 1 4 3 4 2 1 1 3 4 4 1 1 3 3 3 4 4 4 4 1 4 4 1 4 2 4 4 4\n[3997] 4 3 4 4 4 4 2 4 4 4 2 4 2 3 4 3 4 3 1 2 3 4 1 2 2 4 3 3 3 2 3 3 2 4 4 4 4\n[4034] 4 4 3 3 3 4 4 1 3 4 4 4 4 3 4 4 2 4 2 3 4 3 2 4 4 4 2 2 2 4 4 2 4 3 3 3 4\n[4071] 3 2 3 4 2 4 4 4 4 2 4 4 3 3 2 2 2 4 2 4 3 2 4 2 2 2 4 2 4 4 2 3 3 2 2 4 3\n[4108] 3 4 3 1 2 2 2 4 2 3 3 4 3 4 3 3 2 2 3 3 1 1 2 4 1 1 4 2 4 4 1 2 3 3 3 4 4\n[4145] 3 3 4 3 4 2 1 1 4 1 1 1 1 3 3 3 3 3 3 4 4 2 3 4 4 4 3 4 3 2 3 3 3 4 4 1 4\n[4182] 2 3 2 2 1 2 4 4 4 2 4 2 2 2 2 2 3 3 2 2 2 4 3 4 2 3 4 2 2 4 1 3 2 1 1 1 4\n[4219] 3 1 2 4 4 2 2 1 3 2 1 4 4 2 2 4 4 4 4 2 4 2 4 3 3 2 4 4 2 4 4 3 2 2 2 2 4\n[4256] 4 4 4 4 4 3 4 3 3 4 3 4 4 3 1 3 1 4 4 4 4 4 3 2 4 4 4 4 2 2 2 2 4 2 4 4 1\n[4293] 4 1 4 1 4 4 4 3 3 3 1 4 4 4 4 4 2 4 3 4 4 2 4 4 2 3 4 4 1 3 4 4 4 3 3 3 3\n[4330] 3 3 3 3 3 3 3 3 3 3 2 3 4 3 4 4 4 4 3 3 1 2 4 3 3 3 4 3 1 3 1 3 4 4 4 4 3\n[4367] 4 4 4 4 4 2 4 2 3 1 4 2 4 4 3 3 4 2 3 3 3 2 2 4 3 1 3 3 3 3 3 3 3 3 3 4 3\n[4404] 1 1 1 4 2 1 4 3 2 4 2 4 4 3 4 4 4 4 4 4 4 4 4 4 1 3 3 3 2 2 1 3 3 2 3 4 4\n[4441] 3 4 3 4 4 4 4 2 4 3 4 1 3 2 3 3 3 3 4 4 3 3 4 4 4 4 3 3 2 4 2 2 2 4 4 4 4\n[4478] 3 3 4 4 3 3 4 4 2 2 2 4 4 4 2 2 3 2 1 2 3 4 2 3 3 3 4 4 3 4 2 3 2 3 4 4 2\n[4515] 1 4 2 2 2 3 1 1 2 3 3 3 1 2 2 3 3 3 4 4 4 3 3 2 4 2 4 4 2 2 4 4 2 2 1 2 2\n[4552] 4 4 4 4 2 4 1 4 4 4 2 4 4 4 3 3 3 4 4 2 2 2 2 4 4 2 2 2 4 4 4 3 3 4 3 4 4\n[4589] 4 4 3 1 3 4 4 4 4 2 4 2 4 4 3 4 3 2 4 3 2 2 2 2 3 3 3 4 2 4 4 1 4 2 4 4 2\n[4626] 3 1 2 2 2 4 4 1 1 4 4 3 4 3 1 4 4 2 1 4 3 2 4 1 2 2 4 1 2 3 3 3 3 4 2 2 3\n[4663] 4 4 4 4 1 4 4 4 3 3 3 4 3 3 4 4 3 3 4 2 2 4 1 4 4 3 3 3 3 3 3 3 3 4 2 4 4\n[4700] 3 3 3 3 2 1 4 4 4 4 3 4 4 4 2 4 2 2 4 4 2 2 2 4 3 2 4 2 4 4 2 4 3 3 4 2 2\n[4737] 2 4 4 2 1 4 4 3 2 1 4 2 3 3 3 1 2 4 4 2 4 4 4 4 4 4 2 4 4 2 4 3 3 3 3 3 1\n[4774] 2 4 4 4 4 4 2 4 3 4 4 3 2 4 4 3 4 4 4 4 3 3 3 3 2 4 4 4 3 4 4 2 2 4 4 2 3\n[4811] 3 2 4 3 4 4 3 4 2 4 3 4 3 4 3 4 4 2 3 2 4 4 4 2 2 4 2 1 4 2 4 1 2 3 3 2 3\n[4848] 4 3 3 3 3 4 2 2 3 3 4 3 4 4 2 2 2 3 2 4 2 4 2 4 2 3 4 4 2 4 2 2 3 3 4 3 3\n[4885] 3 3 4 2 4 4 2 4 4 2 3 4 4 2\n\nWithin cluster sum of squares by cluster:\n[1] 681403.3 357903.9 579703.3 462118.7\n (between_SS / total_SS =  80.0 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n\n\n\nfviz_cluster(kmeans4, data = whitewine)\n\n\n\n\n\n\n\n\n\nwhitewine &lt;-  whitewine %&gt;%\n  mutate(Cluster = kmeans4$cluster)\n\n\nwhitewine$Cluster &lt;- \n  as_factor(whitewine$Cluster)\n\n\nwhitewine %&gt;%\n  parallelPlot(refColumnDim = \"Cluster\",\n               width = 300,\n               height = 250,\n               rotateTitle = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "There are two major residential property markets in Singapore, namely public and private housing. Public housing aims to meet the basic needs of the general public with a monthly household income of less than or equal to S$14,000. For families with a monthly household income of more than S$14,000, they need to turn to the private residential market.\n\n\n\nIn this task, I am to assume the role of a graphical editor of a median company. I have been requested to prepare a minimum of two and a maximum of three data visualisations to reveal the private residential market and its sub-markets in Singapore for the 1st quarter of 2024."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "There are two major residential property markets in Singapore, namely public and private housing. Public housing aims to meet the basic needs of the general public with a monthly household income of less than or equal to S$14,000. For families with a monthly household income of more than S$14,000, they need to turn to the private residential market."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "In this task, I am to assume the role of a graphical editor of a median company. I have been requested to prepare a minimum of two and a maximum of three data visualisations to reveal the private residential market and its sub-markets in Singapore for the 1st quarter of 2024."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-packages",
    "title": "Take-home Exercise 1",
    "section": "Loading Packages",
    "text": "Loading Packages\n\n\n\nLibrary\nDescription\n\n\n\n\npacman\nPacman is a package that makes it possible to perform tasks associated with add-on packages in a more convenient manner. It checks whether the add-on packages are installed or not. If not, it will automatically install and load them into the R environment. In this take-home exercise 1, the pacman package has been installed beforehand.\n\n\ntidyverse\nA collection of core packages designed for data science, used extensively for data preparation and wrangling. Content includes: ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, forcats, scales, lubridate, etc.\n\n\nscales\nThis package is designed to enhance how data is presented in visualisation, particularly in ggplot2 plots. It provides tools for mapping data to aesthetic attributes like colours, shapes, and sizes more effectively. It also includes functions for formatting and transforming axes and legends in a chart. Even though this is part of the tidyverse package collection, it needs to be installed and loaded separately.\n\n\nlubridate\nIt is a package to work with date-times and time-spans: fast and user-friendly parsing of date-time data, extraction and updating of components of a date-time (years, months, days, hours, minutes, and seconds), algebraic manipulation on date-time and time-span objects. This is part of the tidyverse collection, but it is not automatically loaded, so I will need to load it explicitly as I plan to use its functionality.\n\n\nggrepel\nAn R package provides geoms for ggplot2 to repel overlapping text labels. This is not part of the tidyverse package collection, but it is an extension of ggplot2.\n\n\nggthemes\nAnother separate R package that provides additional themes and scales for ggplot2 to enhance the appearance of plots. This package will also need to be installed and loaded independently.\n\n\nhrbrthemes\nThis package provides additional typography-centric themes and theme components for ggplot2, focused on improving readability and appearance for data visualisation. It must be installed and loaded independently.\n\n\npatchwork\nThis one is also an extension package for ggplot2 that allows combining multiple ggplot2 plots into one (composite figure) and arranging them in various layouts. Even though patchwork complements the functionality of ggplot2, it is independently maintained and must be installed and loaded separately.\n\n\n\nThe following code chunk utilises the p_load() function from the pacman package to ensure that the necessary packages are available in the R environment. If the packages are already installed on the computer, p_load() will load them. If they are not installed, it will first install them and then load them into the R environment.\n\npacman::p_load(tidyverse, scales,\n               lubridate, ggrepel, \n               ggthemes, hrbrthemes, \n               patchwork, knitr)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-the-data",
    "title": "Take-home Exercise 1",
    "section": "Loading The Data",
    "text": "Loading The Data\n\nThe Datasets\nThere are five datasets that cover from the start of the 1st quarter 2023 to the end of the 1st quarter 2024, I decided to load each dataset in a separate code chunk for better clarity in understanding the data types.\n\n\nQuarter 1, Year 2023:\n\nq1_2023 &lt;- read_csv(\"data/ResidentialTransaction20240308160536.csv\")\n\nRows: 4722 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nQuarter 2, Year 2023:\n\nq2_2023 &lt;- read_csv(\"data/ResidentialTransaction20240308160736.csv\")\n\nRows: 6125 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nQuarter 3, Year 2023:\n\nq3_2023 &lt;- read_csv(\"data/ResidentialTransaction20240308161009.csv\")\n\nRows: 6206 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (2): Area (SQM), Number of Units\nnum  (4): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Unit Price ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nNote\n\n\n\nAs can be seen above, I noticed that in this particular dataset (Quarter 3, Year 2023), the data type for column Area (SQM) is ‘dbl’ (double), while in all the other four datasets, the data type for column Area (SQM) is ‘num’ (numeric). As far as I know, R does not differentiate between ‘dbl’ and ‘num’, so in this case, I will leave it as ‘dbl’ data type.\n\n\n\n\nQuarter 4, Year 2023:\n\nq4_2023 &lt;- read_csv(\"data/ResidentialTransaction20240308161109.csv\")\n\nRows: 4851 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nQuarter 1, Year 2024:\n\nq1_2024 &lt;- read_csv(\"data/ResidentialTransaction20240414220633.csv\")\n\nRows: 4902 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nNote\n\n\n\nI also noticed that the Sale Date data type format in all of these five datasets is ‘chr’ (character). I will parse/convert them into date-time format."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#parsing-data-type",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#parsing-data-type",
    "title": "Take-home Exercise 1",
    "section": "Parsing Data Type",
    "text": "Parsing Data Type\nParsing the Sale Date column into date-time format using ‘lubridate’ package\n\nq1_2023 &lt;- q1_2023 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nq2_2023 &lt;- q2_2023 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nq3_2023 &lt;- q3_2023 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nq4_2023 &lt;- q4_2023 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nq1_2024 &lt;- q1_2024 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nExplanation:\n\nThe mutate() function is used to modify the Sale Date column directly.\n\nSince the column name has a space in it, I need to use backticks to refer to it within the mutate() function.\n\nThe dmy() function from the ‘lubridate’ package will parse the date strings into actual Date objects.\n\nNext, using the code below, I will check and confirm that the data types have been converted properly.\n\nclass(q1_2023$`Sale Date`)\n\n[1] \"Date\"\n\nclass(q2_2023$`Sale Date`)\n\n[1] \"Date\"\n\nclass(q3_2023$`Sale Date`)\n\n[1] \"Date\"\n\nclass(q4_2023$`Sale Date`)\n\n[1] \"Date\"\n\nclass(q1_2024$`Sale Date`)\n\n[1] \"Date\""
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#merge-the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#merge-the-data",
    "title": "Take-home Exercise 1",
    "section": "Merge the Data",
    "text": "Merge the Data\nAfter standardising the data in all five datasets, I will then merge these datasets together using the bind_rows() function from the ‘dplyr’ package. This function stacks data frames on top of each other, combining them into a single data frame. It’s important that all data frames have the same columns for bind_rows() to work correctly.\n\ncombined_data &lt;- bind_rows(q1_2023, q2_2023, q3_2023, q4_2023, q1_2024)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#inspect-the-merged-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#inspect-the-merged-data",
    "title": "Take-home Exercise 1",
    "section": "Inspect the Merged Data",
    "text": "Inspect the Merged Data\nAfter merging, it’s good practice to check the combined dataset to ensure everything looks as expected:\n\n# Check the structure of the combined data\nstr(combined_data)\n\ntibble [26,806 × 21] (S3: tbl_df/tbl/data.frame)\n $ Project Name               : chr [1:26806] \"THE REEF AT KING'S DOCK\" \"URBAN TREASURES\" \"NORTH GAIA\" \"NORTH GAIA\" ...\n $ Transacted Price ($)       : num [1:26806] 2317000 1823500 1421112 1258112 1280000 ...\n $ Area (SQFT)                : num [1:26806] 883 883 1076 1033 872 ...\n $ Unit Price ($ PSF)         : num [1:26806] 2625 2066 1320 1218 1468 ...\n $ Sale Date                  : Date[1:26806], format: \"2023-01-01\" \"2023-01-02\" ...\n $ Address                    : chr [1:26806] \"12 HARBOURFRONT AVENUE #05-32\" \"205 JALAN EUNOS #08-02\" \"29 YISHUN CLOSE #08-10\" \"45 YISHUN CLOSE #07-42\" ...\n $ Type of Sale               : chr [1:26806] \"New Sale\" \"New Sale\" \"New Sale\" \"New Sale\" ...\n $ Type of Area               : chr [1:26806] \"Strata\" \"Strata\" \"Strata\" \"Strata\" ...\n $ Area (SQM)                 : num [1:26806] 82 82 100 96 81 ...\n $ Unit Price ($ PSM)         : num [1:26806] 28256 22238 14211 13105 15802 ...\n $ Nett Price($)              : chr [1:26806] \"-\" \"-\" \"-\" \"-\" ...\n $ Property Type              : chr [1:26806] \"Condominium\" \"Condominium\" \"Executive Condominium\" \"Executive Condominium\" ...\n $ Number of Units            : num [1:26806] 1 1 1 1 1 1 1 1 1 1 ...\n $ Tenure                     : chr [1:26806] \"99 yrs from 12/01/2021\" \"Freehold\" \"99 yrs from 15/02/2021\" \"99 yrs from 15/02/2021\" ...\n $ Completion Date            : chr [1:26806] \"Uncompleted\" \"Uncompleted\" \"Uncompleted\" \"Uncompleted\" ...\n $ Purchaser Address Indicator: chr [1:26806] \"HDB\" \"Private\" \"HDB\" \"HDB\" ...\n $ Postal Code                : chr [1:26806] \"097996\" \"419535\" \"269343\" \"269294\" ...\n $ Postal District            : chr [1:26806] \"04\" \"14\" \"27\" \"27\" ...\n $ Postal Sector              : chr [1:26806] \"09\" \"41\" \"26\" \"26\" ...\n $ Planning Region            : chr [1:26806] \"Central Region\" \"East Region\" \"North Region\" \"North Region\" ...\n $ Planning Area              : chr [1:26806] \"Bukit Merah\" \"Bedok\" \"Yishun\" \"Yishun\" ...\n\n# View the first few rows to confirm data looks correct\nhead(combined_data)\n\n# A tibble: 6 × 21\n  `Project Name`       `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n  &lt;chr&gt;                                 &lt;dbl&gt;         &lt;dbl&gt;                &lt;dbl&gt;\n1 THE REEF AT KING'S …                2317000          883.                 2625\n2 URBAN TREASURES                     1823500          883.                 2066\n3 NORTH GAIA                          1421112         1076.                 1320\n4 NORTH GAIA                          1258112         1033.                 1218\n5 PARC BOTANNIA                       1280000          872.                 1468\n6 NANYANG PARK                        5870000         3323.                 1767\n# ℹ 17 more variables: `Sale Date` &lt;date&gt;, Address &lt;chr&gt;, `Type of Sale` &lt;chr&gt;,\n#   `Type of Area` &lt;chr&gt;, `Area (SQM)` &lt;dbl&gt;, `Unit Price ($ PSM)` &lt;dbl&gt;,\n#   `Nett Price($)` &lt;chr&gt;, `Property Type` &lt;chr&gt;, `Number of Units` &lt;dbl&gt;,\n#   Tenure &lt;chr&gt;, `Completion Date` &lt;chr&gt;, `Purchaser Address Indicator` &lt;chr&gt;,\n#   `Postal Code` &lt;chr&gt;, `Postal District` &lt;chr&gt;, `Postal Sector` &lt;chr&gt;,\n#   `Planning Region` &lt;chr&gt;, `Planning Area` &lt;chr&gt;\n\n# Check for any missing values or anomalies\nsummary(combined_data)\n\n Project Name       Transacted Price ($)  Area (SQFT)       Unit Price ($ PSF)\n Length:26806       Min.   :   440000    Min.   :   322.9   Min.   : 138      \n Class :character   1st Qu.:  1280000    1st Qu.:   721.2   1st Qu.:1384      \n Mode  :character   Median :  1660000    Median :   990.3   Median :1762      \n                    Mean   :  2143286    Mean   :  1191.6   Mean   :1852      \n                    3rd Qu.:  2320000    3rd Qu.:  1302.4   3rd Qu.:2260      \n                    Max.   :392180000    Max.   :144883.4   Max.   :5756      \n                                                                              \n   Sale Date            Address          Type of Sale       Type of Area      \n Min.   :2023-01-01   Length:26806       Length:26806       Length:26806      \n 1st Qu.:2023-04-29   Class :character   Class :character   Class :character  \n Median :2023-07-28   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2023-08-11                                                           \n 3rd Qu.:2023-11-20                                                           \n Max.   :2024-03-31                                                           \n                                                                              \n   Area (SQM)      Unit Price ($ PSM) Nett Price($)      Property Type     \n Min.   :   30.0   Min.   : 1484      Length:26806       Length:26806      \n 1st Qu.:   67.0   1st Qu.:14893      Class :character   Class :character  \n Median :   92.0   Median :18966      Mode  :character   Mode  :character  \n Mean   :  110.5   Mean   :19930                                           \n 3rd Qu.:  121.0   3rd Qu.:24327                                           \n Max.   :13460.0   Max.   :61962                                           \n NA's   :6                                                                 \n Number of Units     Tenure          Completion Date   \n Min.   : 1.000   Length:26806       Length:26806      \n 1st Qu.: 1.000   Class :character   Class :character  \n Median : 1.000   Mode  :character   Mode  :character  \n Mean   : 1.005                                        \n 3rd Qu.: 1.000                                        \n Max.   :60.000                                        \n                                                       \n Purchaser Address Indicator Postal Code        Postal District   \n Length:26806                Length:26806       Length:26806      \n Class :character            Class :character   Class :character  \n Mode  :character            Mode  :character   Mode  :character  \n                                                                  \n                                                                  \n                                                                  \n                                                                  \n Postal Sector      Planning Region    Planning Area     \n Length:26806       Length:26806       Length:26806      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#save-the-merged-dataset",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#save-the-merged-dataset",
    "title": "Take-home Exercise 1",
    "section": "Save the Merged Dataset",
    "text": "Save the Merged Dataset\nSince I may need to use to use this merged datasets repeatedly, I will save it into a file for easy access in future sessions. I will use write_csv() function from the ‘readr’ package (part of the ‘tidyverse’) to write this merged data frame to a CSV file.\n\nwrite_csv(combined_data, \"data/All_ResidentialTransactions_2023-2024.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#proceed-with-visualisation-and-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#proceed-with-visualisation-and-analysis",
    "title": "Take-home Exercise 1",
    "section": "Proceed with Visualisation and Analysis",
    "text": "Proceed with Visualisation and Analysis\nNow that the data has been consolidated into a single dataframe, it is time to move forward with analysis:\nAfter completing all the previous setup and loading libraries, the next step is to create the visualisations to gather insights from the data.\n\nMonthly Sales Volume Visualisation with Average Reference Line\n\n# Generate a Month-Year field for the x-axis and calculate total sales volume\nmonthly_sales_stats &lt;- combined_data %&gt;%\n  mutate(Month = floor_date(`Sale Date`, unit = \"month\")) %&gt;%\n  group_by(Month) %&gt;%\n  summarise(Total_Sales_Volume = sum(`Number of Units`, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  arrange(Month)\n\n# Calculate the average monthly sales volume\naverage_sales_volume &lt;- mean(monthly_sales_stats$Total_Sales_Volume)\n\n# Create the line chart visualizing monthly sales volume and add the average reference line\nmonthly_sales_line_chart &lt;- ggplot(monthly_sales_stats, aes(x = Month, y = Total_Sales_Volume)) +\n  geom_line(color = \"black\") +  # Line color\n  geom_point(color = \"black\") +  # Point color\n  geom_hline(yintercept = average_sales_volume, linetype = \"dotted\", color = \"red\", size = 1) +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%b %Y\") +\n  theme_minimal() +\n  labs(\n    title = \"Monthly Sales Volume with Average Reference Line\",\n    x = \"Month\",\n    y = \"Total Units Sold\"\n  ) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate the x-axis text for better readability\n\n# Print the plot\nmonthly_sales_line_chart\n\n\n\n\n\n\n\n\nThe visualisation illustrates the monthly sales volume trend for private housing units from January 2023 to March 2024. The trend exhibits significant fluctuations throughout the period, with peaks and troughs corresponding to market activities. Notably, there is a sharp increase in March 2024 as compared to February 2024, suggesting a spike in sales. Huttons Asia’s chief executive, Mark Yip, attributes this to the resumption of project launches in March following the Chinese New Year festive lull, which had a spillover effect on the resale market (Yip, 2024). The red dotted line represents the average sales volume over the period, providing a benchmark for monthly performance comparison. Months above this line experienced higher-than-average sales, while those below indicated fewer transactions, highlighting the variable buyer activity throughout the year.\nCitation: Yip, M. (2024, April 26). Condo resale prices inch up in March as volume rebounds 17.4%. The Straits Times. Retrieved from [https://www.straitstimes.com/singapore/housing/condo-resale-prices-inch-up-in-march-as-volume-rebounds-174]\n\n\nSales Distribution based on Property type in Singapore Private Residential Market\n\n# First, we aggregate the number of units sold by property type\nproperty_type_distribution &lt;- combined_data %&gt;%\n  group_by(`Property Type`) %&gt;%\n  summarise(Transactions = n(), .groups = 'drop')\n\n# Now, we plot the distribution\nproperty_type_chart &lt;- ggplot(property_type_distribution, aes(x = Transactions, y = reorder(`Property Type`, Transactions))) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\", orientation = \"y\") + # All bars in 'steelblue'\n  theme_minimal() +\n  labs(title = \"Sales Distribution based on Property Type\",\n       x = \"Number of Transactions\",\n       y = \"Property Type\") +\n  theme(axis.text.x = element_text(angle = 0, hjust = 1),\n        legend.position = \"none\") # Remove legend\n\n# Print the plot\nprint(property_type_chart)\n\n\n\n\n\n\n\n\nThe bar chart illustrates the frequency of transactions across different property types in Singapore’s private residential market. Condominiums and apartments are the most commonly traded, suggesting a high demand for such property types, which could be due to their affordability and availability. Executive condominiums and detached houses represent a smaller fraction, likely reflecting their higher price points and more exclusive market position. The varied transaction volume across property types offers valuable insight into consumer preferences and the real estate market’s dynamics, particularly indicating a trend towards high-density living options."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/data/shp/Oceanus Geography.html",
    "href": "Take-home_Ex/Take-home_Ex03/data/shp/Oceanus Geography.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  }
]