[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "There are two major residential property markets in Singapore, namely public and private housing. Public housing aims to meet the basic needs of the general public with a monthly household income of less than or equal to S$14,000. For families with a monthly household income of more than S$14,000, they need to turn to the private residential market.\n\n\n\nIn this task, I am to assume the role of a graphical editor of a median company. I have been requested to prepare a minimum of two and a maximum of three data visualisations to reveal the private residential market and its sub-markets in Singapore for the 1st quarter of 2024."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "There are two major residential property markets in Singapore, namely public and private housing. Public housing aims to meet the basic needs of the general public with a monthly household income of less than or equal to S$14,000. For families with a monthly household income of more than S$14,000, they need to turn to the private residential market."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "In this task, I am to assume the role of a graphical editor of a median company. I have been requested to prepare a minimum of two and a maximum of three data visualisations to reveal the private residential market and its sub-markets in Singapore for the 1st quarter of 2024."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "title": "Take-home Exercise 1",
    "section": "1.1 Background",
    "text": "1.1 Background"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "title": "Take-home Exercise 1",
    "section": "1.2 The Data",
    "text": "1.2 The Data"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task-1",
    "title": "Take-home Exercise 1",
    "section": "1.3 The Task",
    "text": "1.3 The Task"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load tidyverse family of packages.\n\npacman::p_load(tidyverse)\n\n\nrealis &lt;- read_csv(\"data/realis2019.csv\")\n\n\nggplot(data = realis,\n       aes(x = `Unit Price ($ psm)`)) +\n  geom_histogram()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load tidyverse family of packages.\n\npacman::p_load(tidyverse)\n\n\nrealis &lt;- read_csv(\"data/realis2019.csv\")\n\n\nggplot(data = realis,\n       aes(x = `Unit Price ($ psm)`)) +\n  geom_histogram()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.\n\n\n\n\n\nBefore we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\nThe code chunk below use p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk on the right assumes that you already have pacman package installed. If not, please go ahead install pacman first.\n\n\n\npacman::p_load(tidyverse)\n\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\n\n\n\n is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics\n\nIt is also part of the tidyverse family specially designed for visual exploration and communication.\n\n\nFor more detail, visit ggplot2 link.\n\n\n\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\n\n\n\n\n\n\nBefore we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\nWhat is a statistical graphic?\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n\n\n\n\nLet us call the ggplot() function using the code chunk on the right.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data,\naes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including: note, warning, important, tip, and caution.\n\n\n\n\n\n\n\n\nTip with Title\n\n\n\nThis is an example of a callout with a title.\n\n\n\n\n\n\n\n\nExpand To Learn About Collapse\n\n\n\n\n\nThis is an example of a ‘folded’ caution callout that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible callout that is expanded by default.\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x=RACE)) +\ngeom_bar()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x = MATHS)) +\ngeom_dotplot(dotsize = 0.5)\n\n\n\n\n\nggplot(data=exam_data,\naes(x = MATHS)) +\ngeom_dotplot(binwidth=2.5,\ndotsize = 0.5) +\nscale_y_continuous(NULL,\nbreaks = NULL)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x = MATHS)) +\ngeom_histogram()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS)) +\ngeom_histogram(bins=20,\ncolor=\"black\",\nfill=\"light blue\")\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS,\nfill = GENDER)) +\ngeom_histogram(bins=20,\ncolor=\"grey30\")\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x = MATHS)) +\ngeom_density()\n\n\n\n\n\nggplot(data=exam_data,\naes(x = MATHS,\ncolour = GENDER)) +\ngeom_density()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(y = MATHS,\nx= GENDER)) +\ngeom_boxplot()\n\n\n\n\n\nggplot(data=exam_data,\naes(y = MATHS,\nx= GENDER)) +\ngeom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(y = MATHS,\nx= GENDER)) +\ngeom_violin()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS,\ny=ENGLISH)) +\ngeom_point()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(y = MATHS,\nx= GENDER)) +\ngeom_boxplot() +\ngeom_point(position=\"jitter\",\nsize = 0.5)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(y = MATHS, x= GENDER)) +\ngeom_boxplot()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(y = MATHS, x= GENDER)) +\ngeom_boxplot() +\nstat_summary(geom = \"point\",\nfun.y=\"mean\",\ncolour =\"red\",\nsize=4)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(y = MATHS, x= GENDER)) +\ngeom_boxplot() +\ngeom_point(stat=\"summary\",\nfun.y=\"mean\",\ncolour =\"red\",\nsize=4)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS, y=ENGLISH)) +\ngeom_point() +\ngeom_smooth(size=0.5)\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS,\ny=ENGLISH)) +\ngeom_point() +\ngeom_smooth(method=lm,\nsize=0.5)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS)) +\ngeom_histogram(bins=20) +\nfacet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS)) +\ngeom_histogram(bins=20) +\nfacet_grid(~ CLASS)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x=RACE)) +\ngeom_bar()\n\n\n\n\n\nggplot(data=exam_data,\naes(x=RACE)) +\ngeom_bar() +\ncoord_flip()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS, y=ENGLISH)) +\ngeom_point() +\ngeom_smooth(method=lm, size=0.5)\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS, y=ENGLISH)) +\ngeom_point() +\ngeom_smooth(method=lm,\nsize=0.5) +\ncoord_cartesian(xlim=c(0,100),\nylim=c(0,100))\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x=RACE)) +\ngeom_bar() +\ncoord_flip() +\ntheme_gray()\n\n\n\n\n\nggplot(data=exam_data,\naes(x=RACE)) +\ngeom_bar() +\ncoord_flip() +\ntheme_classic()\n\n\n\n\n\nggplot(data=exam_data,\naes(x=RACE)) +\ngeom_bar() +\ncoord_flip() +\ntheme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below use p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Let us call the ggplot() function using the code chunk on the right.\n\nggplot(data=exam_data)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data,\naes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including: note, warning, important, tip, and caution.\n\n\n\n\n\n\n\n\nTip with Title\n\n\n\nThis is an example of a callout with a title.\n\n\n\n\n\n\n\n\nExpand To Learn About Collapse\n\n\n\n\n\nThis is an example of a ‘folded’ caution callout that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible callout that is expanded by default.\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x=RACE)) +\ngeom_bar()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x = MATHS)) +\ngeom_dotplot(dotsize = 0.5)\n\n\n\n\n\nggplot(data=exam_data,\naes(x = MATHS)) +\ngeom_dotplot(binwidth=2.5,\ndotsize = 0.5) +\nscale_y_continuous(NULL,\nbreaks = NULL)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x = MATHS)) +\ngeom_histogram()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS)) +\ngeom_histogram(bins=20,\ncolor=\"black\",\nfill=\"light blue\")\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS,\nfill = GENDER)) +\ngeom_histogram(bins=20,\ncolor=\"grey30\")\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x = MATHS)) +\ngeom_density()\n\n\n\n\n\nggplot(data=exam_data,\naes(x = MATHS,\ncolour = GENDER)) +\ngeom_density()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(y = MATHS,\nx= GENDER)) +\ngeom_boxplot()\n\n\n\n\n\nggplot(data=exam_data,\naes(y = MATHS,\nx= GENDER)) +\ngeom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(y = MATHS,\nx= GENDER)) +\ngeom_violin()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS,\ny=ENGLISH)) +\ngeom_point()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(y = MATHS,\nx= GENDER)) +\ngeom_boxplot() +\ngeom_point(position=\"jitter\",\nsize = 0.5)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(y = MATHS, x= GENDER)) +\ngeom_boxplot()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(y = MATHS, x= GENDER)) +\ngeom_boxplot() +\nstat_summary(geom = \"point\",\nfun.y=\"mean\",\ncolour =\"red\",\nsize=4)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(y = MATHS, x= GENDER)) +\ngeom_boxplot() +\ngeom_point(stat=\"summary\",\nfun.y=\"mean\",\ncolour =\"red\",\nsize=4)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS, y=ENGLISH)) +\ngeom_point() +\ngeom_smooth(size=0.5)\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS,\ny=ENGLISH)) +\ngeom_point() +\ngeom_smooth(method=lm,\nsize=0.5)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS)) +\ngeom_histogram(bins=20) +\nfacet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS)) +\ngeom_histogram(bins=20) +\nfacet_grid(~ CLASS)\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x=RACE)) +\ngeom_bar()\n\n\n\n\n\nggplot(data=exam_data,\naes(x=RACE)) +\ngeom_bar() +\ncoord_flip()\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS, y=ENGLISH)) +\ngeom_point() +\ngeom_smooth(method=lm, size=0.5)\n\n\n\n\n\nggplot(data=exam_data,\naes(x= MATHS, y=ENGLISH)) +\ngeom_point() +\ngeom_smooth(method=lm,\nsize=0.5) +\ncoord_cartesian(xlim=c(0,100),\nylim=c(0,100))\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\naes(x=RACE)) +\ngeom_bar() +\ncoord_flip() +\ntheme_gray()\n\n\n\n\n\nggplot(data=exam_data,\naes(x=RACE)) +\ngeom_bar() +\ncoord_flip() +\ntheme_classic()\n\n\n\n\n\nggplot(data=exam_data,\naes(x=RACE)) +\ngeom_bar() +\ncoord_flip() +\ntheme_minimal()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package.\n\n\n\n\n\n\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse)\n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\n\n\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe plotThe code\n\n\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse)\n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "One of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe plotThe code\n\n\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to my portfolio for the ISSS608 Visual Analytics and Applications course, taught by Professor Kam Tin Seong at Singapore Management University. This website showcases a compilation of the exercises and assignments I have undertaken and completed over the duration of the course."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-data-visualisation-beyond-default",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-data-visualisation-beyond-default",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "There are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly household income less than or equal to S$14,000. For families with monthly household income more than S$14,000, they need to turn to the private residential market.\n\n\n\nIn this task, I am to assumed the role of a graphical editor of a median company, I have been requested to prepare a minimum of two and a maximum of three data visualisation to reveal the private residential market and sub-markets of Singapore for the 1st quarter of 2024.\n\n\n\n\n\nThe following code chunk utilises p_load() function from the pacman package to ensure that the necessary packages are available in the R environment. If the packages are already installed on the computer, p_load() will load them. If they are not installed, it will first install them and then load them into the R environment.\n\npacman::p_load(tidyverse, scales,\n               lubridate, ggrepel, \n               ggthemes, hrbrthemes, \n               patchwork, knitr) \n\n\n\n\nThe Datasets\nThere are 5 datasets that covers from the start of 1st quarter 2023 to the end of the 1st quarter 2024, I decided to load each dataset in separate code chunk for better clarity in understanding the data types\n\n\n\nq1_2023 &lt;- read_csv(\"data/ResidentialTransaction20240308160536.csv\")\n\nRows: 4722 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(q1_2023)\n\nRows: 4,722\nColumns: 21\n$ `Project Name`                &lt;chr&gt; \"THE REEF AT KING'S DOCK\", \"URBAN TREASU…\n$ `Transacted Price ($)`        &lt;dbl&gt; 2317000, 1823500, 1421112, 1258112, 1280…\n$ `Area (SQFT)`                 &lt;dbl&gt; 882.65, 882.65, 1076.40, 1033.34, 871.88…\n$ `Unit Price ($ PSF)`          &lt;dbl&gt; 2625, 2066, 1320, 1218, 1468, 1767, 1095…\n$ `Sale Date`                   &lt;chr&gt; \"01 Jan 2023\", \"02 Jan 2023\", \"02 Jan 20…\n$ Address                       &lt;chr&gt; \"12 HARBOURFRONT AVENUE #05-32\", \"205 JA…\n$ `Type of Sale`                &lt;chr&gt; \"New Sale\", \"New Sale\", \"New Sale\", \"New…\n$ `Type of Area`                &lt;chr&gt; \"Strata\", \"Strata\", \"Strata\", \"Strata\", …\n$ `Area (SQM)`                  &lt;dbl&gt; 82.0, 82.0, 100.0, 96.0, 81.0, 308.7, 42…\n$ `Unit Price ($ PSM)`          &lt;dbl&gt; 28256, 22238, 14211, 13105, 15802, 19015…\n$ `Nett Price($)`               &lt;chr&gt; \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", …\n$ `Property Type`               &lt;chr&gt; \"Condominium\", \"Condominium\", \"Executive…\n$ `Number of Units`             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Tenure                        &lt;chr&gt; \"99 yrs from 12/01/2021\", \"Freehold\", \"9…\n$ `Completion Date`             &lt;chr&gt; \"Uncompleted\", \"Uncompleted\", \"Uncomplet…\n$ `Purchaser Address Indicator` &lt;chr&gt; \"HDB\", \"Private\", \"HDB\", \"HDB\", \"HDB\", \"…\n$ `Postal Code`                 &lt;chr&gt; \"097996\", \"419535\", \"269343\", \"269294\", …\n$ `Postal District`             &lt;chr&gt; \"04\", \"14\", \"27\", \"27\", \"28\", \"19\", \"10\"…\n$ `Postal Sector`               &lt;chr&gt; \"09\", \"41\", \"26\", \"26\", \"79\", \"54\", \"27\"…\n$ `Planning Region`             &lt;chr&gt; \"Central Region\", \"East Region\", \"North …\n$ `Planning Area`               &lt;chr&gt; \"Bukit Merah\", \"Bedok\", \"Yishun\", \"Yishu…\n\n\n\n\n\n\nq2_2023 &lt;- read_csv(\"data/ResidentialTransaction20240308160736.csv\")\n\nRows: 6125 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nq3_2023 &lt;- read_csv(\"data/ResidentialTransaction20240308161009.csv\")\n\nRows: 6206 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (2): Area (SQM), Number of Units\nnum  (4): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Unit Price ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nNote\n\n\n\nAs can be seen above, I noticed that in this particular dataset (Quarter 3, Year 2023) the data type for column Area (SQM) is ‘dbl’ (double), while in all the other four datasets the data type for column Area (SQM) is ‘num’ (numeric). As far as I know, R does not differentiate between ‘dbl’ and ‘num’, so in this case I will leave it as ‘dbl’ data type.\n\n\n\n\n\n\nq4_2023 &lt;- read_csv(\"data/ResidentialTransaction20240308161109.csv\")\n\nRows: 4851 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nq1_2024 &lt;- read_csv(\"data/ResidentialTransaction20240414220633.csv\")\n\nRows: 4902 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nNote\n\n\n\nI also noticed that the Sale Date column data type format in all of these five datasets are in ‘chr’ (character). I will parse/convert them into date-time format.\n\n\nData will be processed using appropriate tidyverse family of packages. Statistical graphics will be created using ggplot2 and its extensions.\nParsing the Sale Date column into date-time format using ‘lubridate’ package\n\nq1_2023 &lt;- q1_2023 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nq2_2023 &lt;- q2_2023 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nq3_2023 &lt;- q3_2023 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nq4_2023 &lt;- q4_2023 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nq1_2024 &lt;- q1_2024 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nExplanation:\n\nThe mutate() function is used to modify the Sale Date column directly.\n\nSince the column name has a space in it, I need to use backticks to refer to it within the mutate() function.\n\nThe dmy() function from the lubridate package will parse the date strings into actual Date objects.\n\nNext using the code below, I will check and confirmed that the data types have been converted properly.\n\nclass(q1_2023$`Sale Date`)\n\n[1] \"Date\"\n\nclass(q2_2023$`Sale Date`)\n\n[1] \"Date\"\n\nclass(q3_2023$`Sale Date`)\n\n[1] \"Date\"\n\nclass(q4_2023$`Sale Date`)\n\n[1] \"Date\"\n\nclass(q1_2024$`Sale Date`)\n\n[1] \"Date\"\n\n\nStep 5: Merge the Data\nAfter standardizing the data in all five datasets, I will then merge these datasets together using the bind_rows() function from the dplyr package. This function stacks data frames on top of each other, combining them into a single data frame. It’s important that all data frames have the same columns for bind_rows() to work correctly.\n\ncombined_data &lt;- bind_rows(q1_2023, q2_2023, q3_2023, q4_2023, q1_2024)\n\n\n\n\n\n\nAfter merging, it’s good practice to check the combined dataset to ensure everything looks as expected:\n\n# Check the structure of the combined data\nstr(combined_data)\n\ntibble [26,806 × 21] (S3: tbl_df/tbl/data.frame)\n $ Project Name               : chr [1:26806] \"THE REEF AT KING'S DOCK\" \"URBAN TREASURES\" \"NORTH GAIA\" \"NORTH GAIA\" ...\n $ Transacted Price ($)       : num [1:26806] 2317000 1823500 1421112 1258112 1280000 ...\n $ Area (SQFT)                : num [1:26806] 883 883 1076 1033 872 ...\n $ Unit Price ($ PSF)         : num [1:26806] 2625 2066 1320 1218 1468 ...\n $ Sale Date                  : Date[1:26806], format: \"2023-01-01\" \"2023-01-02\" ...\n $ Address                    : chr [1:26806] \"12 HARBOURFRONT AVENUE #05-32\" \"205 JALAN EUNOS #08-02\" \"29 YISHUN CLOSE #08-10\" \"45 YISHUN CLOSE #07-42\" ...\n $ Type of Sale               : chr [1:26806] \"New Sale\" \"New Sale\" \"New Sale\" \"New Sale\" ...\n $ Type of Area               : chr [1:26806] \"Strata\" \"Strata\" \"Strata\" \"Strata\" ...\n $ Area (SQM)                 : num [1:26806] 82 82 100 96 81 ...\n $ Unit Price ($ PSM)         : num [1:26806] 28256 22238 14211 13105 15802 ...\n $ Nett Price($)              : chr [1:26806] \"-\" \"-\" \"-\" \"-\" ...\n $ Property Type              : chr [1:26806] \"Condominium\" \"Condominium\" \"Executive Condominium\" \"Executive Condominium\" ...\n $ Number of Units            : num [1:26806] 1 1 1 1 1 1 1 1 1 1 ...\n $ Tenure                     : chr [1:26806] \"99 yrs from 12/01/2021\" \"Freehold\" \"99 yrs from 15/02/2021\" \"99 yrs from 15/02/2021\" ...\n $ Completion Date            : chr [1:26806] \"Uncompleted\" \"Uncompleted\" \"Uncompleted\" \"Uncompleted\" ...\n $ Purchaser Address Indicator: chr [1:26806] \"HDB\" \"Private\" \"HDB\" \"HDB\" ...\n $ Postal Code                : chr [1:26806] \"097996\" \"419535\" \"269343\" \"269294\" ...\n $ Postal District            : chr [1:26806] \"04\" \"14\" \"27\" \"27\" ...\n $ Postal Sector              : chr [1:26806] \"09\" \"41\" \"26\" \"26\" ...\n $ Planning Region            : chr [1:26806] \"Central Region\" \"East Region\" \"North Region\" \"North Region\" ...\n $ Planning Area              : chr [1:26806] \"Bukit Merah\" \"Bedok\" \"Yishun\" \"Yishun\" ...\n\n# View the first few rows to confirm data looks correct\nhead(combined_data)\n\n# A tibble: 6 × 21\n  `Project Name`       `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n  &lt;chr&gt;                                 &lt;dbl&gt;         &lt;dbl&gt;                &lt;dbl&gt;\n1 THE REEF AT KING'S …                2317000          883.                 2625\n2 URBAN TREASURES                     1823500          883.                 2066\n3 NORTH GAIA                          1421112         1076.                 1320\n4 NORTH GAIA                          1258112         1033.                 1218\n5 PARC BOTANNIA                       1280000          872.                 1468\n6 NANYANG PARK                        5870000         3323.                 1767\n# ℹ 17 more variables: `Sale Date` &lt;date&gt;, Address &lt;chr&gt;, `Type of Sale` &lt;chr&gt;,\n#   `Type of Area` &lt;chr&gt;, `Area (SQM)` &lt;dbl&gt;, `Unit Price ($ PSM)` &lt;dbl&gt;,\n#   `Nett Price($)` &lt;chr&gt;, `Property Type` &lt;chr&gt;, `Number of Units` &lt;dbl&gt;,\n#   Tenure &lt;chr&gt;, `Completion Date` &lt;chr&gt;, `Purchaser Address Indicator` &lt;chr&gt;,\n#   `Postal Code` &lt;chr&gt;, `Postal District` &lt;chr&gt;, `Postal Sector` &lt;chr&gt;,\n#   `Planning Region` &lt;chr&gt;, `Planning Area` &lt;chr&gt;\n\n# Check for any missing values or anomalies\nsummary(combined_data)\n\n Project Name       Transacted Price ($)  Area (SQFT)       Unit Price ($ PSF)\n Length:26806       Min.   :   440000    Min.   :   322.9   Min.   : 138      \n Class :character   1st Qu.:  1280000    1st Qu.:   721.2   1st Qu.:1384      \n Mode  :character   Median :  1660000    Median :   990.3   Median :1762      \n                    Mean   :  2143286    Mean   :  1191.6   Mean   :1852      \n                    3rd Qu.:  2320000    3rd Qu.:  1302.4   3rd Qu.:2260      \n                    Max.   :392180000    Max.   :144883.4   Max.   :5756      \n                                                                              \n   Sale Date            Address          Type of Sale       Type of Area      \n Min.   :2023-01-01   Length:26806       Length:26806       Length:26806      \n 1st Qu.:2023-04-29   Class :character   Class :character   Class :character  \n Median :2023-07-28   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2023-08-11                                                           \n 3rd Qu.:2023-11-20                                                           \n Max.   :2024-03-31                                                           \n                                                                              \n   Area (SQM)      Unit Price ($ PSM) Nett Price($)      Property Type     \n Min.   :   30.0   Min.   : 1484      Length:26806       Length:26806      \n 1st Qu.:   67.0   1st Qu.:14893      Class :character   Class :character  \n Median :   92.0   Median :18966      Mode  :character   Mode  :character  \n Mean   :  110.5   Mean   :19930                                           \n 3rd Qu.:  121.0   3rd Qu.:24327                                           \n Max.   :13460.0   Max.   :61962                                           \n NA's   :6                                                                 \n Number of Units     Tenure          Completion Date   \n Min.   : 1.000   Length:26806       Length:26806      \n 1st Qu.: 1.000   Class :character   Class :character  \n Median : 1.000   Mode  :character   Mode  :character  \n Mean   : 1.005                                        \n 3rd Qu.: 1.000                                        \n Max.   :60.000                                        \n                                                       \n Purchaser Address Indicator Postal Code        Postal District   \n Length:26806                Length:26806       Length:26806      \n Class :character            Class :character   Class :character  \n Mode  :character            Mode  :character   Mode  :character  \n                                                                  \n                                                                  \n                                                                  \n                                                                  \n Postal Sector      Planning Region    Planning Area     \n Length:26806       Length:26806       Length:26806      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                                                         \n\n\n\n\n\nSince I may need to use to use this merged datasets repeatedly, I will save it into a file for easy access in future sessions. I will use ‘write_csv()’ function from the ‘readr’ package (part of the ‘tidyverse’) to write this merged data frame to a CSV file.\n\nwrite_csv(combined_data, \"data/All_ResidentialTransactions_2023-2024.csv\")\n\n\n\n\nNow the data has been consolidated into a single dataframe, it is time to move forward with analysis:\n\nDescriptive Statistics: Summarize the data to get a sense of trends or patterns.\nTime Series Analysis: Analyze changes over time across different quarters.\nVisualizations: Create plots to visualize trends, distributions, and relationships in the data.\n\n\n\n\nAfter all the previous setup and loaded libraries, next is to create the visualization to see the trends in the data.\n\n# Generate a Month-Year field for the x-axis and calculate total sales volume\nmonthly_sales_stats &lt;- combined_data %&gt;%\n  mutate(Month = floor_date(`Sale Date`, unit = \"month\")) %&gt;%\n  group_by(Month) %&gt;%\n  summarise(Total_Sales_Volume = sum(`Number of Units`, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  arrange(Month)\n\n# Calculate the average monthly sales volume\naverage_sales_volume &lt;- mean(monthly_sales_stats$Total_Sales_Volume)\n\n# Create the line chart visualizing monthly sales volume and add the average reference line\nmonthly_sales_line_chart &lt;- ggplot(monthly_sales_stats, aes(x = Month, y = Total_Sales_Volume)) +\n  geom_line(color = \"black\") +  # Line color\n  geom_point(color = \"black\") +  # Point color\n  geom_hline(yintercept = average_sales_volume, linetype = \"dotted\", color = \"red\", size = 1) +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%b %Y\") +\n  theme_minimal() +\n  labs(\n    title = \"Monthly Sales Volume with Average Reference Line\",\n    x = \"Month\",\n    y = \"Total Units Sold\"\n  ) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate the x-axis text for better readability\n\n# Print the plot\nmonthly_sales_line_chart\n\n\n\n\nThe visualisation illustrates the monthly sales volume trend of private housing units from January 2023 to March 2024. The trend shows significant fluctuation throughout the period, with peaks and troughs corresponding to market activity. Notably, there’s a sharp increase in March 2023, suggesting a spike in sales, possibly due to market stimuli or seasonal factors. The overall pattern indicates a resilient market, yet with periods of reticence, potentially reflective of economic events or policy changes. The red dotted line represents the average sales volume across the period, providing a benchmark against which to compare monthly performance. The months above this line saw higher-than-average sales, whereas those below saw fewer transactions, highlighting the varying buyer activity throughout the year.\n\n# Assuming 'combined_data' is your dataframe and has a column 'Property Type'\n# and 'Number of Units' for each transaction\n\n# First, we aggregate the number of units sold by property type\nproperty_type_distribution &lt;- combined_data %&gt;%\n  group_by(`Property Type`) %&gt;%\n  summarise(Transactions = n(), .groups = 'drop')\n\n# Now, we plot the distribution\nproperty_type_chart &lt;- ggplot(property_type_distribution, aes(x = `Property Type`, y = Transactions, fill = `Property Type`)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  labs(title = \"Property Type Distribution in Singapore Private Residential Market\",\n       x = \"Property Type\",\n       y = \"Number of Transactions\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n# Print the plot\nprint(property_type_chart)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#loading-r-packages",
    "title": "In-class_Ex02 Demo",
    "section": "Loading R packages",
    "text": "Loading R packages\n\npacman::p_load(tidyverse, ggdist, ggridges,\n               colorspace, ggthemes) \n\nInstalling package into 'C:/Users/Arya Siahaan/AppData/Local/R/win-library/4.3'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.3:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.3/PACKAGES'\n\n\npackage 'ggdist' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\RtmpWkjOvK\\downloaded_packages\n\n\n\nggdist installed\n\n\nWarning in pacman::p_load(tidyverse, ggdist, ggridges, colorspace, ggthemes): Failed to install/load:\nggdist"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#visualising-distribution",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#visualising-distribution",
    "title": "In-class_Ex02 Demo",
    "section": "Visualising Distribution",
    "text": "Visualising Distribution"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#histogram",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#histogram",
    "title": "In-class_Ex02 Demo",
    "section": "Histogram",
    "text": "Histogram"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#visualising-distribution-1",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#visualising-distribution-1",
    "title": "In-class_Ex02 Demo",
    "section": "Visualising Distribution",
    "text": "Visualising Distribution"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#probability-density-plot",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#probability-density-plot",
    "title": "In-class_Ex02 Demo",
    "section": "Probability density plot",
    "text": "Probability density plot\n\nThe taskThe code\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df,\n       aes(x = ENGLISH)) +\n  geom_density(\n    color = \"#1696d2\",\n    adjust = .65,\n    alpha = .6\n  )\n\n\n\n\nmedian_eng &lt;- median(exam_df\\(ENGLISH) mean_eng &lt;- mean(exam_df\\)ENGLISH) std_eng &lt;_ sd(exam_df$ENGLISH)\nggplot(exam_df, aes(x = ENGLISH)) geom_density( color = “#1696d2”, adjust = .65, alpha = .6) + stat_function( fun = dnorm, args = list(mean = mean_eng, sd = std_eng), col = “grey30”, size = 0.8) + geom_vline( aes(xintercept = mean_eng), colour=“4d5887”, linewidth = 0.6, linetype = “dashed”) + annotate(geom = “text”, x = mean_eng - 8 y = 0.04, label = paste0(“Mean ENGLISH:”, round((mean_eng), 2)), ) ) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Before we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\nThe code chunk below use p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk on the right assumes that you already have pacman package installed. If not, please go ahead install pacman first.\n\n\n\npacman::p_load(tidyverse)\n\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics\n\nIt is also part of the tidyverse family specially designed for visual exploration and communication.\n\n\nFor more detail, visit ggplot2 link.\n\n\n\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Before we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\nWhat is a statistical graphic?\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\nInstalling package into 'C:/Users/Arya Siahaan/AppData/Local/R/win-library/4.3'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.3:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.3/PACKAGES'\n\n\npackage 'ggiraph' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\RtmpmquXMR\\downloaded_packages\n\n\n\nggiraph installed\nInstalling package into 'C:/Users/Arya Siahaan/AppData/Local/R/win-library/4.3'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.3:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.3/PACKAGES'\n\n\npackage 'plotly' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\RtmpmquXMR\\downloaded_packages\n\n\n\nplotly installed\n\n\nWarning in pacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse): Failed to install/load:\nggiraph"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#learning-outcome",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "First, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\nInstalling package into 'C:/Users/Arya Siahaan/AppData/Local/R/win-library/4.3'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.3:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.3/PACKAGES'\n\n\npackage 'ggiraph' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\RtmpmquXMR\\downloaded_packages\n\n\n\nggiraph installed\nInstalling package into 'C:/Users/Arya Siahaan/AppData/Local/R/win-library/4.3'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.3:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.3/PACKAGES'\n\n\npackage 'plotly' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Arya Siahaan\\AppData\\Local\\Temp\\RtmpmquXMR\\downloaded_packages\n\n\n\nplotly installed\n\n\nWarning in pacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse): Failed to install/load:\nggiraph"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-packages",
    "title": "Take-home Exercise 1",
    "section": "Loading Packages",
    "text": "Loading Packages\n\n\n\nLibrary\nDescription\n\n\n\n\npacman\nPacman is a package that makes it possible to perform tasks associated with add-on packages in a more convenient manner. It checks whether the add-on packages are installed or not. If not, it will automatically install and load them into the R environment. In this take-home exercise 1, the pacman package has been installed beforehand.\n\n\ntidyverse\nA collection of core packages designed for data science, used extensively for data preparation and wrangling. Content includes: ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, forcats, scales, lubridate, etc.\n\n\nscales\nThis package is designed to enhance how data is presented in visualisation, particularly in ggplot2 plots. It provides tools for mapping data to aesthetic attributes like colours, shapes, and sizes more effectively. It also includes functions for formatting and transforming axes and legends in a chart. Even though this is part of the tidyverse package collection, it needs to be installed and loaded separately.\n\n\nlubridate\nIt is a package to work with date-times and time-spans: fast and user-friendly parsing of date-time data, extraction and updating of components of a date-time (years, months, days, hours, minutes, and seconds), algebraic manipulation on date-time and time-span objects. This is part of the tidyverse collection, but it is not automatically loaded, so I will need to load it explicitly as I plan to use its functionality.\n\n\nggrepel\nAn R package provides geoms for ggplot2 to repel overlapping text labels. This is not part of the tidyverse package collection, but it is an extension of ggplot2.\n\n\nggthemes\nAnother separate R package that provides additional themes and scales for ggplot2 to enhance the appearance of plots. This package will also need to be installed and loaded independently.\n\n\nhrbrthemes\nThis package provides additional typography-centric themes and theme components for ggplot2, focused on improving readability and appearance for data visualisation. It must be installed and loaded independently.\n\n\npatchwork\nThis one is also an extension package for ggplot2 that allows combining multiple ggplot2 plots into one (composite figure) and arranging them in various layouts. Even though patchwork complements the functionality of ggplot2, it is independently maintained and must be installed and loaded separately.\n\n\n\nThe following code chunk utilises the p_load() function from the pacman package to ensure that the necessary packages are available in the R environment. If the packages are already installed on the computer, p_load() will load them. If they are not installed, it will first install them and then load them into the R environment.\n\npacman::p_load(tidyverse, scales,\n               lubridate, ggrepel, \n               ggthemes, hrbrthemes, \n               patchwork, knitr)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-the-data",
    "title": "Take-home Exercise 1",
    "section": "Loading The Data",
    "text": "Loading The Data\n\nThe Datasets\nThere are five datasets that cover from the start of the 1st quarter 2023 to the end of the 1st quarter 2024, I decided to load each dataset in a separate code chunk for better clarity in understanding the data types.\n\n\nQuarter 1, Year 2023:\n\nq1_2023 &lt;- read_csv(\"data/ResidentialTransaction20240308160536.csv\")\n\nRows: 4722 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nQuarter 2, Year 2023:\n\nq2_2023 &lt;- read_csv(\"data/ResidentialTransaction20240308160736.csv\")\n\nRows: 6125 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nQuarter 3, Year 2023:\n\nq3_2023 &lt;- read_csv(\"data/ResidentialTransaction20240308161009.csv\")\n\nRows: 6206 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (2): Area (SQM), Number of Units\nnum  (4): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Unit Price ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nNote\n\n\n\nAs can be seen above, I noticed that in this particular dataset (Quarter 3, Year 2023), the data type for column Area (SQM) is ‘dbl’ (double), while in all the other four datasets, the data type for column Area (SQM) is ‘num’ (numeric). As far as I know, R does not differentiate between ‘dbl’ and ‘num’, so in this case, I will leave it as ‘dbl’ data type.\n\n\n\n\nQuarter 4, Year 2023:\n\nq4_2023 &lt;- read_csv(\"data/ResidentialTransaction20240308161109.csv\")\n\nRows: 4851 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nQuarter 1, Year 2024:\n\nq1_2024 &lt;- read_csv(\"data/ResidentialTransaction20240414220633.csv\")\n\nRows: 4902 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Project Name, Sale Date, Address, Type of Sale, Type of Area, Nett...\ndbl  (1): Number of Units\nnum  (5): Transacted Price ($), Area (SQFT), Unit Price ($ PSF), Area (SQM),...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nNote\n\n\n\nI also noticed that the Sale Date data type format in all of these five datasets is ‘chr’ (character). I will parse/convert them into date-time format."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#parsing-data-type",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#parsing-data-type",
    "title": "Take-home Exercise 1",
    "section": "Parsing Data Type",
    "text": "Parsing Data Type\nParsing the Sale Date column into date-time format using ‘lubridate’ package\n\nq1_2023 &lt;- q1_2023 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nq2_2023 &lt;- q2_2023 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nq3_2023 &lt;- q3_2023 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nq4_2023 &lt;- q4_2023 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nq1_2024 &lt;- q1_2024 %&gt;%\n  mutate(`Sale Date` = dmy(`Sale Date`))\n\nExplanation:\n\nThe mutate() function is used to modify the Sale Date column directly.\n\nSince the column name has a space in it, I need to use backticks to refer to it within the mutate() function.\n\nThe dmy() function from the ‘lubridate’ package will parse the date strings into actual Date objects.\n\nNext, using the code below, I will check and confirm that the data types have been converted properly.\n\nclass(q1_2023$`Sale Date`)\n\n[1] \"Date\"\n\nclass(q2_2023$`Sale Date`)\n\n[1] \"Date\"\n\nclass(q3_2023$`Sale Date`)\n\n[1] \"Date\"\n\nclass(q4_2023$`Sale Date`)\n\n[1] \"Date\"\n\nclass(q1_2024$`Sale Date`)\n\n[1] \"Date\""
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#merge-the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#merge-the-data",
    "title": "Take-home Exercise 1",
    "section": "Merge the Data",
    "text": "Merge the Data\nAfter standardising the data in all five datasets, I will then merge these datasets together using the bind_rows() function from the ‘dplyr’ package. This function stacks data frames on top of each other, combining them into a single data frame. It’s important that all data frames have the same columns for bind_rows() to work correctly.\n\ncombined_data &lt;- bind_rows(q1_2023, q2_2023, q3_2023, q4_2023, q1_2024)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#inspect-the-merged-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#inspect-the-merged-data",
    "title": "Take-home Exercise 1",
    "section": "Inspect the Merged Data",
    "text": "Inspect the Merged Data\nAfter merging, it’s good practice to check the combined dataset to ensure everything looks as expected:\n\n# Check the structure of the combined data\nstr(combined_data)\n\ntibble [26,806 × 21] (S3: tbl_df/tbl/data.frame)\n $ Project Name               : chr [1:26806] \"THE REEF AT KING'S DOCK\" \"URBAN TREASURES\" \"NORTH GAIA\" \"NORTH GAIA\" ...\n $ Transacted Price ($)       : num [1:26806] 2317000 1823500 1421112 1258112 1280000 ...\n $ Area (SQFT)                : num [1:26806] 883 883 1076 1033 872 ...\n $ Unit Price ($ PSF)         : num [1:26806] 2625 2066 1320 1218 1468 ...\n $ Sale Date                  : Date[1:26806], format: \"2023-01-01\" \"2023-01-02\" ...\n $ Address                    : chr [1:26806] \"12 HARBOURFRONT AVENUE #05-32\" \"205 JALAN EUNOS #08-02\" \"29 YISHUN CLOSE #08-10\" \"45 YISHUN CLOSE #07-42\" ...\n $ Type of Sale               : chr [1:26806] \"New Sale\" \"New Sale\" \"New Sale\" \"New Sale\" ...\n $ Type of Area               : chr [1:26806] \"Strata\" \"Strata\" \"Strata\" \"Strata\" ...\n $ Area (SQM)                 : num [1:26806] 82 82 100 96 81 ...\n $ Unit Price ($ PSM)         : num [1:26806] 28256 22238 14211 13105 15802 ...\n $ Nett Price($)              : chr [1:26806] \"-\" \"-\" \"-\" \"-\" ...\n $ Property Type              : chr [1:26806] \"Condominium\" \"Condominium\" \"Executive Condominium\" \"Executive Condominium\" ...\n $ Number of Units            : num [1:26806] 1 1 1 1 1 1 1 1 1 1 ...\n $ Tenure                     : chr [1:26806] \"99 yrs from 12/01/2021\" \"Freehold\" \"99 yrs from 15/02/2021\" \"99 yrs from 15/02/2021\" ...\n $ Completion Date            : chr [1:26806] \"Uncompleted\" \"Uncompleted\" \"Uncompleted\" \"Uncompleted\" ...\n $ Purchaser Address Indicator: chr [1:26806] \"HDB\" \"Private\" \"HDB\" \"HDB\" ...\n $ Postal Code                : chr [1:26806] \"097996\" \"419535\" \"269343\" \"269294\" ...\n $ Postal District            : chr [1:26806] \"04\" \"14\" \"27\" \"27\" ...\n $ Postal Sector              : chr [1:26806] \"09\" \"41\" \"26\" \"26\" ...\n $ Planning Region            : chr [1:26806] \"Central Region\" \"East Region\" \"North Region\" \"North Region\" ...\n $ Planning Area              : chr [1:26806] \"Bukit Merah\" \"Bedok\" \"Yishun\" \"Yishun\" ...\n\n# View the first few rows to confirm data looks correct\nhead(combined_data)\n\n# A tibble: 6 × 21\n  `Project Name`       `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n  &lt;chr&gt;                                 &lt;dbl&gt;         &lt;dbl&gt;                &lt;dbl&gt;\n1 THE REEF AT KING'S …                2317000          883.                 2625\n2 URBAN TREASURES                     1823500          883.                 2066\n3 NORTH GAIA                          1421112         1076.                 1320\n4 NORTH GAIA                          1258112         1033.                 1218\n5 PARC BOTANNIA                       1280000          872.                 1468\n6 NANYANG PARK                        5870000         3323.                 1767\n# ℹ 17 more variables: `Sale Date` &lt;date&gt;, Address &lt;chr&gt;, `Type of Sale` &lt;chr&gt;,\n#   `Type of Area` &lt;chr&gt;, `Area (SQM)` &lt;dbl&gt;, `Unit Price ($ PSM)` &lt;dbl&gt;,\n#   `Nett Price($)` &lt;chr&gt;, `Property Type` &lt;chr&gt;, `Number of Units` &lt;dbl&gt;,\n#   Tenure &lt;chr&gt;, `Completion Date` &lt;chr&gt;, `Purchaser Address Indicator` &lt;chr&gt;,\n#   `Postal Code` &lt;chr&gt;, `Postal District` &lt;chr&gt;, `Postal Sector` &lt;chr&gt;,\n#   `Planning Region` &lt;chr&gt;, `Planning Area` &lt;chr&gt;\n\n# Check for any missing values or anomalies\nsummary(combined_data)\n\n Project Name       Transacted Price ($)  Area (SQFT)       Unit Price ($ PSF)\n Length:26806       Min.   :   440000    Min.   :   322.9   Min.   : 138      \n Class :character   1st Qu.:  1280000    1st Qu.:   721.2   1st Qu.:1384      \n Mode  :character   Median :  1660000    Median :   990.3   Median :1762      \n                    Mean   :  2143286    Mean   :  1191.6   Mean   :1852      \n                    3rd Qu.:  2320000    3rd Qu.:  1302.4   3rd Qu.:2260      \n                    Max.   :392180000    Max.   :144883.4   Max.   :5756      \n                                                                              \n   Sale Date            Address          Type of Sale       Type of Area      \n Min.   :2023-01-01   Length:26806       Length:26806       Length:26806      \n 1st Qu.:2023-04-29   Class :character   Class :character   Class :character  \n Median :2023-07-28   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2023-08-11                                                           \n 3rd Qu.:2023-11-20                                                           \n Max.   :2024-03-31                                                           \n                                                                              \n   Area (SQM)      Unit Price ($ PSM) Nett Price($)      Property Type     \n Min.   :   30.0   Min.   : 1484      Length:26806       Length:26806      \n 1st Qu.:   67.0   1st Qu.:14893      Class :character   Class :character  \n Median :   92.0   Median :18966      Mode  :character   Mode  :character  \n Mean   :  110.5   Mean   :19930                                           \n 3rd Qu.:  121.0   3rd Qu.:24327                                           \n Max.   :13460.0   Max.   :61962                                           \n NA's   :6                                                                 \n Number of Units     Tenure          Completion Date   \n Min.   : 1.000   Length:26806       Length:26806      \n 1st Qu.: 1.000   Class :character   Class :character  \n Median : 1.000   Mode  :character   Mode  :character  \n Mean   : 1.005                                        \n 3rd Qu.: 1.000                                        \n Max.   :60.000                                        \n                                                       \n Purchaser Address Indicator Postal Code        Postal District   \n Length:26806                Length:26806       Length:26806      \n Class :character            Class :character   Class :character  \n Mode  :character            Mode  :character   Mode  :character  \n                                                                  \n                                                                  \n                                                                  \n                                                                  \n Postal Sector      Planning Region    Planning Area     \n Length:26806       Length:26806       Length:26806      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#save-the-merged-dataset",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#save-the-merged-dataset",
    "title": "Take-home Exercise 1",
    "section": "Save the Merged Dataset",
    "text": "Save the Merged Dataset\nSince I may need to use to use this merged datasets repeatedly, I will save it into a file for easy access in future sessions. I will use write_csv() function from the ‘readr’ package (part of the ‘tidyverse’) to write this merged data frame to a CSV file.\n\nwrite_csv(combined_data, \"data/All_ResidentialTransactions_2023-2024.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#step-8-proceed-with-visualisation-and-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#step-8-proceed-with-visualisation-and-analysis",
    "title": "Take-home Exercise 1",
    "section": "Step 8: Proceed with Visualisation and Analysis",
    "text": "Step 8: Proceed with Visualisation and Analysis\nNow the data has been consolidated into a single dataframe, it is time to move forward with analysis:\n\nDescriptive Statistics: Summarize the data to get a sense of trends or patterns.\nTime Series Analysis: Analyze changes over time across different quarters.\nVisualizations: Create plots to visualize trends, distributions, and relationships in the data.\n\nAfter all the previous setup and loaded libraries, next is to create the visualization to see the trends in the data.\n\n# Generate a Month-Year field for the x-axis and calculate total sales volume\nmonthly_sales_stats &lt;- combined_data %&gt;%\n  mutate(Month = floor_date(`Sale Date`, unit = \"month\")) %&gt;%\n  group_by(Month) %&gt;%\n  summarise(Total_Sales_Volume = sum(`Number of Units`, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  arrange(Month)\n\n# Calculate the average monthly sales volume\naverage_sales_volume &lt;- mean(monthly_sales_stats$Total_Sales_Volume)\n\n# Create the line chart visualizing monthly sales volume and add the average reference line\nmonthly_sales_line_chart &lt;- ggplot(monthly_sales_stats, aes(x = Month, y = Total_Sales_Volume)) +\n  geom_line(color = \"black\") +  # Line color\n  geom_point(color = \"black\") +  # Point color\n  geom_hline(yintercept = average_sales_volume, linetype = \"dotted\", color = \"red\", size = 1) +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%b %Y\") +\n  theme_minimal() +\n  labs(\n    title = \"Monthly Sales Volume with Average Reference Line\",\n    x = \"Month\",\n    y = \"Total Units Sold\"\n  ) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate the x-axis text for better readability\n\n# Print the plot\nmonthly_sales_line_chart\n\n\n\n\nThe visualisation illustrates the monthly sales volume trend of private housing units from January 2023 to March 2024. The trend shows significant fluctuation throughout the period, with peaks and troughs corresponding to market activity. Notably, there’s a sharp increase in March 2023, suggesting a spike in sales, possibly due to market stimuli or seasonal factors. The overall pattern indicates a resilient market, yet with periods of reticence, potentially reflective of economic events or policy changes. The red dotted line represents the average sales volume across the period, providing a benchmark against which to compare monthly performance. The months above this line saw higher-than-average sales, whereas those below saw fewer transactions, highlighting the varying buyer activity throughout the year.\n\n# First, we aggregate the number of units sold by property type\nproperty_type_distribution &lt;- combined_data %&gt;%\n  group_by(`Property Type`) %&gt;%\n  summarise(Transactions = n(), .groups = 'drop')\n\n# Now, we plot the distribution\nproperty_type_chart &lt;- ggplot(property_type_distribution, aes(x = `Property Type`, y = Transactions)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") + # All bars in 'steelblue'\n  theme_minimal() +\n  labs(title = \"Sales Distribution based on Property Type in Singapore Private Residential Market\",\n       x = \"Property Type\",\n       y = \"Number of Transactions\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1),\n        legend.position = \"none\") # Remove legend\n\n# Print the plot\nprint(property_type_chart)\n\n\n\n\nThe bar chart illustrates the frequency of transactions across different property types in Singapore’s private residential market. Condominiums and apartments are the most commonly traded, suggesting a high demand for such property types, which could be due to their affordability and availability. Executive condominiums and detached houses represent a smaller fraction, likely reflecting their higher price points and more exclusive market position. The varied transaction volume across property types offers valuable insight into consumer preferences and the real estate market’s dynamics, particularly indicating a trend towards high-density living options.\n\n# Filter for Apartments and Condominiums only\napt_condo_data &lt;- combined_data %&gt;%\n  filter(`Property Type` %in% c(\"Apartment\", \"Condominium\"))\n\n# Create the box plots\nprice_comparison_plot &lt;- ggplot(apt_condo_data, aes(x = `Property Type`, y = `Transacted Price ($)`, color = `Property Type`)) +\n  geom_boxplot() +\n  scale_color_manual(values = c(\"blue\", \"green\")) + # You can choose your own colors\n  theme_minimal() +\n  labs(title = \"Price Distribution for Apartments and Condominiums\",\n       x = \"Property Type\",\n       y = \"Transacted Price ($)\") +\n  theme(legend.position = \"none\") # This removes the legend\n\n# Print the plot\nprint(price_comparison_plot)\n\n\n\n\n\n# Filter combined_data for condominiums\ncondo_sales &lt;- combined_data %&gt;% \n  filter(`Property Type` == \"Condominium\")\n\n# Create a histogram to display the price distribution for condos\nggplot(condo_sales, aes(x = `Transacted Price ($)`)) +\n  geom_histogram(bins = 30, fill = \"blue\", color = \"black\") + # Adjust the number of bins as necessary\n  theme_minimal() +\n  labs(title = \"Price Distribution of Condominiums\",\n       x = \"Sale Price ($)\",\n       y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for readability\n\n\n\n\n\n# Assuming your combined_data dataframe has 'Transacted Price ($)' for the sale prices\n# and 'Property Type' for filtering to \"Condominium\"\n\n# Filter combined_data for condominiums\ncondo_sales &lt;- combined_data %&gt;% \n  filter(`Property Type` == \"Condominium\")\n\n# Create a density plot to display the price distribution for condos\nggplot(condo_sales, aes(x = `Transacted Price ($)`)) +\n  geom_density(fill = \"blue\", alpha = 0.5) + # Adjust the color and transparency as needed\n  theme_minimal() +\n  labs(title = \"Price Distribution of Condominiums - Density Plot\",\n       x = \"Sale Price ($)\",\n       y = \"Density\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for readability"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#proceed-with-visualisation-and-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#proceed-with-visualisation-and-analysis",
    "title": "Take-home Exercise 1",
    "section": "Proceed with Visualisation and Analysis**",
    "text": "Proceed with Visualisation and Analysis**\nNow that the data has been consolidated into a single dataframe, it is time to move forward with analysis:\nAfter completing all the previous setup and loading libraries, the next step is to create the visualisations to gather insights from the data.\n\n# Generate a Month-Year field for the x-axis and calculate total sales volume\nmonthly_sales_stats &lt;- combined_data %&gt;%\n  mutate(Month = floor_date(`Sale Date`, unit = \"month\")) %&gt;%\n  group_by(Month) %&gt;%\n  summarise(Total_Sales_Volume = sum(`Number of Units`, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  arrange(Month)\n\n# Calculate the average monthly sales volume\naverage_sales_volume &lt;- mean(monthly_sales_stats$Total_Sales_Volume)\n\n# Create the line chart visualizing monthly sales volume and add the average reference line\nmonthly_sales_line_chart &lt;- ggplot(monthly_sales_stats, aes(x = Month, y = Total_Sales_Volume)) +\n  geom_line(color = \"black\") +  # Line color\n  geom_point(color = \"black\") +  # Point color\n  geom_hline(yintercept = average_sales_volume, linetype = \"dotted\", color = \"red\", size = 1) +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%b %Y\") +\n  theme_minimal() +\n  labs(\n    title = \"Monthly Sales Volume with Average Reference Line\",\n    x = \"Month\",\n    y = \"Total Units Sold\"\n  ) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate the x-axis text for better readability\n\n# Print the plot\nmonthly_sales_line_chart\n\n\n\n\nThe visualisation illustrates the monthly sales volume trend of private housing units from January 2023 to March 2024. The trend shows significant fluctuation throughout the period, with peaks and troughs corresponding to market activity. Notably, there’s a sharp increase in March 2023, suggesting a spike in sales, possibly due to market stimuli or seasonal factors. The overall pattern indicates a resilient market, yet with periods of reticence, potentially reflective of economic events or policy changes. The red dotted line represents the average sales volume across the period, providing a benchmark against which to compare monthly performance. The months above this line saw higher-than-average sales, whereas those below saw fewer transactions, highlighting the varying buyer activity throughout the year.\n\n# First, we aggregate the number of units sold by property type\nproperty_type_distribution &lt;- combined_data %&gt;%\n  group_by(`Property Type`) %&gt;%\n  summarise(Transactions = n(), .groups = 'drop')\n\n# Now, we plot the distribution\nproperty_type_chart &lt;- ggplot(property_type_distribution, aes(x = `Property Type`, y = Transactions)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") + # All bars in 'steelblue'\n  theme_minimal() +\n  labs(title = \"Sales Distribution based on Property Type in Singapore Private Residential Market\",\n       x = \"Property Type\",\n       y = \"Number of Transactions\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1),\n        legend.position = \"none\") # Remove legend\n\n# Print the plot\nprint(property_type_chart)\n\n\n\n\nThe bar chart illustrates the frequency of transactions across different property types in Singapore’s private residential market. Condominiums and apartments are the most commonly traded, suggesting a high demand for such property types, which could be due to their affordability and availability. Executive condominiums and detached houses represent a smaller fraction, likely reflecting their higher price points and more exclusive market position. The varied transaction volume across property types offers valuable insight into consumer preferences and the real estate market’s dynamics, particularly indicating a trend towards high-density living options."
  }
]